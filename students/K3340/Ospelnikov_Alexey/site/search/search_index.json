{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u044b\u0435 \u0440\u0430\u0431\u043e\u0442\u044b \u043f\u043e \u043f\u0440\u0435\u0434\u043c\u0435\u0442\u0443: Web-\u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 1 1) \u0421\u0434\u0435\u043b\u0430\u043d\u044b \u0431\u0430\u0437\u043e\u0432\u044b\u0435 UDP \u0438 TCP \u043a\u043b\u0438\u0435\u043d\u0442-\u0441\u0435\u0440\u0432\u0435\u0440\u043d\u044b\u0435 \u0432\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f 2) \u0421\u0434\u0435\u043b\u0430\u043d \u0431\u0430\u0437\u043e\u0432\u044b\u0439 Web-\u0441\u0435\u0440\u0432\u0435\u0440 3) \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d \u043c\u043d\u043e\u0433\u043e\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u0447\u0430\u0442 \u0447\u0435\u0440\u0435\u0437 TCP \u043f\u0440\u043e\u0442\u043e\u043a\u043e\u043b 4) \u041d\u0430\u043f\u0438\u0441\u0430\u043d Web-\u0441\u0435\u0440\u0432\u0435\u0440 \u0434\u043b\u044f \u0432\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f \u0441\u043e \u0448\u043a\u043e\u043b\u044c\u043d\u044b\u043c\u0438 \u043e\u0446\u0435\u043d\u043a\u0430\u043c\u0438 \u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 2 \u0421\u043f\u0438\u0441\u043e\u043a \u043e\u0442\u0435\u043b\u0435\u0439 \u2003\u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0443\u0447\u0438\u0442\u044b\u0432\u0430\u0442\u044c \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u043e\u0442\u0435\u043b\u044f, \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0430 \u043e\u0442\u0435\u043b\u044f, \u0430\u0434\u0440\u0435\u0441, \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435, \u0442\u0438\u043f\u044b \u043d\u043e\u043c\u0435\u0440\u043e\u0432, \u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c, \u0432\u043c\u0435\u0441\u0442\u0438\u043c\u043e\u0441\u0442\u044c, \u0443\u0434\u043e\u0431\u0441\u0442\u0432\u0430. \u2003\u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0439 \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b: \u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u043d\u043e\u0432\u044b\u0445 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439. \u041f\u0440\u043e\u0441\u043c\u043e\u0442\u0440 \u0438 \u0440\u0435\u0437\u0435\u0440\u0432\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043d\u043e\u043c\u0435\u0440\u043e\u0432. \u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u0434\u043e\u043b\u0436\u0435\u043d \u0438\u043c\u0435\u0442\u044c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0440\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0438 \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u044f \u0441\u0432\u043e\u0438\u0445 \u0440\u0435\u0437\u0435\u0440\u0432\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0439. \u041d\u0430\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u043e\u0442\u0437\u044b\u0432\u043e\u0432 \u043a \u043d\u043e\u043c\u0435\u0440\u0430\u043c. \u041f\u0440\u0438 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0438 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0435\u0432, \u0434\u043e\u043b\u0436\u043d\u044b \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0442\u044c\u0441\u044f \u043f\u0435\u0440\u0438\u043e\u0434 \u043f\u0440\u043e\u0436\u0438\u0432\u0430\u043d\u0438\u044f, \u0442\u0435\u043a\u0441\u0442 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u044f, \u0440\u0435\u0439\u0442\u0438\u043d\u0433 (1-10), \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0442\u043e\u0440\u0435. \u0410\u0434\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0430\u0442\u043e\u0440 \u0434\u043e\u043b\u0436\u0435\u043d \u0438\u043c\u0435\u0442\u044c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0437\u0430\u0441\u0435\u043b\u0438\u0442\u044c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0432 \u043e\u0442\u0435\u043b\u044c \u0438 \u0432\u044b\u0441\u0435\u043b\u0438\u0442\u044c \u0438\u0437 \u043e\u0442\u0435\u043b\u044f \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 Django-admin. \u0412 \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u043e\u0439 \u0447\u0430\u0441\u0442\u0438 \u0434\u043e\u043b\u0436\u043d\u0430 \u0444\u043e\u0440\u043c\u0438\u0440\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u0442\u0430\u0431\u043b\u0438\u0446\u0430, \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0430\u044e\u0449\u0430\u044f \u043f\u043e\u0441\u0442\u043e\u044f\u043b\u044c\u0446\u0435\u0432 \u043e\u0442\u0435\u043b\u044f \u0437\u0430 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0439 \u043c\u0435\u0441\u044f\u0446. \u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 3 \u0438 4 \u041e\u0442\u0435\u043b\u044c \u2003\u0421\u043e\u0437\u0434\u0430\u0442\u044c \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u043d\u0443\u044e \u0441\u0438\u0441\u0442\u0435\u043c\u0443, \u043f\u0440\u0435\u0434\u043d\u0430\u0437\u043d\u0430\u0447\u0435\u043d\u043d\u0443\u044e \u0434\u043b\u044f \u0430\u0434\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0430\u0442\u043e\u0440\u0430 \u0433\u043e\u0441\u0442\u0438\u043d\u0438\u0446\u044b. \u2003\u0422\u0430\u043a\u0430\u044f \u0441\u0438\u0441\u0442\u0435\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u043e\u0431\u0435\u0441\u043f\u0435\u0447\u0438\u0432\u0430\u0442\u044c \u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u0441\u0432\u0435\u0434\u0435\u043d\u0438\u0439 \u043e\u0431 \u0438\u043c\u0435\u044e\u0449\u0438\u0445\u0441\u044f \u0432 \u0433\u043e\u0441\u0442\u0438\u043d\u0438\u0446\u0435 \u043d\u043e\u043c\u0435\u0440\u0430\u0445, \u043e \u043f\u0440\u043e\u0436\u0438\u0432\u0430\u044e\u0449\u0438\u0445 \u0432 \u0433\u043e\u0441\u0442\u0438\u043d\u0438\u0446\u0435 \u043a\u043b\u0438\u0435\u043d\u0442\u0430\u0445 \u0438 \u043e \u0441\u043b\u0443\u0436\u0430\u0449\u0438\u0445, \u0443\u0431\u0438\u0440\u0430\u044e\u0449\u0438\u0445\u0441\u044f \u0432 \u043d\u043e\u043c\u0435\u0440\u0430\u0445. \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043d\u043e\u043c\u0435\u0440\u043e\u0432 \u0432 \u0433\u043e\u0441\u0442\u0438\u043d\u0438\u0446\u0435 \u0438\u0437\u0432\u0435\u0441\u0442\u043d\u043e, \u0438 \u0438\u043c\u0435\u044e\u0442\u0441\u044f \u043d\u043e\u043c\u0435\u0440\u0430 \u0442\u0440\u0435\u0445 \u0442\u0438\u043f\u043e\u0432: \u043e\u0434\u043d\u043e\u043c\u0435\u0441\u0442\u043d\u044b\u0439, \u0434\u0432\u0443\u0445\u043c\u0435\u0441\u0442\u043d\u044b\u0439 \u0438 \u0442\u0440\u0435\u0445\u043c\u0435\u0441\u0442\u043d\u044b\u0439, \u043e\u0442\u043b\u0438\u0447\u0430\u044e\u0449\u0438\u0435\u0441\u044f \u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c\u044e \u043f\u0440\u043e\u0436\u0438\u0432\u0430\u043d\u0438\u044f \u0432 \u0441\u0443\u0442\u043a\u0438. \u0412 \u043a\u0430\u0436\u0434\u043e\u043c \u043d\u043e\u043c\u0435\u0440\u0435 \u0435\u0441\u0442\u044c \u0442\u0435\u043b\u0435\u0444\u043e\u043d. \u2003\u041e \u043a\u0430\u0436\u0434\u043e\u043c \u043f\u0440\u043e\u0436\u0438\u0432\u0430\u044e\u0449\u0435\u043c \u0434\u043e\u043b\u0436\u043d\u0430 \u0445\u0440\u0430\u043d\u0438\u0442\u044c\u0441\u044f \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0430\u044f \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f: \u043d\u043e\u043c\u0435\u0440 \u043f\u0430\u0441\u043f\u043e\u0440\u0442\u0430, \u0444\u0430\u043c\u0438\u043b\u0438\u044f, \u0438\u043c\u044f, \u043e\u0442\u0447\u0435\u0441\u0442\u0432\u043e, \u0433\u043e\u0440\u043e\u0434, \u0438\u0437 \u043a\u043e\u0442\u043e\u0440\u043e\u0433\u043e \u043e\u043d \u043f\u0440\u0438\u0431\u044b\u043b, \u0434\u0430\u0442\u0430 \u043f\u043e\u0441\u0435\u043b\u0435\u043d\u0438\u044f \u0432 \u0433\u043e\u0441\u0442\u0438\u043d\u0438\u0446\u0435, \u0432\u044b\u0434\u0435\u043b\u0435\u043d\u043d\u044b\u0439 \u0433\u043e\u0441\u0442\u0438\u043d\u0438\u0447\u043d\u044b\u0439 \u043d\u043e\u043c\u0435\u0440. \u2003\u041e \u0441\u043b\u0443\u0436\u0430\u0449\u0438\u0445 \u0433\u043e\u0441\u0442\u0438\u043d\u0438\u0446\u044b \u0434\u043e\u043b\u0436\u043d\u0430 \u0431\u044b\u0442\u044c \u0438\u0437\u0432\u0435\u0441\u0442\u043d\u0430 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u0433\u043e \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u043d\u0438\u044f: \u0444\u0430\u043c\u0438\u043b\u0438\u044f, \u0438\u043c\u044f, \u043e\u0442\u0447\u0435\u0441\u0442\u0432\u043e, \u0433\u0434\u0435 (\u044d\u0442\u0430\u0436) \u0438 \u043a\u043e\u0433\u0434\u0430 (\u0434\u0435\u043d\u044c \u043d\u0435\u0434\u0435\u043b\u0438) \u043e\u043d \u0443\u0431\u0438\u0440\u0430\u0435\u0442. \u0421\u043b\u0443\u0436\u0430\u0449\u0438\u0439 \u0433\u043e\u0441\u0442\u0438\u043d\u0438\u0446\u044b \u0443\u0431\u0438\u0440\u0430\u0435\u0442 \u0432\u0441\u0435 \u043d\u043e\u043c\u0435\u0440\u0430 \u043d\u0430 \u043e\u0434\u043d\u043e\u043c \u044d\u0442\u0430\u0436\u0435 \u0432 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u044b\u0435 \u0434\u043d\u0438 \u043d\u0435\u0434\u0435\u043b\u0438, \u043f\u0440\u0438 \u044d\u0442\u043e\u043c \u0432 \u0440\u0430\u0437\u043d\u044b\u0435 \u0434\u043d\u0438 \u043e\u043d \u043c\u043e\u0436\u0435\u0442 \u0443\u0431\u0438\u0440\u0430\u0442\u044c \u0440\u0430\u0437\u043d\u044b\u0435 \u044d\u0442\u0430\u0436\u0438. \u2003\u0420\u0430\u0431\u043e\u0442\u0430 \u0441 \u0441\u0438\u0441\u0442\u0435\u043c\u043e\u0439 \u043f\u0440\u0435\u0434\u043f\u043e\u043b\u0430\u0433\u0430\u0435\u0442 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u0439 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438: \u043e \u043a\u043b\u0438\u0435\u043d\u0442\u0430\u0445, \u043f\u0440\u043e\u0436\u0438\u0432\u0430\u0432\u0448\u0438\u0445 \u0432 \u0437\u0430\u0434\u0430\u043d\u043d\u043e\u043c \u043d\u043e\u043c\u0435\u0440\u0435, \u0432 \u0437\u0430\u0434\u0430\u043d\u043d\u044b\u0439 \u043f\u0435\u0440\u0438\u043e\u0434 \u0432\u0440\u0435\u043c\u0435\u043d\u0438; \u043e \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0435 \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432, \u043f\u0440\u0438\u0431\u044b\u0432\u0448\u0438\u0445 \u0438\u0437 \u0437\u0430\u0434\u0430\u043d\u043d\u043e\u0433\u043e \u0433\u043e\u0440\u043e\u0434\u0430, \u043e \u0442\u043e\u043c, \u043a\u0442\u043e \u0438\u0437 \u0441\u043b\u0443\u0436\u0430\u0449\u0438\u0445 \u0443\u0431\u0438\u0440\u0430\u043b \u043d\u043e\u043c\u0435\u0440 \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u043e\u0433\u043e \u043a\u043b\u0438\u0435\u043d\u0442\u0430 \u0432 \u0437\u0430\u0434\u0430\u043d\u043d\u044b\u0439 \u0434\u0435\u043d\u044c \u043d\u0435\u0434\u0435\u043b\u0438, \u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0432 \u0433\u043e\u0441\u0442\u0438\u043d\u0438\u0446\u0435 \u0441\u0432\u043e\u0431\u043e\u0434\u043d\u044b\u0445 \u043d\u043e\u043c\u0435\u0440\u043e\u0432; \u0441\u043f\u0438\u0441\u043e\u043a \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432 \u0441 \u0443\u043a\u0430\u0437\u0430\u043d\u0438\u0435\u043c \u043c\u0435\u0441\u0442\u0430 \u0436\u0438\u0442\u0435\u043b\u044c\u0441\u0442\u0432\u0430, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043f\u0440\u043e\u0436\u0438\u0432\u0430\u043b\u0438 \u0432 \u0442\u0435 \u0436\u0435 \u0434\u043d\u0438, \u0447\u0442\u043e \u0438 \u0437\u0430\u0434\u0430\u043d\u043d\u044b\u0439 \u043a\u043b\u0438\u0435\u043d\u0442, \u0432 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u044b\u0439 \u043f\u0435\u0440\u0438\u043e\u0434 \u0432\u0440\u0435\u043c\u0435\u043d\u0438. \u2003\u0410\u0434\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0430\u0442\u043e\u0440 \u0434\u043e\u043b\u0436\u0435\u043d \u0438\u043c\u0435\u0442\u044c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438: \u043f\u0440\u0438\u043d\u044f\u0442\u044c \u043d\u0430 \u0440\u0430\u0431\u043e\u0442\u0443 \u0438\u043b\u0438 \u0443\u0432\u043e\u043b\u0438\u0442\u044c \u0441\u043b\u0443\u0436\u0430\u0449\u0435\u0433\u043e \u0433\u043e\u0441\u0442\u0438\u043d\u0438\u0446\u044b; \u0438\u0437\u043c\u0435\u043d\u0438\u0442\u044c \u0440\u0430\u0441\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0440\u0430\u0431\u043e\u0442\u044b \u0441\u043b\u0443\u0436\u0430\u0449\u0435\u0433\u043e; \u043f\u043e\u0441\u0435\u043b\u0438\u0442\u044c \u0438\u043b\u0438 \u0432\u044b\u0441\u0435\u043b\u0438\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442\u0430. \u2003\u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043f\u0440\u0435\u0434\u0443\u0441\u043c\u043e\u0442\u0440\u0435\u0442\u044c \u0442\u0430\u043a\u0436\u0435 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u0432\u044b\u0434\u0430\u0447\u0438 \u043e\u0442\u0447\u0435\u0442\u0430 \u043e \u0440\u0430\u0431\u043e\u0442\u0435 \u0433\u043e\u0441\u0442\u0438\u043d\u0438\u0446\u044b \u0437\u0430 \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u0439 \u043a\u0432\u0430\u0440\u0442\u0430\u043b \u0442\u0435\u043a\u0443\u0449\u0435\u0433\u043e \u0433\u043e\u0434\u0430. \u0422\u0430\u043a\u043e\u0439 \u043e\u0442\u0447\u0435\u0442 \u0434\u043e\u043b\u0436\u0435\u043d \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0442\u044c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u0441\u0432\u0435\u0434\u0435\u043d\u0438\u044f: \u0447\u0438\u0441\u043b\u043e \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432 \u0437\u0430 \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u0439 \u043f\u0435\u0440\u0438\u043e\u0434 \u0432 \u043a\u0430\u0436\u0434\u043e\u043c \u043d\u043e\u043c\u0435\u0440\u0435; \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043d\u043e\u043c\u0435\u0440\u043e\u0432 \u043d\u0435 \u043a\u0430\u0436\u0434\u043e\u043c \u044d\u0442\u0430\u0436\u0435; \u043e\u0431\u0449\u0430\u044f \u0441\u0443\u043c\u043c\u0430 \u0434\u043e\u0445\u043e\u0434\u0430 \u0437\u0430 \u043a\u0430\u0436\u0434\u044b\u0439 \u043d\u043e\u043c\u0435\u0440; \u0441\u0443\u043c\u043c\u0430\u0440\u043d\u044b\u0439 \u0434\u043e\u0445\u043e\u0434 \u043f\u043e \u0432\u0441\u0435\u0439 \u0433\u043e\u0441\u0442\u0438\u043d\u0438\u0446\u0435. \u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 5 \u0417\u0430\u0434\u0430\u043d\u0438\u0435 \u0412\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u043f\u0440\u0430\u043a\u0442\u0438\u043a\u0438 1.1-1.3. \u0418\u0445 \u043c\u043e\u0436\u043d\u043e \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043d\u0430 \u043f\u0440\u0438\u043c\u0435\u0440\u0435, \u043f\u0440\u0438\u0432\u0435\u0434\u0435\u043d\u043d\u043e\u043c \u0432 \u0442\u0435\u043a\u0441\u0442\u0430\u0445 \u043f\u0440\u0430\u043a\u0442\u0438\u043a \u0438\u043b\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f \u0432\u044b\u0431\u0440\u0430\u043d\u043d\u0443\u044e \u0442\u0435\u043c\u0443. \u041e\u0431\u0440\u0430\u0442\u0438\u0442\u0435 \u0432\u043d\u0438\u043c\u0430\u043d\u0438\u044f \u043d\u0430 \u0437\u0430\u0434\u0430\u043d\u0438\u044f \u0432 \u043a\u043e\u043d\u0446\u0435 \u043f\u0440\u0430\u043a\u0442\u0438\u043a - \u043e\u043d\u0438 \u0434\u043e\u043b\u0436\u043d\u044b \u0432\u0445\u043e\u0434\u0438\u0442\u044c \u0432 \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044e \u041b\u0420. \u041f\u0440\u0430\u043a\u0442\u0438\u043a\u0438 \u043c\u043e\u0436\u043d\u043e \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u0438\u0442\u044c \u0432 \u043b\u044e\u0431\u043e\u043c \u0438\u0437 \u043d\u0438\u0436\u0435 \u043f\u0440\u0438\u0432\u0435\u0434\u0435\u043d\u043d\u044b\u0445 \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u043e\u0432: \u041a\u0430\u0436\u0434\u0430\u044f \u043f\u0440\u0430\u043a\u0442\u0438\u043a\u0430 - \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u0430\u044f \u043f\u0430\u043f\u043a\u0430 \u0432 \u0440\u0435\u043f\u043e\u0437\u0438\u0442\u043e\u0440\u0438\u0438. \u041a\u0430\u0436\u0434\u0430\u044f \u043f\u0440\u0430\u043a\u0442\u0438\u043a\u0430 - \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u0430\u044f \u0432\u0435\u0442\u043a\u0430 \u0432 \u0440\u0435\u043f\u043e\u0437\u0438\u0442\u043e\u0440\u0438\u0438. \u041a\u0430\u0436\u0434\u0430\u044f \u043f\u0440\u0430\u043a\u0442\u0438\u043a\u0430 - \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u0439 \u043a\u043e\u043c\u043c\u0438\u0442 \u0432 \u0440\u0435\u043f\u043e\u0437\u0438\u0442\u043e\u0440\u0438\u0438. \u0417\u0430\u0434\u0430\u043d\u0438\u0435 \u043d\u0430 9 \u0411\u0430\u043b\u043b\u043e\u0432: \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0430\u043d\u0438\u0438 \u0432\u044b\u0431\u0440\u0430\u043d\u043d\u043e\u0439 \u043c\u043e\u0434\u0435\u043b\u0438 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0438\u043d\u0441\u0442\u0440\u0443\u043a\u0446\u0438\u0439 \u0438\u0437 \u043f\u0440\u0430\u043a\u0442\u0438\u043a \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u043e\u0435 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u043d\u0430 FastAPI. \u041e\u043d\u043e \u0434\u043e\u043b\u0436\u043d\u043e \u0432\u043a\u043b\u044e\u0447\u0430\u0442\u044c \u0432 \u0441\u0435\u0431\u044f: \u0422\u0430\u0431\u043b\u0438\u0446\u044b, \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e ORM SQLAlchemy \u0438\u043b\u0438 SQLModel \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u0411\u0414 PostgreSQL. API, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0435\u0435 CRUD-\u044b. \u0422\u0430\u043c \u0433\u0434\u0435 \u044d\u0442\u043e \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e, \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c GET-\u0437\u0430\u043f\u0440\u043e\u0441\u044b \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u044e\u0449\u0438\u0435 \u043c\u043e\u0434\u0435\u043b\u0438 \u0441 \u0432\u043b\u043e\u0436\u0435\u043d\u043d\u044b\u043c\u0438 \u043e\u0431\u044a\u0435\u043a\u0442\u0430\u043c\u0438 (\u0441\u0432\u044f\u0437\u0438 many-to-many \u0438 one-to-many). \u041d\u0430\u0441\u0442\u0440\u043e\u0435\u043d\u043d\u0443\u044e \u0441\u0438\u0441\u0442\u0435\u043c\u0443 \u043c\u0438\u0433\u0440\u0430\u0446\u0438\u0439 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 Alembic. \u0410\u043d\u043d\u043e\u0442\u0430\u0446\u0438\u044e \u0442\u0438\u043f\u043e\u0432 \u0432 \u043f\u0435\u0440\u0435\u0434\u0430\u0432\u0430\u0435\u043c\u044b\u0445 \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u043c\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f\u0445 \u0432 API-\u043c\u0435\u0442\u043e\u0434\u0430\u0445. \u041e\u0444\u043e\u0440\u043c\u043b\u0435\u043d\u043d\u0443\u044e \u0444\u0430\u0439\u043b\u043e\u0432\u0443\u044e \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0443 \u043f\u0440\u043e\u0435\u043a\u0442\u0430 \u0441 \u0440\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u0438\u0435\u043c \u043a\u043e\u0434\u0430, \u043e\u0442\u0432\u0435\u0447\u0430\u044e\u0449\u0435\u0433\u043e \u0437\u0430 \u0440\u0430\u0437\u043d\u0443\u044e \u0431\u0438\u0437\u043d\u0435\u0441-\u043b\u043e\u0433\u0438\u043a\u0443 \u0438 \u043f\u0440\u0435\u0434\u043c\u0435\u0442\u043d\u0443\u044e \u043e\u0431\u043b\u0430\u0441\u0442\u044c, \u043d\u0430 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u0435 \u0444\u0430\u0439\u043b\u044b \u0438 \u043f\u0430\u043f\u043a\u0438. (\u043e\u043f\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u043e) \u041a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0438 \u043a \u0441\u043b\u043e\u0436\u043d\u044b\u043c \u0447\u0430\u0441\u0442\u044f\u043c \u043a\u043e\u0434\u0430. \u0417\u0430\u0434\u0430\u043d\u0438\u0435 \u043d\u0430 15 \u0411\u0430\u043b\u043b\u043e\u0432 (\u043c\u043e\u0436\u043d\u043e \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u044b\u0432\u0430\u0442\u044c \u0441\u0440\u0430\u0437\u0443): \u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0432 \u0440\u0430\u0437\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u043c\u043e\u043c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0438. \u0424\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b \u0432\u043a\u043b\u044e\u0447\u0430\u0435\u0442 \u0432 \u0441\u0435\u0431\u044f: \u0410\u0432\u0442\u043e\u0440\u0438\u0437\u0430\u0446\u0438\u044e \u0438 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044e \u0413\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u044e JWT-\u0442\u043e\u043a\u0435\u043d\u043e\u0432 \u0410\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u044e \u043f\u043e JWT-\u0442\u043e\u043a\u0435\u043d\u0443 \u0425\u044d\u0448\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043f\u0430\u0440\u043e\u043b\u0435\u0439 \u0414\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u0410\u041f\u0418-\u043c\u0435\u0442\u043e\u0434\u044b \u0434\u043b\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435, \u0441\u043f\u0438\u0441\u043a\u0430 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439 \u0438 \u0441\u043c\u0435\u043d\u0435 \u043f\u0430\u0440\u043e\u043b\u044f \u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 6 \u0417\u0430\u0434\u0430\u043d\u0438\u0435: \u0417\u0430\u0434\u0430\u0447\u0430 1. \u0420\u0430\u0437\u043b\u0438\u0447\u0438\u044f \u043c\u0435\u0436\u0434\u0443 threading, multiprocessing \u0438 async \u0432 Python \u0417\u0430\u0434\u0430\u0447\u0430: \u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u0442\u0440\u0438 \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0445 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b \u043d\u0430 Python, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0449\u0438\u0435 \u043a\u0430\u0436\u0434\u044b\u0439 \u0438\u0437 \u043f\u043e\u0434\u0445\u043e\u0434\u043e\u0432: threading, multiprocessing \u0438 async. \u041a\u0430\u0436\u0434\u0430\u044f \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0440\u0435\u0448\u0430\u0442\u044c \u0441\u0447\u0438\u0442\u0430\u0442\u044c \u0441\u0443\u043c\u043c\u0443 \u0432\u0441\u0435\u0445 \u0447\u0438\u0441\u0435\u043b \u043e\u0442 1 \u0434\u043e 10000000000000. \u0420\u0430\u0437\u0434\u0435\u043b\u0438\u0442\u0435 \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044f \u043d\u0430 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u044b\u0445 \u0437\u0430\u0434\u0430\u0447 \u0434\u043b\u044f \u0443\u0441\u043a\u043e\u0440\u0435\u043d\u0438\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f. \u041f\u043e\u0434\u0440\u043e\u0431\u043d\u043e\u0441\u0442\u0438 \u0437\u0430\u0434\u0430\u043d\u0438\u044f: \u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0443 \u043d\u0430 Python \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u043f\u043e\u0434\u0445\u043e\u0434\u0430: threading, multiprocessing \u0438 async. \u041a\u0430\u0436\u0434\u0430\u044f \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0442\u044c \u0444\u0443\u043d\u043a\u0446\u0438\u044e calculate_sum(), \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0431\u0443\u0434\u0435\u0442 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0442\u044c \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044f. \u0414\u043b\u044f threading \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 \u043c\u043e\u0434\u0443\u043b\u044c threading, \u0434\u043b\u044f multiprocessing - \u043c\u043e\u0434\u0443\u043b\u044c multiprocessing, \u0430 \u0434\u043b\u044f async - \u043a\u043b\u044e\u0447\u0435\u0432\u044b\u0435 \u0441\u043b\u043e\u0432\u0430 async/await \u0438 \u043c\u043e\u0434\u0443\u043b\u044c asyncio. \u041a\u0430\u0436\u0434\u0430\u044f \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0440\u0430\u0437\u0431\u0438\u0442\u044c \u0437\u0430\u0434\u0430\u0447\u0443 \u043d\u0430 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043f\u043e\u0434\u0437\u0430\u0434\u0430\u0447 \u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0442\u044c \u0438\u0445 \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u043e. 5 \u0417\u0430\u043c\u0435\u0440\u044c\u0442\u0435 \u0432\u0440\u0435\u043c\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u043a\u0430\u0436\u0434\u043e\u0439 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b \u0438 \u0441\u0440\u0430\u0432\u043d\u0438\u0442\u0435 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b. \u0417\u0430\u0434\u0430\u0447\u0430 2. \u041f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u044b\u0439 \u043f\u0430\u0440\u0441\u0438\u043d\u0433 \u0432\u0435\u0431-\u0441\u0442\u0440\u0430\u043d\u0438\u0446 \u0441 \u0441\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435\u043c \u0432 \u0431\u0430\u0437\u0443 \u0434\u0430\u043d\u043d\u044b\u0445 \u0417\u0430\u0434\u0430\u0447\u0430: \u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0443 \u043d\u0430 Python \u0434\u043b\u044f \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u043e\u0433\u043e \u043f\u0430\u0440\u0441\u0438\u043d\u0433\u0430 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u0445 \u0432\u0435\u0431-\u0441\u0442\u0440\u0430\u043d\u0438\u0446 \u0441 \u0441\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435\u043c \u0434\u0430\u043d\u043d\u044b\u0445 \u0432 \u0431\u0430\u0437\u0443 \u0434\u0430\u043d\u043d\u044b\u0445 \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u043f\u043e\u0434\u0445\u043e\u0434\u043e\u0432 threading, multiprocessing \u0438 async. \u041a\u0430\u0436\u0434\u0430\u044f \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u043f\u0430\u0440\u0441\u0438\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u0441 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u0445 \u0432\u0435\u0431-\u0441\u0430\u0439\u0442\u043e\u0432, \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0442\u044c \u0438\u0445 \u0432 \u0431\u0430\u0437\u0443 \u0434\u0430\u043d\u043d\u044b\u0445. \u041f\u043e\u0434\u0440\u043e\u0431\u043d\u043e\u0441\u0442\u0438 \u0437\u0430\u0434\u0430\u043d\u0438\u044f: \u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u0442\u0440\u0438 \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0445 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b \u043d\u0430 Python, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0449\u0438\u0435 \u043a\u0430\u0436\u0434\u044b\u0439 \u0438\u0437 \u043f\u043e\u0434\u0445\u043e\u0434\u043e\u0432: threading, multiprocessing \u0438 async. \u041a\u0430\u0436\u0434\u0430\u044f \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0442\u044c \u0444\u0443\u043d\u043a\u0446\u0438\u044e parse_and_save(url), \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0431\u0443\u0434\u0435\u0442 \u0437\u0430\u0433\u0440\u0443\u0436\u0430\u0442\u044c HTML-\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0443 \u043f\u043e \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u043e\u043c\u0443 URL, \u043f\u0430\u0440\u0441\u0438\u0442\u044c \u0435\u0435, \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0442\u044c \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043e\u043a \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b \u0432 \u0431\u0430\u0437\u0443 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438 \u0432\u044b\u0432\u043e\u0434\u0438\u0442\u044c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043d\u0430 \u044d\u043a\u0440\u0430\u043d. \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 \u0431\u0430\u0437\u0443 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438\u0437 \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u044b \u043d\u043e\u043c\u0435\u0440 1 \u0434\u043b\u044f \u0437\u0430\u043f\u043e\u043b\u0435\u043d\u043d\u0438\u044f \u0435\u0435 \u0434\u0430\u043d\u043d\u044b\u043c\u0438. \u0415\u0441\u043b\u0438 \u0412\u044b \u043d\u0435 \u043f\u043e\u043d\u0438\u043c\u0430\u0435\u0442\u0435, \u043a\u0430\u043a\u0438\u0435 \u0442\u0430\u0431\u043b\u0438\u0446\u044b \u0438 \u043e\u0442\u043a\u0443\u0434\u0430 \u0412\u044b \u043c\u043e\u0433\u043b\u0438 \u0431\u044b \u0437\u0430\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043f\u0430\u0440\u0441\u0438\u043d\u0433\u0430, \u043d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u043f\u0440\u0435\u043f\u043e\u0434\u0430\u0432\u0430\u0442\u0435\u043b\u044e \u0432 \u043e\u0431\u0449\u0435\u043c \u0447\u0430\u0442\u0435 \u043f\u043e\u0442\u043e\u043a\u0430. \u0414\u043b\u044f threading \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 \u043c\u043e\u0434\u0443\u043b\u044c threading, \u0434\u043b\u044f multiprocessing - \u043c\u043e\u0434\u0443\u043b\u044c multiprocessing, \u0430 \u0434\u043b\u044f async - \u043a\u043b\u044e\u0447\u0435\u0432\u044b\u0435 \u0441\u043b\u043e\u0432\u0430 async/await \u0438 \u043c\u043e\u0434\u0443\u043b\u044c aiohttp \u0434\u043b\u044f \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0445 \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432. \u0421\u043e\u0437\u0434\u0430\u0439\u0442\u0435 \u0441\u043f\u0438\u0441\u043e\u043a \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u0445 URL-\u0430\u0434\u0440\u0435\u0441\u043e\u0432 \u0432\u0435\u0431-\u0441\u0442\u0440\u0430\u043d\u0438\u0446 \u0434\u043b\u044f \u043f\u0430\u0440\u0441\u0438\u043d\u0433\u0430 \u0438 \u0440\u0430\u0437\u0434\u0435\u043b\u0438\u0442\u0435 \u0435\u0433\u043e \u043d\u0430 \u0440\u0430\u0432\u043d\u044b\u0435 \u0447\u0430\u0441\u0442\u0438 \u0434\u043b\u044f \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u043e\u0433\u043e \u043f\u0430\u0440\u0441\u0438\u043d\u0433\u0430. \u0417\u0430\u043f\u0443\u0441\u0442\u0438\u0442\u0435 \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u044b\u0439 \u043f\u0430\u0440\u0441\u0438\u043d\u0433 \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0439 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b \u0438 \u0441\u043e\u0445\u0440\u0430\u043d\u0438\u0442\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0432 \u0431\u0430\u0437\u0443 \u0434\u0430\u043d\u043d\u044b\u0445. \u0417\u0430\u043c\u0435\u0440\u044c\u0442\u0435 \u0432\u0440\u0435\u043c\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u043a\u0430\u0436\u0434\u043e\u0439 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b \u0438 \u0441\u0440\u0430\u0432\u043d\u0438\u0442\u0435 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b. \u0414\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u0442\u0440\u0435\u0431\u043e\u0432\u0430\u043d\u0438\u044f: \u0421\u0434\u0435\u043b\u0430\u0439\u0442\u0435 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044e, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0443\u044e \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u043a\u0430\u0436\u0434\u043e\u0439 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u044b\u0435 \u043f\u043e\u0434\u0445\u043e\u0434\u044b \u0438 \u0438\u0445 \u043e\u0441\u043e\u0431\u0435\u043d\u043d\u043e\u0441\u0442\u0438. \u0412\u043a\u043b\u044e\u0447\u0438\u0442\u0435 \u0432 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044e \u0442\u0430\u0431\u043b\u0438\u0446\u044b, \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0430\u044e\u0449\u0438\u0435 \u0432\u0440\u0435\u043c\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u043a\u0430\u0436\u0434\u043e\u0439 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b. \u041f\u0440\u043e\u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0438\u0440\u0443\u0439\u0442\u0435 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b \u0441\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u044f \u0432\u0440\u0435\u043c\u0435\u043d\u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 \u0440\u0430\u0437\u043d\u044b\u0445 \u043f\u043e\u0434\u0445\u043e\u0434\u043e\u0432. \u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 7 \u0417\u0430\u0434\u0430\u043d\u0438\u0435 1) \u0423\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u044c Celery \u0438 Redis: \u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 \u0434\u043b\u044f Celery \u0438 Redis \u0432 \u043f\u0440\u043e\u0435\u043a\u0442. Celery \u0431\u0443\u0434\u0435\u0442 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u0434\u043b\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u0437\u0430\u0434\u0430\u0447 \u0432 \u0444\u043e\u043d\u0435, \u0430 Redis \u0431\u0443\u0434\u0435\u0442 \u0432\u044b\u0441\u0442\u0443\u043f\u0430\u0442\u044c \u0432 \u0440\u043e\u043b\u0438 \u0431\u0440\u043e\u043a\u0435\u0440\u0430 \u0437\u0430\u0434\u0430\u0447 \u0438 \u0445\u0440\u0430\u043d\u0438\u043b\u0438\u0449\u0430 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u0432. \u0417\u0430\u0447\u0435\u043c: Celery \u0438 Redis \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u044e\u0442 \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0444\u043e\u043d\u043e\u0432\u0443\u044e \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0443 \u0437\u0430\u0434\u0430\u0447, \u0447\u0442\u043e \u043f\u043e\u043b\u0435\u0437\u043d\u043e \u0434\u043b\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0434\u043b\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0445 \u0438\u043b\u0438 \u0440\u0435\u0441\u0443\u0440\u0441\u043e\u0435\u043c\u043a\u0438\u0445 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0439 \u0431\u0435\u0437 \u0431\u043b\u043e\u043a\u0438\u0440\u043e\u0432\u043a\u0438 \u043e\u0441\u043d\u043e\u0432\u043d\u043e\u0433\u043e \u043f\u043e\u0442\u043e\u043a\u0430 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f. 2) \u041d\u0430\u0441\u0442\u0440\u043e\u0438\u0442\u044c Celery: \u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0441\u043e\u0437\u0434\u0430\u0442\u044c \u0444\u0430\u0439\u043b \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u0438 \u0434\u043b\u044f Celery. \u041e\u043f\u0440\u0435\u0434\u0435\u043b\u0442\u044c \u0437\u0430\u0434\u0430\u0447\u0443 \u0434\u043b\u044f \u043f\u0430\u0440\u0441\u0438\u043d\u0433\u0430 URL, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0431\u0443\u0434\u0435\u0442 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0442\u044c\u0441\u044f \u0432 \u0444\u043e\u043d\u043e\u0432\u043e\u043c \u0440\u0435\u0436\u0438\u043c\u0435. \u0417\u0430\u0447\u0435\u043c: \u041d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430 Celery \u043f\u043e\u0437\u0432\u043e\u043b\u0438\u0442 \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0442\u044c \u0437\u0430\u0434\u0430\u0447\u0438, \u0447\u0442\u043e \u0443\u043b\u0443\u0447\u0448\u0438\u0442 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u0438 \u043e\u0442\u0437\u044b\u0432\u0447\u0438\u0432\u043e\u0441\u0442\u044c \u0432\u0430\u0448\u0435\u0433\u043e \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. 3) \u041e\u0431\u043d\u043e\u0432\u0438\u0442\u044c Docker Compose \u0444\u0430\u0439\u043b: \u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u0441\u0435\u0440\u0432\u0438\u0441\u044b \u0434\u043b\u044f Redis \u0438 Celery worker \u0432 docker-compose.yml. \u041e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u0442\u0435 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 \u043c\u0435\u0436\u0434\u0443 \u0441\u0435\u0440\u0432\u0438\u0441\u0430\u043c\u0438, \u0447\u0442\u043e\u0431\u044b \u043e\u0431\u0435\u0441\u043f\u0435\u0447\u0438\u0442\u044c \u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u0443\u044e \u0440\u0430\u0431\u043e\u0442\u0443 \u043e\u0440\u043a\u0435\u0441\u0442\u0440\u0430. \u0417\u0430\u0447\u0435\u043c: \u042d\u0442\u043e \u043f\u043e\u0437\u0432\u043e\u043b\u0438\u0442 \u0432\u0430\u043c \u043b\u0435\u0433\u043a\u043e \u0443\u043f\u0440\u0430\u0432\u043b\u044f\u0442\u044c \u0432\u0441\u0435\u043c\u0438 \u0441\u0435\u0440\u0432\u0438\u0441\u0430\u043c\u0438 \u0432\u0430\u0448\u0435\u0433\u043e \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f, \u0432\u043a\u043b\u044e\u0447\u0430\u044f \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u0443\u044e \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0443 \u0437\u0430\u0434\u0430\u0447, \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043e\u0434\u043d\u043e\u0433\u043e \u0444\u0430\u0439\u043b\u0430 \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u0438. 4) \u042d\u043d\u0434\u043f\u043e\u0438\u043d\u0442 \u0434\u043b\u044f \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0433\u043e \u0432\u044b\u0437\u043e\u0432\u0430 \u043f\u0430\u0440\u0441\u0435\u0440\u0430: \u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u0432 FastAPI \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u043c\u0430\u0440\u0448\u0440\u0443\u0442 \u0434\u043b\u044f \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0433\u043e \u0432\u044b\u0437\u043e\u0432\u0430 \u043f\u0430\u0440\u0441\u0435\u0440\u0430. \u041c\u0430\u0440\u0448\u0440\u0443\u0442 \u0434\u043e\u043b\u0436\u0435\u043d \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0442\u044c \u0437\u0430\u043f\u0440\u043e\u0441\u044b \u0441 URL \u0434\u043b\u044f \u043f\u0430\u0440\u0441\u0438\u043d\u0433\u0430, \u0441\u0442\u0430\u0432\u0438\u0442\u044c \u0437\u0430\u0434\u0430\u0447\u0443 \u0432 \u043e\u0447\u0435\u0440\u0435\u0434\u044c \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e Celery \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0442\u044c \u043e\u0442\u0432\u0435\u0442 \u043e \u043d\u0430\u0447\u0430\u043b\u0435 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0437\u0430\u0434\u0430\u0447\u0438. \u0417\u0430\u0447\u0435\u043c: \u042d\u0442\u043e \u043f\u043e\u0437\u0432\u043e\u043b\u0438\u0442 \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u0442\u044c \u043f\u0430\u0440\u0441\u0438\u043d\u0433 \u0432\u0435\u0431-\u0441\u0442\u0440\u0430\u043d\u0438\u0446 \u0432 \u0444\u043e\u043d\u0435, \u0447\u0442\u043e \u0443\u043b\u0443\u0447\u0448\u0438\u0442 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u043e\u043f\u044b\u0442 \u0432\u0430\u0448\u0435\u0433\u043e \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f.","title":"\u0413\u043b\u0430\u0432\u043d\u0430\u044f"},{"location":"#web-","text":"","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u044b\u0435 \u0440\u0430\u0431\u043e\u0442\u044b \u043f\u043e \u043f\u0440\u0435\u0434\u043c\u0435\u0442\u0443:  Web-\u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435"},{"location":"#1","text":"1) \u0421\u0434\u0435\u043b\u0430\u043d\u044b \u0431\u0430\u0437\u043e\u0432\u044b\u0435 UDP \u0438 TCP \u043a\u043b\u0438\u0435\u043d\u0442-\u0441\u0435\u0440\u0432\u0435\u0440\u043d\u044b\u0435 \u0432\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f 2) \u0421\u0434\u0435\u043b\u0430\u043d \u0431\u0430\u0437\u043e\u0432\u044b\u0439 Web-\u0441\u0435\u0440\u0432\u0435\u0440 3) \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d \u043c\u043d\u043e\u0433\u043e\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u0447\u0430\u0442 \u0447\u0435\u0440\u0435\u0437 TCP \u043f\u0440\u043e\u0442\u043e\u043a\u043e\u043b 4) \u041d\u0430\u043f\u0438\u0441\u0430\u043d Web-\u0441\u0435\u0440\u0432\u0435\u0440 \u0434\u043b\u044f \u0432\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f \u0441\u043e \u0448\u043a\u043e\u043b\u044c\u043d\u044b\u043c\u0438 \u043e\u0446\u0435\u043d\u043a\u0430\u043c\u0438","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 1"},{"location":"#2","text":"","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 2"},{"location":"#_1","text":"\u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0443\u0447\u0438\u0442\u044b\u0432\u0430\u0442\u044c \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u043e\u0442\u0435\u043b\u044f, \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0430 \u043e\u0442\u0435\u043b\u044f, \u0430\u0434\u0440\u0435\u0441, \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435, \u0442\u0438\u043f\u044b \u043d\u043e\u043c\u0435\u0440\u043e\u0432, \u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c, \u0432\u043c\u0435\u0441\u0442\u0438\u043c\u043e\u0441\u0442\u044c, \u0443\u0434\u043e\u0431\u0441\u0442\u0432\u0430. \u2003\u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0439 \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b: \u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u043d\u043e\u0432\u044b\u0445 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439. \u041f\u0440\u043e\u0441\u043c\u043e\u0442\u0440 \u0438 \u0440\u0435\u0437\u0435\u0440\u0432\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043d\u043e\u043c\u0435\u0440\u043e\u0432. \u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u0434\u043e\u043b\u0436\u0435\u043d \u0438\u043c\u0435\u0442\u044c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0440\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0438 \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u044f \u0441\u0432\u043e\u0438\u0445 \u0440\u0435\u0437\u0435\u0440\u0432\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0439. \u041d\u0430\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u043e\u0442\u0437\u044b\u0432\u043e\u0432 \u043a \u043d\u043e\u043c\u0435\u0440\u0430\u043c. \u041f\u0440\u0438 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0438 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0435\u0432, \u0434\u043e\u043b\u0436\u043d\u044b \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0442\u044c\u0441\u044f \u043f\u0435\u0440\u0438\u043e\u0434 \u043f\u0440\u043e\u0436\u0438\u0432\u0430\u043d\u0438\u044f, \u0442\u0435\u043a\u0441\u0442 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u044f, \u0440\u0435\u0439\u0442\u0438\u043d\u0433 (1-10), \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0442\u043e\u0440\u0435. \u0410\u0434\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0430\u0442\u043e\u0440 \u0434\u043e\u043b\u0436\u0435\u043d \u0438\u043c\u0435\u0442\u044c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0437\u0430\u0441\u0435\u043b\u0438\u0442\u044c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0432 \u043e\u0442\u0435\u043b\u044c \u0438 \u0432\u044b\u0441\u0435\u043b\u0438\u0442\u044c \u0438\u0437 \u043e\u0442\u0435\u043b\u044f \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 Django-admin. \u0412 \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u043e\u0439 \u0447\u0430\u0441\u0442\u0438 \u0434\u043e\u043b\u0436\u043d\u0430 \u0444\u043e\u0440\u043c\u0438\u0440\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u0442\u0430\u0431\u043b\u0438\u0446\u0430, \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0430\u044e\u0449\u0430\u044f \u043f\u043e\u0441\u0442\u043e\u044f\u043b\u044c\u0446\u0435\u0432 \u043e\u0442\u0435\u043b\u044f \u0437\u0430 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0439 \u043c\u0435\u0441\u044f\u0446.","title":"\u0421\u043f\u0438\u0441\u043e\u043a \u043e\u0442\u0435\u043b\u0435\u0439"},{"location":"#3-4","text":"","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 3 \u0438 4"},{"location":"#_2","text":"\u0421\u043e\u0437\u0434\u0430\u0442\u044c \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u043d\u0443\u044e \u0441\u0438\u0441\u0442\u0435\u043c\u0443, \u043f\u0440\u0435\u0434\u043d\u0430\u0437\u043d\u0430\u0447\u0435\u043d\u043d\u0443\u044e \u0434\u043b\u044f \u0430\u0434\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0430\u0442\u043e\u0440\u0430 \u0433\u043e\u0441\u0442\u0438\u043d\u0438\u0446\u044b. \u2003\u0422\u0430\u043a\u0430\u044f \u0441\u0438\u0441\u0442\u0435\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u043e\u0431\u0435\u0441\u043f\u0435\u0447\u0438\u0432\u0430\u0442\u044c \u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u0441\u0432\u0435\u0434\u0435\u043d\u0438\u0439 \u043e\u0431 \u0438\u043c\u0435\u044e\u0449\u0438\u0445\u0441\u044f \u0432 \u0433\u043e\u0441\u0442\u0438\u043d\u0438\u0446\u0435 \u043d\u043e\u043c\u0435\u0440\u0430\u0445, \u043e \u043f\u0440\u043e\u0436\u0438\u0432\u0430\u044e\u0449\u0438\u0445 \u0432 \u0433\u043e\u0441\u0442\u0438\u043d\u0438\u0446\u0435 \u043a\u043b\u0438\u0435\u043d\u0442\u0430\u0445 \u0438 \u043e \u0441\u043b\u0443\u0436\u0430\u0449\u0438\u0445, \u0443\u0431\u0438\u0440\u0430\u044e\u0449\u0438\u0445\u0441\u044f \u0432 \u043d\u043e\u043c\u0435\u0440\u0430\u0445. \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043d\u043e\u043c\u0435\u0440\u043e\u0432 \u0432 \u0433\u043e\u0441\u0442\u0438\u043d\u0438\u0446\u0435 \u0438\u0437\u0432\u0435\u0441\u0442\u043d\u043e, \u0438 \u0438\u043c\u0435\u044e\u0442\u0441\u044f \u043d\u043e\u043c\u0435\u0440\u0430 \u0442\u0440\u0435\u0445 \u0442\u0438\u043f\u043e\u0432: \u043e\u0434\u043d\u043e\u043c\u0435\u0441\u0442\u043d\u044b\u0439, \u0434\u0432\u0443\u0445\u043c\u0435\u0441\u0442\u043d\u044b\u0439 \u0438 \u0442\u0440\u0435\u0445\u043c\u0435\u0441\u0442\u043d\u044b\u0439, \u043e\u0442\u043b\u0438\u0447\u0430\u044e\u0449\u0438\u0435\u0441\u044f \u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c\u044e \u043f\u0440\u043e\u0436\u0438\u0432\u0430\u043d\u0438\u044f \u0432 \u0441\u0443\u0442\u043a\u0438. \u0412 \u043a\u0430\u0436\u0434\u043e\u043c \u043d\u043e\u043c\u0435\u0440\u0435 \u0435\u0441\u0442\u044c \u0442\u0435\u043b\u0435\u0444\u043e\u043d. \u2003\u041e \u043a\u0430\u0436\u0434\u043e\u043c \u043f\u0440\u043e\u0436\u0438\u0432\u0430\u044e\u0449\u0435\u043c \u0434\u043e\u043b\u0436\u043d\u0430 \u0445\u0440\u0430\u043d\u0438\u0442\u044c\u0441\u044f \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0430\u044f \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f: \u043d\u043e\u043c\u0435\u0440 \u043f\u0430\u0441\u043f\u043e\u0440\u0442\u0430, \u0444\u0430\u043c\u0438\u043b\u0438\u044f, \u0438\u043c\u044f, \u043e\u0442\u0447\u0435\u0441\u0442\u0432\u043e, \u0433\u043e\u0440\u043e\u0434, \u0438\u0437 \u043a\u043e\u0442\u043e\u0440\u043e\u0433\u043e \u043e\u043d \u043f\u0440\u0438\u0431\u044b\u043b, \u0434\u0430\u0442\u0430 \u043f\u043e\u0441\u0435\u043b\u0435\u043d\u0438\u044f \u0432 \u0433\u043e\u0441\u0442\u0438\u043d\u0438\u0446\u0435, \u0432\u044b\u0434\u0435\u043b\u0435\u043d\u043d\u044b\u0439 \u0433\u043e\u0441\u0442\u0438\u043d\u0438\u0447\u043d\u044b\u0439 \u043d\u043e\u043c\u0435\u0440. \u2003\u041e \u0441\u043b\u0443\u0436\u0430\u0449\u0438\u0445 \u0433\u043e\u0441\u0442\u0438\u043d\u0438\u0446\u044b \u0434\u043e\u043b\u0436\u043d\u0430 \u0431\u044b\u0442\u044c \u0438\u0437\u0432\u0435\u0441\u0442\u043d\u0430 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u0433\u043e \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u043d\u0438\u044f: \u0444\u0430\u043c\u0438\u043b\u0438\u044f, \u0438\u043c\u044f, \u043e\u0442\u0447\u0435\u0441\u0442\u0432\u043e, \u0433\u0434\u0435 (\u044d\u0442\u0430\u0436) \u0438 \u043a\u043e\u0433\u0434\u0430 (\u0434\u0435\u043d\u044c \u043d\u0435\u0434\u0435\u043b\u0438) \u043e\u043d \u0443\u0431\u0438\u0440\u0430\u0435\u0442. \u0421\u043b\u0443\u0436\u0430\u0449\u0438\u0439 \u0433\u043e\u0441\u0442\u0438\u043d\u0438\u0446\u044b \u0443\u0431\u0438\u0440\u0430\u0435\u0442 \u0432\u0441\u0435 \u043d\u043e\u043c\u0435\u0440\u0430 \u043d\u0430 \u043e\u0434\u043d\u043e\u043c \u044d\u0442\u0430\u0436\u0435 \u0432 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u044b\u0435 \u0434\u043d\u0438 \u043d\u0435\u0434\u0435\u043b\u0438, \u043f\u0440\u0438 \u044d\u0442\u043e\u043c \u0432 \u0440\u0430\u0437\u043d\u044b\u0435 \u0434\u043d\u0438 \u043e\u043d \u043c\u043e\u0436\u0435\u0442 \u0443\u0431\u0438\u0440\u0430\u0442\u044c \u0440\u0430\u0437\u043d\u044b\u0435 \u044d\u0442\u0430\u0436\u0438. \u2003\u0420\u0430\u0431\u043e\u0442\u0430 \u0441 \u0441\u0438\u0441\u0442\u0435\u043c\u043e\u0439 \u043f\u0440\u0435\u0434\u043f\u043e\u043b\u0430\u0433\u0430\u0435\u0442 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u0439 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438: \u043e \u043a\u043b\u0438\u0435\u043d\u0442\u0430\u0445, \u043f\u0440\u043e\u0436\u0438\u0432\u0430\u0432\u0448\u0438\u0445 \u0432 \u0437\u0430\u0434\u0430\u043d\u043d\u043e\u043c \u043d\u043e\u043c\u0435\u0440\u0435, \u0432 \u0437\u0430\u0434\u0430\u043d\u043d\u044b\u0439 \u043f\u0435\u0440\u0438\u043e\u0434 \u0432\u0440\u0435\u043c\u0435\u043d\u0438; \u043e \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0435 \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432, \u043f\u0440\u0438\u0431\u044b\u0432\u0448\u0438\u0445 \u0438\u0437 \u0437\u0430\u0434\u0430\u043d\u043d\u043e\u0433\u043e \u0433\u043e\u0440\u043e\u0434\u0430, \u043e \u0442\u043e\u043c, \u043a\u0442\u043e \u0438\u0437 \u0441\u043b\u0443\u0436\u0430\u0449\u0438\u0445 \u0443\u0431\u0438\u0440\u0430\u043b \u043d\u043e\u043c\u0435\u0440 \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u043e\u0433\u043e \u043a\u043b\u0438\u0435\u043d\u0442\u0430 \u0432 \u0437\u0430\u0434\u0430\u043d\u043d\u044b\u0439 \u0434\u0435\u043d\u044c \u043d\u0435\u0434\u0435\u043b\u0438, \u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0432 \u0433\u043e\u0441\u0442\u0438\u043d\u0438\u0446\u0435 \u0441\u0432\u043e\u0431\u043e\u0434\u043d\u044b\u0445 \u043d\u043e\u043c\u0435\u0440\u043e\u0432; \u0441\u043f\u0438\u0441\u043e\u043a \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432 \u0441 \u0443\u043a\u0430\u0437\u0430\u043d\u0438\u0435\u043c \u043c\u0435\u0441\u0442\u0430 \u0436\u0438\u0442\u0435\u043b\u044c\u0441\u0442\u0432\u0430, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043f\u0440\u043e\u0436\u0438\u0432\u0430\u043b\u0438 \u0432 \u0442\u0435 \u0436\u0435 \u0434\u043d\u0438, \u0447\u0442\u043e \u0438 \u0437\u0430\u0434\u0430\u043d\u043d\u044b\u0439 \u043a\u043b\u0438\u0435\u043d\u0442, \u0432 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u044b\u0439 \u043f\u0435\u0440\u0438\u043e\u0434 \u0432\u0440\u0435\u043c\u0435\u043d\u0438. \u2003\u0410\u0434\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0430\u0442\u043e\u0440 \u0434\u043e\u043b\u0436\u0435\u043d \u0438\u043c\u0435\u0442\u044c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438: \u043f\u0440\u0438\u043d\u044f\u0442\u044c \u043d\u0430 \u0440\u0430\u0431\u043e\u0442\u0443 \u0438\u043b\u0438 \u0443\u0432\u043e\u043b\u0438\u0442\u044c \u0441\u043b\u0443\u0436\u0430\u0449\u0435\u0433\u043e \u0433\u043e\u0441\u0442\u0438\u043d\u0438\u0446\u044b; \u0438\u0437\u043c\u0435\u043d\u0438\u0442\u044c \u0440\u0430\u0441\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0440\u0430\u0431\u043e\u0442\u044b \u0441\u043b\u0443\u0436\u0430\u0449\u0435\u0433\u043e; \u043f\u043e\u0441\u0435\u043b\u0438\u0442\u044c \u0438\u043b\u0438 \u0432\u044b\u0441\u0435\u043b\u0438\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442\u0430. \u2003\u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043f\u0440\u0435\u0434\u0443\u0441\u043c\u043e\u0442\u0440\u0435\u0442\u044c \u0442\u0430\u043a\u0436\u0435 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u0432\u044b\u0434\u0430\u0447\u0438 \u043e\u0442\u0447\u0435\u0442\u0430 \u043e \u0440\u0430\u0431\u043e\u0442\u0435 \u0433\u043e\u0441\u0442\u0438\u043d\u0438\u0446\u044b \u0437\u0430 \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u0439 \u043a\u0432\u0430\u0440\u0442\u0430\u043b \u0442\u0435\u043a\u0443\u0449\u0435\u0433\u043e \u0433\u043e\u0434\u0430. \u0422\u0430\u043a\u043e\u0439 \u043e\u0442\u0447\u0435\u0442 \u0434\u043e\u043b\u0436\u0435\u043d \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0442\u044c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u0441\u0432\u0435\u0434\u0435\u043d\u0438\u044f: \u0447\u0438\u0441\u043b\u043e \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432 \u0437\u0430 \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u0439 \u043f\u0435\u0440\u0438\u043e\u0434 \u0432 \u043a\u0430\u0436\u0434\u043e\u043c \u043d\u043e\u043c\u0435\u0440\u0435; \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043d\u043e\u043c\u0435\u0440\u043e\u0432 \u043d\u0435 \u043a\u0430\u0436\u0434\u043e\u043c \u044d\u0442\u0430\u0436\u0435; \u043e\u0431\u0449\u0430\u044f \u0441\u0443\u043c\u043c\u0430 \u0434\u043e\u0445\u043e\u0434\u0430 \u0437\u0430 \u043a\u0430\u0436\u0434\u044b\u0439 \u043d\u043e\u043c\u0435\u0440; \u0441\u0443\u043c\u043c\u0430\u0440\u043d\u044b\u0439 \u0434\u043e\u0445\u043e\u0434 \u043f\u043e \u0432\u0441\u0435\u0439 \u0433\u043e\u0441\u0442\u0438\u043d\u0438\u0446\u0435.","title":"\u041e\u0442\u0435\u043b\u044c"},{"location":"#5","text":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 \u0412\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u043f\u0440\u0430\u043a\u0442\u0438\u043a\u0438 1.1-1.3. \u0418\u0445 \u043c\u043e\u0436\u043d\u043e \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043d\u0430 \u043f\u0440\u0438\u043c\u0435\u0440\u0435, \u043f\u0440\u0438\u0432\u0435\u0434\u0435\u043d\u043d\u043e\u043c \u0432 \u0442\u0435\u043a\u0441\u0442\u0430\u0445 \u043f\u0440\u0430\u043a\u0442\u0438\u043a \u0438\u043b\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f \u0432\u044b\u0431\u0440\u0430\u043d\u043d\u0443\u044e \u0442\u0435\u043c\u0443. \u041e\u0431\u0440\u0430\u0442\u0438\u0442\u0435 \u0432\u043d\u0438\u043c\u0430\u043d\u0438\u044f \u043d\u0430 \u0437\u0430\u0434\u0430\u043d\u0438\u044f \u0432 \u043a\u043e\u043d\u0446\u0435 \u043f\u0440\u0430\u043a\u0442\u0438\u043a - \u043e\u043d\u0438 \u0434\u043e\u043b\u0436\u043d\u044b \u0432\u0445\u043e\u0434\u0438\u0442\u044c \u0432 \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044e \u041b\u0420. \u041f\u0440\u0430\u043a\u0442\u0438\u043a\u0438 \u043c\u043e\u0436\u043d\u043e \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u0438\u0442\u044c \u0432 \u043b\u044e\u0431\u043e\u043c \u0438\u0437 \u043d\u0438\u0436\u0435 \u043f\u0440\u0438\u0432\u0435\u0434\u0435\u043d\u043d\u044b\u0445 \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u043e\u0432: \u041a\u0430\u0436\u0434\u0430\u044f \u043f\u0440\u0430\u043a\u0442\u0438\u043a\u0430 - \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u0430\u044f \u043f\u0430\u043f\u043a\u0430 \u0432 \u0440\u0435\u043f\u043e\u0437\u0438\u0442\u043e\u0440\u0438\u0438. \u041a\u0430\u0436\u0434\u0430\u044f \u043f\u0440\u0430\u043a\u0442\u0438\u043a\u0430 - \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u0430\u044f \u0432\u0435\u0442\u043a\u0430 \u0432 \u0440\u0435\u043f\u043e\u0437\u0438\u0442\u043e\u0440\u0438\u0438. \u041a\u0430\u0436\u0434\u0430\u044f \u043f\u0440\u0430\u043a\u0442\u0438\u043a\u0430 - \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u0439 \u043a\u043e\u043c\u043c\u0438\u0442 \u0432 \u0440\u0435\u043f\u043e\u0437\u0438\u0442\u043e\u0440\u0438\u0438. \u0417\u0430\u0434\u0430\u043d\u0438\u0435 \u043d\u0430 9 \u0411\u0430\u043b\u043b\u043e\u0432: \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0430\u043d\u0438\u0438 \u0432\u044b\u0431\u0440\u0430\u043d\u043d\u043e\u0439 \u043c\u043e\u0434\u0435\u043b\u0438 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0438\u043d\u0441\u0442\u0440\u0443\u043a\u0446\u0438\u0439 \u0438\u0437 \u043f\u0440\u0430\u043a\u0442\u0438\u043a \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u043e\u0435 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u043d\u0430 FastAPI. \u041e\u043d\u043e \u0434\u043e\u043b\u0436\u043d\u043e \u0432\u043a\u043b\u044e\u0447\u0430\u0442\u044c \u0432 \u0441\u0435\u0431\u044f: \u0422\u0430\u0431\u043b\u0438\u0446\u044b, \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e ORM SQLAlchemy \u0438\u043b\u0438 SQLModel \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u0411\u0414 PostgreSQL. API, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0435\u0435 CRUD-\u044b. \u0422\u0430\u043c \u0433\u0434\u0435 \u044d\u0442\u043e \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e, \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c GET-\u0437\u0430\u043f\u0440\u043e\u0441\u044b \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u044e\u0449\u0438\u0435 \u043c\u043e\u0434\u0435\u043b\u0438 \u0441 \u0432\u043b\u043e\u0436\u0435\u043d\u043d\u044b\u043c\u0438 \u043e\u0431\u044a\u0435\u043a\u0442\u0430\u043c\u0438 (\u0441\u0432\u044f\u0437\u0438 many-to-many \u0438 one-to-many). \u041d\u0430\u0441\u0442\u0440\u043e\u0435\u043d\u043d\u0443\u044e \u0441\u0438\u0441\u0442\u0435\u043c\u0443 \u043c\u0438\u0433\u0440\u0430\u0446\u0438\u0439 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 Alembic. \u0410\u043d\u043d\u043e\u0442\u0430\u0446\u0438\u044e \u0442\u0438\u043f\u043e\u0432 \u0432 \u043f\u0435\u0440\u0435\u0434\u0430\u0432\u0430\u0435\u043c\u044b\u0445 \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u043c\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f\u0445 \u0432 API-\u043c\u0435\u0442\u043e\u0434\u0430\u0445. \u041e\u0444\u043e\u0440\u043c\u043b\u0435\u043d\u043d\u0443\u044e \u0444\u0430\u0439\u043b\u043e\u0432\u0443\u044e \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0443 \u043f\u0440\u043e\u0435\u043a\u0442\u0430 \u0441 \u0440\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u0438\u0435\u043c \u043a\u043e\u0434\u0430, \u043e\u0442\u0432\u0435\u0447\u0430\u044e\u0449\u0435\u0433\u043e \u0437\u0430 \u0440\u0430\u0437\u043d\u0443\u044e \u0431\u0438\u0437\u043d\u0435\u0441-\u043b\u043e\u0433\u0438\u043a\u0443 \u0438 \u043f\u0440\u0435\u0434\u043c\u0435\u0442\u043d\u0443\u044e \u043e\u0431\u043b\u0430\u0441\u0442\u044c, \u043d\u0430 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u0435 \u0444\u0430\u0439\u043b\u044b \u0438 \u043f\u0430\u043f\u043a\u0438. (\u043e\u043f\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u043e) \u041a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0438 \u043a \u0441\u043b\u043e\u0436\u043d\u044b\u043c \u0447\u0430\u0441\u0442\u044f\u043c \u043a\u043e\u0434\u0430. \u0417\u0430\u0434\u0430\u043d\u0438\u0435 \u043d\u0430 15 \u0411\u0430\u043b\u043b\u043e\u0432 (\u043c\u043e\u0436\u043d\u043e \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u044b\u0432\u0430\u0442\u044c \u0441\u0440\u0430\u0437\u0443): \u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0432 \u0440\u0430\u0437\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u043c\u043e\u043c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0438. \u0424\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b \u0432\u043a\u043b\u044e\u0447\u0430\u0435\u0442 \u0432 \u0441\u0435\u0431\u044f: \u0410\u0432\u0442\u043e\u0440\u0438\u0437\u0430\u0446\u0438\u044e \u0438 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044e \u0413\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u044e JWT-\u0442\u043e\u043a\u0435\u043d\u043e\u0432 \u0410\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u044e \u043f\u043e JWT-\u0442\u043e\u043a\u0435\u043d\u0443 \u0425\u044d\u0448\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043f\u0430\u0440\u043e\u043b\u0435\u0439 \u0414\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u0410\u041f\u0418-\u043c\u0435\u0442\u043e\u0434\u044b \u0434\u043b\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435, \u0441\u043f\u0438\u0441\u043a\u0430 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439 \u0438 \u0441\u043c\u0435\u043d\u0435 \u043f\u0430\u0440\u043e\u043b\u044f","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 5"},{"location":"#6","text":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435: \u0417\u0430\u0434\u0430\u0447\u0430 1. \u0420\u0430\u0437\u043b\u0438\u0447\u0438\u044f \u043c\u0435\u0436\u0434\u0443 threading, multiprocessing \u0438 async \u0432 Python \u0417\u0430\u0434\u0430\u0447\u0430: \u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u0442\u0440\u0438 \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0445 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b \u043d\u0430 Python, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0449\u0438\u0435 \u043a\u0430\u0436\u0434\u044b\u0439 \u0438\u0437 \u043f\u043e\u0434\u0445\u043e\u0434\u043e\u0432: threading, multiprocessing \u0438 async. \u041a\u0430\u0436\u0434\u0430\u044f \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0440\u0435\u0448\u0430\u0442\u044c \u0441\u0447\u0438\u0442\u0430\u0442\u044c \u0441\u0443\u043c\u043c\u0443 \u0432\u0441\u0435\u0445 \u0447\u0438\u0441\u0435\u043b \u043e\u0442 1 \u0434\u043e 10000000000000. \u0420\u0430\u0437\u0434\u0435\u043b\u0438\u0442\u0435 \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044f \u043d\u0430 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u044b\u0445 \u0437\u0430\u0434\u0430\u0447 \u0434\u043b\u044f \u0443\u0441\u043a\u043e\u0440\u0435\u043d\u0438\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f. \u041f\u043e\u0434\u0440\u043e\u0431\u043d\u043e\u0441\u0442\u0438 \u0437\u0430\u0434\u0430\u043d\u0438\u044f: \u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0443 \u043d\u0430 Python \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u043f\u043e\u0434\u0445\u043e\u0434\u0430: threading, multiprocessing \u0438 async. \u041a\u0430\u0436\u0434\u0430\u044f \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0442\u044c \u0444\u0443\u043d\u043a\u0446\u0438\u044e calculate_sum(), \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0431\u0443\u0434\u0435\u0442 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0442\u044c \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044f. \u0414\u043b\u044f threading \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 \u043c\u043e\u0434\u0443\u043b\u044c threading, \u0434\u043b\u044f multiprocessing - \u043c\u043e\u0434\u0443\u043b\u044c multiprocessing, \u0430 \u0434\u043b\u044f async - \u043a\u043b\u044e\u0447\u0435\u0432\u044b\u0435 \u0441\u043b\u043e\u0432\u0430 async/await \u0438 \u043c\u043e\u0434\u0443\u043b\u044c asyncio. \u041a\u0430\u0436\u0434\u0430\u044f \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0440\u0430\u0437\u0431\u0438\u0442\u044c \u0437\u0430\u0434\u0430\u0447\u0443 \u043d\u0430 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043f\u043e\u0434\u0437\u0430\u0434\u0430\u0447 \u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0442\u044c \u0438\u0445 \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u043e. 5 \u0417\u0430\u043c\u0435\u0440\u044c\u0442\u0435 \u0432\u0440\u0435\u043c\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u043a\u0430\u0436\u0434\u043e\u0439 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b \u0438 \u0441\u0440\u0430\u0432\u043d\u0438\u0442\u0435 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b. \u0417\u0430\u0434\u0430\u0447\u0430 2. \u041f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u044b\u0439 \u043f\u0430\u0440\u0441\u0438\u043d\u0433 \u0432\u0435\u0431-\u0441\u0442\u0440\u0430\u043d\u0438\u0446 \u0441 \u0441\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435\u043c \u0432 \u0431\u0430\u0437\u0443 \u0434\u0430\u043d\u043d\u044b\u0445 \u0417\u0430\u0434\u0430\u0447\u0430: \u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0443 \u043d\u0430 Python \u0434\u043b\u044f \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u043e\u0433\u043e \u043f\u0430\u0440\u0441\u0438\u043d\u0433\u0430 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u0445 \u0432\u0435\u0431-\u0441\u0442\u0440\u0430\u043d\u0438\u0446 \u0441 \u0441\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435\u043c \u0434\u0430\u043d\u043d\u044b\u0445 \u0432 \u0431\u0430\u0437\u0443 \u0434\u0430\u043d\u043d\u044b\u0445 \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u043f\u043e\u0434\u0445\u043e\u0434\u043e\u0432 threading, multiprocessing \u0438 async. \u041a\u0430\u0436\u0434\u0430\u044f \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u043f\u0430\u0440\u0441\u0438\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u0441 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u0445 \u0432\u0435\u0431-\u0441\u0430\u0439\u0442\u043e\u0432, \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0442\u044c \u0438\u0445 \u0432 \u0431\u0430\u0437\u0443 \u0434\u0430\u043d\u043d\u044b\u0445. \u041f\u043e\u0434\u0440\u043e\u0431\u043d\u043e\u0441\u0442\u0438 \u0437\u0430\u0434\u0430\u043d\u0438\u044f: \u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u0442\u0440\u0438 \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0445 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b \u043d\u0430 Python, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0449\u0438\u0435 \u043a\u0430\u0436\u0434\u044b\u0439 \u0438\u0437 \u043f\u043e\u0434\u0445\u043e\u0434\u043e\u0432: threading, multiprocessing \u0438 async. \u041a\u0430\u0436\u0434\u0430\u044f \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0442\u044c \u0444\u0443\u043d\u043a\u0446\u0438\u044e parse_and_save(url), \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0431\u0443\u0434\u0435\u0442 \u0437\u0430\u0433\u0440\u0443\u0436\u0430\u0442\u044c HTML-\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0443 \u043f\u043e \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u043e\u043c\u0443 URL, \u043f\u0430\u0440\u0441\u0438\u0442\u044c \u0435\u0435, \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0442\u044c \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043e\u043a \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b \u0432 \u0431\u0430\u0437\u0443 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438 \u0432\u044b\u0432\u043e\u0434\u0438\u0442\u044c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043d\u0430 \u044d\u043a\u0440\u0430\u043d. \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 \u0431\u0430\u0437\u0443 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438\u0437 \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u044b \u043d\u043e\u043c\u0435\u0440 1 \u0434\u043b\u044f \u0437\u0430\u043f\u043e\u043b\u0435\u043d\u043d\u0438\u044f \u0435\u0435 \u0434\u0430\u043d\u043d\u044b\u043c\u0438. \u0415\u0441\u043b\u0438 \u0412\u044b \u043d\u0435 \u043f\u043e\u043d\u0438\u043c\u0430\u0435\u0442\u0435, \u043a\u0430\u043a\u0438\u0435 \u0442\u0430\u0431\u043b\u0438\u0446\u044b \u0438 \u043e\u0442\u043a\u0443\u0434\u0430 \u0412\u044b \u043c\u043e\u0433\u043b\u0438 \u0431\u044b \u0437\u0430\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043f\u0430\u0440\u0441\u0438\u043d\u0433\u0430, \u043d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u043f\u0440\u0435\u043f\u043e\u0434\u0430\u0432\u0430\u0442\u0435\u043b\u044e \u0432 \u043e\u0431\u0449\u0435\u043c \u0447\u0430\u0442\u0435 \u043f\u043e\u0442\u043e\u043a\u0430. \u0414\u043b\u044f threading \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 \u043c\u043e\u0434\u0443\u043b\u044c threading, \u0434\u043b\u044f multiprocessing - \u043c\u043e\u0434\u0443\u043b\u044c multiprocessing, \u0430 \u0434\u043b\u044f async - \u043a\u043b\u044e\u0447\u0435\u0432\u044b\u0435 \u0441\u043b\u043e\u0432\u0430 async/await \u0438 \u043c\u043e\u0434\u0443\u043b\u044c aiohttp \u0434\u043b\u044f \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0445 \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432. \u0421\u043e\u0437\u0434\u0430\u0439\u0442\u0435 \u0441\u043f\u0438\u0441\u043e\u043a \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u0445 URL-\u0430\u0434\u0440\u0435\u0441\u043e\u0432 \u0432\u0435\u0431-\u0441\u0442\u0440\u0430\u043d\u0438\u0446 \u0434\u043b\u044f \u043f\u0430\u0440\u0441\u0438\u043d\u0433\u0430 \u0438 \u0440\u0430\u0437\u0434\u0435\u043b\u0438\u0442\u0435 \u0435\u0433\u043e \u043d\u0430 \u0440\u0430\u0432\u043d\u044b\u0435 \u0447\u0430\u0441\u0442\u0438 \u0434\u043b\u044f \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u043e\u0433\u043e \u043f\u0430\u0440\u0441\u0438\u043d\u0433\u0430. \u0417\u0430\u043f\u0443\u0441\u0442\u0438\u0442\u0435 \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u044b\u0439 \u043f\u0430\u0440\u0441\u0438\u043d\u0433 \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0439 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b \u0438 \u0441\u043e\u0445\u0440\u0430\u043d\u0438\u0442\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0432 \u0431\u0430\u0437\u0443 \u0434\u0430\u043d\u043d\u044b\u0445. \u0417\u0430\u043c\u0435\u0440\u044c\u0442\u0435 \u0432\u0440\u0435\u043c\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u043a\u0430\u0436\u0434\u043e\u0439 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b \u0438 \u0441\u0440\u0430\u0432\u043d\u0438\u0442\u0435 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b. \u0414\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u0442\u0440\u0435\u0431\u043e\u0432\u0430\u043d\u0438\u044f: \u0421\u0434\u0435\u043b\u0430\u0439\u0442\u0435 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044e, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0443\u044e \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u043a\u0430\u0436\u0434\u043e\u0439 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u044b\u0435 \u043f\u043e\u0434\u0445\u043e\u0434\u044b \u0438 \u0438\u0445 \u043e\u0441\u043e\u0431\u0435\u043d\u043d\u043e\u0441\u0442\u0438. \u0412\u043a\u043b\u044e\u0447\u0438\u0442\u0435 \u0432 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044e \u0442\u0430\u0431\u043b\u0438\u0446\u044b, \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0430\u044e\u0449\u0438\u0435 \u0432\u0440\u0435\u043c\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u043a\u0430\u0436\u0434\u043e\u0439 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b. \u041f\u0440\u043e\u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0438\u0440\u0443\u0439\u0442\u0435 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b \u0441\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u044f \u0432\u0440\u0435\u043c\u0435\u043d\u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 \u0440\u0430\u0437\u043d\u044b\u0445 \u043f\u043e\u0434\u0445\u043e\u0434\u043e\u0432.","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 6"},{"location":"#7","text":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 1) \u0423\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u044c Celery \u0438 Redis: \u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 \u0434\u043b\u044f Celery \u0438 Redis \u0432 \u043f\u0440\u043e\u0435\u043a\u0442. Celery \u0431\u0443\u0434\u0435\u0442 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u0434\u043b\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u0437\u0430\u0434\u0430\u0447 \u0432 \u0444\u043e\u043d\u0435, \u0430 Redis \u0431\u0443\u0434\u0435\u0442 \u0432\u044b\u0441\u0442\u0443\u043f\u0430\u0442\u044c \u0432 \u0440\u043e\u043b\u0438 \u0431\u0440\u043e\u043a\u0435\u0440\u0430 \u0437\u0430\u0434\u0430\u0447 \u0438 \u0445\u0440\u0430\u043d\u0438\u043b\u0438\u0449\u0430 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u0432. \u0417\u0430\u0447\u0435\u043c: Celery \u0438 Redis \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u044e\u0442 \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0444\u043e\u043d\u043e\u0432\u0443\u044e \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0443 \u0437\u0430\u0434\u0430\u0447, \u0447\u0442\u043e \u043f\u043e\u043b\u0435\u0437\u043d\u043e \u0434\u043b\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0434\u043b\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0445 \u0438\u043b\u0438 \u0440\u0435\u0441\u0443\u0440\u0441\u043e\u0435\u043c\u043a\u0438\u0445 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0439 \u0431\u0435\u0437 \u0431\u043b\u043e\u043a\u0438\u0440\u043e\u0432\u043a\u0438 \u043e\u0441\u043d\u043e\u0432\u043d\u043e\u0433\u043e \u043f\u043e\u0442\u043e\u043a\u0430 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f. 2) \u041d\u0430\u0441\u0442\u0440\u043e\u0438\u0442\u044c Celery: \u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0441\u043e\u0437\u0434\u0430\u0442\u044c \u0444\u0430\u0439\u043b \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u0438 \u0434\u043b\u044f Celery. \u041e\u043f\u0440\u0435\u0434\u0435\u043b\u0442\u044c \u0437\u0430\u0434\u0430\u0447\u0443 \u0434\u043b\u044f \u043f\u0430\u0440\u0441\u0438\u043d\u0433\u0430 URL, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0431\u0443\u0434\u0435\u0442 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0442\u044c\u0441\u044f \u0432 \u0444\u043e\u043d\u043e\u0432\u043e\u043c \u0440\u0435\u0436\u0438\u043c\u0435. \u0417\u0430\u0447\u0435\u043c: \u041d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430 Celery \u043f\u043e\u0437\u0432\u043e\u043b\u0438\u0442 \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0442\u044c \u0437\u0430\u0434\u0430\u0447\u0438, \u0447\u0442\u043e \u0443\u043b\u0443\u0447\u0448\u0438\u0442 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u0438 \u043e\u0442\u0437\u044b\u0432\u0447\u0438\u0432\u043e\u0441\u0442\u044c \u0432\u0430\u0448\u0435\u0433\u043e \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. 3) \u041e\u0431\u043d\u043e\u0432\u0438\u0442\u044c Docker Compose \u0444\u0430\u0439\u043b: \u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u0441\u0435\u0440\u0432\u0438\u0441\u044b \u0434\u043b\u044f Redis \u0438 Celery worker \u0432 docker-compose.yml. \u041e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u0442\u0435 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 \u043c\u0435\u0436\u0434\u0443 \u0441\u0435\u0440\u0432\u0438\u0441\u0430\u043c\u0438, \u0447\u0442\u043e\u0431\u044b \u043e\u0431\u0435\u0441\u043f\u0435\u0447\u0438\u0442\u044c \u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u0443\u044e \u0440\u0430\u0431\u043e\u0442\u0443 \u043e\u0440\u043a\u0435\u0441\u0442\u0440\u0430. \u0417\u0430\u0447\u0435\u043c: \u042d\u0442\u043e \u043f\u043e\u0437\u0432\u043e\u043b\u0438\u0442 \u0432\u0430\u043c \u043b\u0435\u0433\u043a\u043e \u0443\u043f\u0440\u0430\u0432\u043b\u044f\u0442\u044c \u0432\u0441\u0435\u043c\u0438 \u0441\u0435\u0440\u0432\u0438\u0441\u0430\u043c\u0438 \u0432\u0430\u0448\u0435\u0433\u043e \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f, \u0432\u043a\u043b\u044e\u0447\u0430\u044f \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u0443\u044e \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0443 \u0437\u0430\u0434\u0430\u0447, \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043e\u0434\u043d\u043e\u0433\u043e \u0444\u0430\u0439\u043b\u0430 \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u0438. 4) \u042d\u043d\u0434\u043f\u043e\u0438\u043d\u0442 \u0434\u043b\u044f \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0433\u043e \u0432\u044b\u0437\u043e\u0432\u0430 \u043f\u0430\u0440\u0441\u0435\u0440\u0430: \u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u0432 FastAPI \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u043c\u0430\u0440\u0448\u0440\u0443\u0442 \u0434\u043b\u044f \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0433\u043e \u0432\u044b\u0437\u043e\u0432\u0430 \u043f\u0430\u0440\u0441\u0435\u0440\u0430. \u041c\u0430\u0440\u0448\u0440\u0443\u0442 \u0434\u043e\u043b\u0436\u0435\u043d \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0442\u044c \u0437\u0430\u043f\u0440\u043e\u0441\u044b \u0441 URL \u0434\u043b\u044f \u043f\u0430\u0440\u0441\u0438\u043d\u0433\u0430, \u0441\u0442\u0430\u0432\u0438\u0442\u044c \u0437\u0430\u0434\u0430\u0447\u0443 \u0432 \u043e\u0447\u0435\u0440\u0435\u0434\u044c \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e Celery \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0442\u044c \u043e\u0442\u0432\u0435\u0442 \u043e \u043d\u0430\u0447\u0430\u043b\u0435 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0437\u0430\u0434\u0430\u0447\u0438. \u0417\u0430\u0447\u0435\u043c: \u042d\u0442\u043e \u043f\u043e\u0437\u0432\u043e\u043b\u0438\u0442 \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u0442\u044c \u043f\u0430\u0440\u0441\u0438\u043d\u0433 \u0432\u0435\u0431-\u0441\u0442\u0440\u0430\u043d\u0438\u0446 \u0432 \u0444\u043e\u043d\u0435, \u0447\u0442\u043e \u0443\u043b\u0443\u0447\u0448\u0438\u0442 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u043e\u043f\u044b\u0442 \u0432\u0430\u0448\u0435\u0433\u043e \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f.","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 7"},{"location":"labs/3.1_Practice/","text":"\u041e\u0442\u0447\u0435\u0442 \u043d\u0430 \u043f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0435 \u0437\u0430\u0434\u0430\u043d\u0438\u0435 3.1 \u0417\u0430\u0434\u0430\u043d\u0438\u0435 1 \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0414\u043e\u0431\u0430\u0432\u0438\u0442\u044c 6 \u043d\u043e\u0432\u044b\u0445 \u0430\u0432\u0442\u043e\u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432 \u0438 5 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0435\u0439, \u043d\u0430\u0437\u043d\u0430\u0447\u0438\u0432 \u043a\u0430\u0436\u0434\u043e\u043c\u0443 \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0443 \u043e\u0442 1 \u0434\u043e 3 \u043c\u0430\u0448\u0438\u043d. \u0412\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u044b: owner1 = CustomUser.objects.create_user(username=\"\u0410\u043b\u0435\u043a\u0441\u0435\u0439_\u041e\u0441\u043f\u0435\u043b\u044c\u043d\u0438\u043a\u043e\u0432\", password=\"password123\", passport_number=\"123987456\") owner2 = CustomUser.objects.create_user(username=\"\u0413\u0440\u0438\u0433\u043e\u0440\u0438\u0439_\u041a\u0430\u043f\u0443\u0441\u0442\u0438\u043d\", password=\"password123\", passport_number=\"456123789\") owner3 = CustomUser.objects.create_user(username=\"\u0410\u043d\u0434\u0440\u0435\u0439_\u041a\u043e\u0437\u043b\u043e\u0432\", password=\"password123\", passport_number=\"789456123\") owner4 = CustomUser.objects.create_user(username=\"\u0424\u0438\u043b\u0438\u043f\u043f_\u041a\u0438\u0440\u043a\u043e\u0440\u043e\u0432\", password=\"password123\", passport_number=\"321654987\") owner5 = CustomUser.objects.create_user(username=\"\u0410\u043b\u043b\u0430_\u041f\u0443\u0433\u0430\u0447\u0435\u0432\u0430\", password=\"password123\", passport_number=\"654789321\") owner6 = CustomUser.objects.create_user(username=\"\u041d\u0438\u043a\u043e\u043b\u0430\u0439_\u0411\u0430\u0441\u043a\u043e\u0432\", password=\"password123\", passport_number=\"987321654\") \u041c\u0430\u0448\u0438\u043d\u044b: car1 = Car.objects.create(make=\"Honda\", model=\"Civic\", color=\"Black\", state_number=\"B004KO\") car2 = Car.objects.create(make=\"Hyundai\", model=\"Elantra\", color=\"Blue\", state_number=\"B005KO\") car3 = Car.objects.create(make=\"BMW\", model=\"3 Series\", color=\"White\", state_number=\"B006KO\") car4 = Car.objects.create(make=\"Honda\", model=\"Accord\", color=\"Red\", state_number=\"B007KO\") car5 = Car.objects.create(make=\"Hyundai\", model=\"Santa Fe\", color=\"Green\", state_number=\"B008KO\") \u0412\u043b\u0430\u0434\u0435\u043d\u0438\u0435: Owner.objects.create(owner=owner1, car=car1, start_date=date(2024, 1, 1)) Owner.objects.create(owner=owner1, car=car2, start_date=date(2024, 1, 15)) Owner.objects.create(owner=owner2, car=car3, start_date=date(2024, 2, 1)) Owner.objects.create(owner=owner3, car=car4, start_date=date(2024, 3, 1)) Owner.objects.create(owner=owner4, car=car5, start_date=date(2024, 4, 1)) Owner.objects.create(owner=owner5, car=car2, start_date=date(2024, 5, 1)) Owner.objects.create(owner=owner6, car=car3, start_date=date(2024, 6, 1)) Owner.objects.create(owner=owner6, car=car4, start_date=date(2024, 7, 1)) \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0412\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u044b \u0410\u043b\u0435\u043a\u0441\u0435\u0439_\u041e\u0441\u043f\u0435\u043b\u044c\u043d\u0438\u043a\u043e\u0432, \u0410\u043d\u0434\u0440\u0435\u0439_\u041a\u043e\u0437\u043b\u043e\u0432, \u0410\u043b\u043b\u0430_\u041f\u0443\u0433\u0430\u0447\u0435\u0432\u0430, \u0424\u0438\u043b\u0438\u043f\u043f_\u041a\u0438\u0440\u043a\u043e\u0440\u043e\u0432, \u0413\u0440\u0438\u0433\u043e\u0440\u0438\u0439_\u041a\u0430\u043f\u0443\u0441\u0442\u0438\u043d, \u041d\u0438\u043a\u043e\u043b\u0430\u0439_\u0411\u0430\u0441\u043a\u043e\u0432 \u041c\u0430\u0448\u0438\u043d\u044b Honda Civic, Hyundai Elantra, BMW 3 Series, Honda Accord, Hyundai Santa Fe \u0417\u0430\u0434\u0430\u043d\u0438\u0435 2 \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0412\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u0444\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u044e \u0434\u0430\u043d\u043d\u044b\u0445. \u0412\u0441\u0435 \u043c\u0430\u0448\u0438\u043d\u044b \u043c\u0430\u0440\u043a\u0438 Honda: honda_cars = Car.objects.filter(make=\"Honda\") for car in honda_cars: print(car) \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 Honda Civic (B004KO) Honda Accord (B007KO) \u0412\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u044b, \u0447\u044c\u0438 \u0438\u043c\u0435\u043d\u0430 \u043d\u0430\u0447\u0438\u043d\u0430\u044e\u0442\u0441\u044f \u043d\u0430 \"\u0410\u043b\u0435\u043a\u0441\u0435\u0439\": alex_owners = CustomUser.objects.filter(username__icontains=\"\u0410\u043b\u0435\u043a\u0441\u0435\u0439\") for owner in alex_owners: print(owner) \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0410\u043b\u0435\u043a\u0441\u0435\u0439_\u041e\u0441\u043f\u0435\u043b\u044c\u043d\u0438\u043a\u043e\u0432 \u0421\u043b\u0443\u0447\u0430\u0439\u043d\u044b\u0439 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u044c \u0438 \u0435\u0433\u043e \u0432\u043b\u0430\u0434\u0435\u043b\u0435\u0446: import random random_car = random.choice(Car.objects.all()) owner = random_car.Owner_set.first().owner print(f\"\u041c\u0430\u0448\u0438\u043d\u0430: {random_car}, \u0412\u043b\u0430\u0434\u0435\u043b\u0435\u0446: {owner.username}\") \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u041c\u0430\u0448\u0438\u043d\u0430: BMW 3 Series, \u0412\u043b\u0430\u0434\u0435\u043b\u0435\u0446: \u0410\u043d\u0434\u0440\u0435\u0439_\u041a\u043e\u0437\u043b\u043e\u0432 \u0412\u0441\u0435 \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u044b \u043c\u0430\u0448\u0438\u043d \u043a\u0440\u0430\u0441\u043d\u043e\u0433\u043e \u0446\u0432\u0435\u0442\u0430: red_cars = Car.objects.filter(color=\"Red\") red_car_owners = CustomUser.objects.filter(Owners__car__in=red_cars).distinct() for owner in red_car_owners: print(owner) \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0410\u043b\u043b\u0430_\u041f\u0443\u0433\u0430\u0447\u0435\u0432\u0430 \u041d\u0438\u043a\u043e\u043b\u0430\u0439_\u0411\u0430\u0441\u043a\u043e\u0432 \u0412\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u044b \u043c\u0430\u0448\u0438\u043d \u0441 2024 \u0433\u043e\u0434\u0430: owners_from_2024 = CustomUser.objects.filter(Owners__start_date__year=2024).distinct() for owner in owners_from_2024: print(owner) \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0410\u043b\u0435\u043a\u0441\u0435\u0439_\u041e\u0441\u043f\u0435\u043b\u044c\u043d\u0438\u043a\u043e\u0432 \u0410\u043d\u0434\u0440\u0435\u0439_\u041a\u043e\u0437\u043b\u043e\u0432 \u0410\u043b\u043b\u0430_\u041f\u0443\u0433\u0430\u0447\u0435\u0432\u0430 \u0424\u0438\u043b\u0438\u043f\u043f_\u041a\u0438\u0440\u043a\u043e\u0440\u043e\u0432 \u0413\u0440\u0438\u0433\u043e\u0440\u0438\u0439_\u041a\u0430\u043f\u0443\u0441\u0442\u0438\u043d \u041d\u0438\u043a\u043e\u043b\u0430\u0439_\u0411\u0430\u0441\u043a\u043e\u0432 \u0417\u0430\u0434\u0430\u043d\u0438\u0435 3 \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0430\u043d\u043d\u043e\u0442\u0430\u0446\u0438\u0438 \u0438 \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0438 \u0434\u043b\u044f \u0430\u043d\u0430\u043b\u0438\u0437\u0430 \u0434\u0430\u043d\u043d\u044b\u0445. \u0421\u0430\u043c\u0430\u044f \u0440\u0430\u043d\u043d\u044f\u044f \u0434\u0430\u0442\u0430 \u043d\u0430\u0447\u0430\u043b\u0430 \u0432\u043b\u0430\u0434\u0435\u043d\u0438\u044f \u043c\u0430\u0448\u0438\u043d\u043e\u0439: earliest_Owner_date = Owner.objects.earliest('start_date').start_date print(f\"\u0421\u0430\u043c\u0430\u044f \u0440\u0430\u043d\u043d\u044f\u044f \u0434\u0430\u0442\u0430 \u043d\u0430\u0447\u0430\u043b\u0430 \u0432\u043b\u0430\u0434\u0435\u043d\u0438\u044f \u043c\u0430\u0448\u0438\u043d\u043e\u0439: {earliest_Owner_date}\") \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0421\u0430\u043c\u0430\u044f \u0440\u0430\u043d\u043d\u044f\u044f \u0434\u0430\u0442\u0430 \u043d\u0430\u0447\u0430\u043b\u0430 \u0432\u043b\u0430\u0434\u0435\u043d\u0438\u044f \u043c\u0430\u0448\u0438\u043d\u043e\u0439: 2024-01-01 \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043c\u0430\u0448\u0438\u043d \u0443 \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0430: owners_with_car_count = CustomUser.objects.annotate(car_count=Count('Owners__car')) for owner in owners_with_car_count: print(f\"{owner.username} \u0432\u043b\u0430\u0434\u0435\u0435\u0442 {owner.car_count} \u043c\u0430\u0448\u0438\u043d\u0430\u043c\u0438(\u043e\u0439)\") \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0410\u043b\u0435\u043a\u0441\u0435\u0439_\u041e\u0441\u043f\u0435\u043b\u044c\u043d\u0438\u043a\u043e\u0432 \u0432\u043b\u0430\u0434\u0435\u0435\u0442 2 \u043c\u0430\u0448\u0438\u043d\u0430\u043c\u0438(\u043e\u0439) \u0410\u043d\u0434\u0440\u0435\u0439_\u041a\u043e\u0437\u043b\u043e\u0432 \u0432\u043b\u0430\u0434\u0435\u0435\u0442 1 \u043c\u0430\u0448\u0438\u043d\u0430\u043c\u0438(\u043e\u0439) \u0410\u043b\u043b\u0430_\u041f\u0443\u0433\u0430\u0447\u0435\u0432\u0430 \u0432\u043b\u0430\u0434\u0435\u0435\u0442 1 \u043c\u0430\u0448\u0438\u043d\u0430\u043c\u0438(\u043e\u0439) \u0424\u0438\u043b\u0438\u043f\u043f_\u041a\u0438\u0440\u043a\u043e\u0440\u043e\u0432 \u0432\u043b\u0430\u0434\u0435\u0435\u0442 1 \u043c\u0430\u0448\u0438\u043d\u0430\u043c\u0438(\u043e\u0439) \u0413\u0440\u0438\u0433\u043e\u0440\u0438\u0439_\u041a\u0430\u043f\u0443\u0441\u0442\u0438\u043d \u0432\u043b\u0430\u0434\u0435\u0435\u0442 1 \u043c\u0430\u0448\u0438\u043d\u0430\u043c\u0438(\u043e\u0439) \u041d\u0438\u043a\u043e\u043b\u0430\u0439_\u0411\u0430\u0441\u043a\u043e\u0432 \u0432\u043b\u0430\u0434\u0435\u0435\u0442 2 \u043c\u0430\u0448\u0438\u043d\u0430\u043c\u0438(\u043e\u0439) \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043c\u0430\u0448\u0438\u043d \u043a\u0430\u0436\u0434\u043e\u0439 \u043c\u0430\u0440\u043a\u0438: car_make_counts = Car.objects.values('make').annotate(count=Count('make')) for make_count in car_make_counts: print(f\"{make_count['make']}: {make_count['count']} \u043c\u0430\u0448\u0438\u043d\u0430(\u044b)\") \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 Honda: 2 \u043c\u0430\u0448\u0438\u043d\u0430(\u044b) Hyundai: 2 \u043c\u0430\u0448\u0438\u043d\u0430(\u044b) BMW: 1 \u043c\u0430\u0448\u0438\u043d\u0430(\u044b) \u0421\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0430 \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432 \u043f\u043e \u0438\u043c\u0435\u043d\u0438: sorted_users = CustomUser.objects.order_by('username') for user in sorted_users: print(user.username) \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0410\u043b\u0435\u043a\u0441\u0435\u0439_\u041e\u0441\u043f\u0435\u043b\u044c\u043d\u0438\u043a\u043e\u0432 \u0410\u043b\u043b\u0430_\u041f\u0443\u0433\u0430\u0447\u0435\u0432\u0430 \u0410\u043d\u0434\u0440\u0435\u0439_\u041a\u043e\u0437\u043b\u043e\u0432 \u0413\u0440\u0438\u0433\u043e\u0440\u0438\u0439_\u041a\u0430\u043f\u0443\u0441\u0442\u0438\u043d \u041d\u0438\u043a\u043e\u043b\u0430\u0439_\u0411\u0430\u0441\u043a\u043e\u0432 \u0424\u0438\u043b\u0438\u043f\u043f_\u041a\u0438\u0440\u043a\u043e\u0440\u043e\u0432","title":"\u041f\u0440\u0430\u043a\u0442\u0438\u043a\u0430 3.1"},{"location":"labs/3.1_Practice/#31","text":"","title":"\u041e\u0442\u0447\u0435\u0442 \u043d\u0430 \u043f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0435 \u0437\u0430\u0434\u0430\u043d\u0438\u0435 3.1"},{"location":"labs/3.1_Practice/#1","text":"","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 1"},{"location":"labs/3.1_Practice/#_1","text":"\u0414\u043e\u0431\u0430\u0432\u0438\u0442\u044c 6 \u043d\u043e\u0432\u044b\u0445 \u0430\u0432\u0442\u043e\u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432 \u0438 5 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0435\u0439, \u043d\u0430\u0437\u043d\u0430\u0447\u0438\u0432 \u043a\u0430\u0436\u0434\u043e\u043c\u0443 \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0443 \u043e\u0442 1 \u0434\u043e 3 \u043c\u0430\u0448\u0438\u043d. \u0412\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u044b: owner1 = CustomUser.objects.create_user(username=\"\u0410\u043b\u0435\u043a\u0441\u0435\u0439_\u041e\u0441\u043f\u0435\u043b\u044c\u043d\u0438\u043a\u043e\u0432\", password=\"password123\", passport_number=\"123987456\") owner2 = CustomUser.objects.create_user(username=\"\u0413\u0440\u0438\u0433\u043e\u0440\u0438\u0439_\u041a\u0430\u043f\u0443\u0441\u0442\u0438\u043d\", password=\"password123\", passport_number=\"456123789\") owner3 = CustomUser.objects.create_user(username=\"\u0410\u043d\u0434\u0440\u0435\u0439_\u041a\u043e\u0437\u043b\u043e\u0432\", password=\"password123\", passport_number=\"789456123\") owner4 = CustomUser.objects.create_user(username=\"\u0424\u0438\u043b\u0438\u043f\u043f_\u041a\u0438\u0440\u043a\u043e\u0440\u043e\u0432\", password=\"password123\", passport_number=\"321654987\") owner5 = CustomUser.objects.create_user(username=\"\u0410\u043b\u043b\u0430_\u041f\u0443\u0433\u0430\u0447\u0435\u0432\u0430\", password=\"password123\", passport_number=\"654789321\") owner6 = CustomUser.objects.create_user(username=\"\u041d\u0438\u043a\u043e\u043b\u0430\u0439_\u0411\u0430\u0441\u043a\u043e\u0432\", password=\"password123\", passport_number=\"987321654\") \u041c\u0430\u0448\u0438\u043d\u044b: car1 = Car.objects.create(make=\"Honda\", model=\"Civic\", color=\"Black\", state_number=\"B004KO\") car2 = Car.objects.create(make=\"Hyundai\", model=\"Elantra\", color=\"Blue\", state_number=\"B005KO\") car3 = Car.objects.create(make=\"BMW\", model=\"3 Series\", color=\"White\", state_number=\"B006KO\") car4 = Car.objects.create(make=\"Honda\", model=\"Accord\", color=\"Red\", state_number=\"B007KO\") car5 = Car.objects.create(make=\"Hyundai\", model=\"Santa Fe\", color=\"Green\", state_number=\"B008KO\") \u0412\u043b\u0430\u0434\u0435\u043d\u0438\u0435: Owner.objects.create(owner=owner1, car=car1, start_date=date(2024, 1, 1)) Owner.objects.create(owner=owner1, car=car2, start_date=date(2024, 1, 15)) Owner.objects.create(owner=owner2, car=car3, start_date=date(2024, 2, 1)) Owner.objects.create(owner=owner3, car=car4, start_date=date(2024, 3, 1)) Owner.objects.create(owner=owner4, car=car5, start_date=date(2024, 4, 1)) Owner.objects.create(owner=owner5, car=car2, start_date=date(2024, 5, 1)) Owner.objects.create(owner=owner6, car=car3, start_date=date(2024, 6, 1)) Owner.objects.create(owner=owner6, car=car4, start_date=date(2024, 7, 1))","title":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435"},{"location":"labs/3.1_Practice/#_2","text":"\u0412\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u044b \u0410\u043b\u0435\u043a\u0441\u0435\u0439_\u041e\u0441\u043f\u0435\u043b\u044c\u043d\u0438\u043a\u043e\u0432, \u0410\u043d\u0434\u0440\u0435\u0439_\u041a\u043e\u0437\u043b\u043e\u0432, \u0410\u043b\u043b\u0430_\u041f\u0443\u0433\u0430\u0447\u0435\u0432\u0430, \u0424\u0438\u043b\u0438\u043f\u043f_\u041a\u0438\u0440\u043a\u043e\u0440\u043e\u0432, \u0413\u0440\u0438\u0433\u043e\u0440\u0438\u0439_\u041a\u0430\u043f\u0443\u0441\u0442\u0438\u043d, \u041d\u0438\u043a\u043e\u043b\u0430\u0439_\u0411\u0430\u0441\u043a\u043e\u0432 \u041c\u0430\u0448\u0438\u043d\u044b Honda Civic, Hyundai Elantra, BMW 3 Series, Honda Accord, Hyundai Santa Fe","title":"\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442"},{"location":"labs/3.1_Practice/#2","text":"","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 2"},{"location":"labs/3.1_Practice/#_3","text":"\u0412\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u0444\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u044e \u0434\u0430\u043d\u043d\u044b\u0445. \u0412\u0441\u0435 \u043c\u0430\u0448\u0438\u043d\u044b \u043c\u0430\u0440\u043a\u0438 Honda: honda_cars = Car.objects.filter(make=\"Honda\") for car in honda_cars: print(car)","title":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435"},{"location":"labs/3.1_Practice/#_4","text":"Honda Civic (B004KO) Honda Accord (B007KO) \u0412\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u044b, \u0447\u044c\u0438 \u0438\u043c\u0435\u043d\u0430 \u043d\u0430\u0447\u0438\u043d\u0430\u044e\u0442\u0441\u044f \u043d\u0430 \"\u0410\u043b\u0435\u043a\u0441\u0435\u0439\": alex_owners = CustomUser.objects.filter(username__icontains=\"\u0410\u043b\u0435\u043a\u0441\u0435\u0439\") for owner in alex_owners: print(owner)","title":"\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442"},{"location":"labs/3.1_Practice/#_5","text":"\u0410\u043b\u0435\u043a\u0441\u0435\u0439_\u041e\u0441\u043f\u0435\u043b\u044c\u043d\u0438\u043a\u043e\u0432 \u0421\u043b\u0443\u0447\u0430\u0439\u043d\u044b\u0439 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u044c \u0438 \u0435\u0433\u043e \u0432\u043b\u0430\u0434\u0435\u043b\u0435\u0446: import random random_car = random.choice(Car.objects.all()) owner = random_car.Owner_set.first().owner print(f\"\u041c\u0430\u0448\u0438\u043d\u0430: {random_car}, \u0412\u043b\u0430\u0434\u0435\u043b\u0435\u0446: {owner.username}\")","title":"\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442"},{"location":"labs/3.1_Practice/#_6","text":"\u041c\u0430\u0448\u0438\u043d\u0430: BMW 3 Series, \u0412\u043b\u0430\u0434\u0435\u043b\u0435\u0446: \u0410\u043d\u0434\u0440\u0435\u0439_\u041a\u043e\u0437\u043b\u043e\u0432 \u0412\u0441\u0435 \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u044b \u043c\u0430\u0448\u0438\u043d \u043a\u0440\u0430\u0441\u043d\u043e\u0433\u043e \u0446\u0432\u0435\u0442\u0430: red_cars = Car.objects.filter(color=\"Red\") red_car_owners = CustomUser.objects.filter(Owners__car__in=red_cars).distinct() for owner in red_car_owners: print(owner)","title":"\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442"},{"location":"labs/3.1_Practice/#_7","text":"\u0410\u043b\u043b\u0430_\u041f\u0443\u0433\u0430\u0447\u0435\u0432\u0430 \u041d\u0438\u043a\u043e\u043b\u0430\u0439_\u0411\u0430\u0441\u043a\u043e\u0432 \u0412\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u044b \u043c\u0430\u0448\u0438\u043d \u0441 2024 \u0433\u043e\u0434\u0430: owners_from_2024 = CustomUser.objects.filter(Owners__start_date__year=2024).distinct() for owner in owners_from_2024: print(owner)","title":"\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442"},{"location":"labs/3.1_Practice/#_8","text":"\u0410\u043b\u0435\u043a\u0441\u0435\u0439_\u041e\u0441\u043f\u0435\u043b\u044c\u043d\u0438\u043a\u043e\u0432 \u0410\u043d\u0434\u0440\u0435\u0439_\u041a\u043e\u0437\u043b\u043e\u0432 \u0410\u043b\u043b\u0430_\u041f\u0443\u0433\u0430\u0447\u0435\u0432\u0430 \u0424\u0438\u043b\u0438\u043f\u043f_\u041a\u0438\u0440\u043a\u043e\u0440\u043e\u0432 \u0413\u0440\u0438\u0433\u043e\u0440\u0438\u0439_\u041a\u0430\u043f\u0443\u0441\u0442\u0438\u043d \u041d\u0438\u043a\u043e\u043b\u0430\u0439_\u0411\u0430\u0441\u043a\u043e\u0432","title":"\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442"},{"location":"labs/3.1_Practice/#3","text":"","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 3"},{"location":"labs/3.1_Practice/#_9","text":"\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0430\u043d\u043d\u043e\u0442\u0430\u0446\u0438\u0438 \u0438 \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0438 \u0434\u043b\u044f \u0430\u043d\u0430\u043b\u0438\u0437\u0430 \u0434\u0430\u043d\u043d\u044b\u0445. \u0421\u0430\u043c\u0430\u044f \u0440\u0430\u043d\u043d\u044f\u044f \u0434\u0430\u0442\u0430 \u043d\u0430\u0447\u0430\u043b\u0430 \u0432\u043b\u0430\u0434\u0435\u043d\u0438\u044f \u043c\u0430\u0448\u0438\u043d\u043e\u0439: earliest_Owner_date = Owner.objects.earliest('start_date').start_date print(f\"\u0421\u0430\u043c\u0430\u044f \u0440\u0430\u043d\u043d\u044f\u044f \u0434\u0430\u0442\u0430 \u043d\u0430\u0447\u0430\u043b\u0430 \u0432\u043b\u0430\u0434\u0435\u043d\u0438\u044f \u043c\u0430\u0448\u0438\u043d\u043e\u0439: {earliest_Owner_date}\")","title":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435"},{"location":"labs/3.1_Practice/#_10","text":"\u0421\u0430\u043c\u0430\u044f \u0440\u0430\u043d\u043d\u044f\u044f \u0434\u0430\u0442\u0430 \u043d\u0430\u0447\u0430\u043b\u0430 \u0432\u043b\u0430\u0434\u0435\u043d\u0438\u044f \u043c\u0430\u0448\u0438\u043d\u043e\u0439: 2024-01-01 \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043c\u0430\u0448\u0438\u043d \u0443 \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0430: owners_with_car_count = CustomUser.objects.annotate(car_count=Count('Owners__car')) for owner in owners_with_car_count: print(f\"{owner.username} \u0432\u043b\u0430\u0434\u0435\u0435\u0442 {owner.car_count} \u043c\u0430\u0448\u0438\u043d\u0430\u043c\u0438(\u043e\u0439)\")","title":"\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442"},{"location":"labs/3.1_Practice/#_11","text":"\u0410\u043b\u0435\u043a\u0441\u0435\u0439_\u041e\u0441\u043f\u0435\u043b\u044c\u043d\u0438\u043a\u043e\u0432 \u0432\u043b\u0430\u0434\u0435\u0435\u0442 2 \u043c\u0430\u0448\u0438\u043d\u0430\u043c\u0438(\u043e\u0439) \u0410\u043d\u0434\u0440\u0435\u0439_\u041a\u043e\u0437\u043b\u043e\u0432 \u0432\u043b\u0430\u0434\u0435\u0435\u0442 1 \u043c\u0430\u0448\u0438\u043d\u0430\u043c\u0438(\u043e\u0439) \u0410\u043b\u043b\u0430_\u041f\u0443\u0433\u0430\u0447\u0435\u0432\u0430 \u0432\u043b\u0430\u0434\u0435\u0435\u0442 1 \u043c\u0430\u0448\u0438\u043d\u0430\u043c\u0438(\u043e\u0439) \u0424\u0438\u043b\u0438\u043f\u043f_\u041a\u0438\u0440\u043a\u043e\u0440\u043e\u0432 \u0432\u043b\u0430\u0434\u0435\u0435\u0442 1 \u043c\u0430\u0448\u0438\u043d\u0430\u043c\u0438(\u043e\u0439) \u0413\u0440\u0438\u0433\u043e\u0440\u0438\u0439_\u041a\u0430\u043f\u0443\u0441\u0442\u0438\u043d \u0432\u043b\u0430\u0434\u0435\u0435\u0442 1 \u043c\u0430\u0448\u0438\u043d\u0430\u043c\u0438(\u043e\u0439) \u041d\u0438\u043a\u043e\u043b\u0430\u0439_\u0411\u0430\u0441\u043a\u043e\u0432 \u0432\u043b\u0430\u0434\u0435\u0435\u0442 2 \u043c\u0430\u0448\u0438\u043d\u0430\u043c\u0438(\u043e\u0439) \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043c\u0430\u0448\u0438\u043d \u043a\u0430\u0436\u0434\u043e\u0439 \u043c\u0430\u0440\u043a\u0438: car_make_counts = Car.objects.values('make').annotate(count=Count('make')) for make_count in car_make_counts: print(f\"{make_count['make']}: {make_count['count']} \u043c\u0430\u0448\u0438\u043d\u0430(\u044b)\")","title":"\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442"},{"location":"labs/3.1_Practice/#_12","text":"Honda: 2 \u043c\u0430\u0448\u0438\u043d\u0430(\u044b) Hyundai: 2 \u043c\u0430\u0448\u0438\u043d\u0430(\u044b) BMW: 1 \u043c\u0430\u0448\u0438\u043d\u0430(\u044b) \u0421\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0430 \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432 \u043f\u043e \u0438\u043c\u0435\u043d\u0438: sorted_users = CustomUser.objects.order_by('username') for user in sorted_users: print(user.username)","title":"\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442"},{"location":"labs/3.1_Practice/#_13","text":"\u0410\u043b\u0435\u043a\u0441\u0435\u0439_\u041e\u0441\u043f\u0435\u043b\u044c\u043d\u0438\u043a\u043e\u0432 \u0410\u043b\u043b\u0430_\u041f\u0443\u0433\u0430\u0447\u0435\u0432\u0430 \u0410\u043d\u0434\u0440\u0435\u0439_\u041a\u043e\u0437\u043b\u043e\u0432 \u0413\u0440\u0438\u0433\u043e\u0440\u0438\u0439_\u041a\u0430\u043f\u0443\u0441\u0442\u0438\u043d \u041d\u0438\u043a\u043e\u043b\u0430\u0439_\u0411\u0430\u0441\u043a\u043e\u0432 \u0424\u0438\u043b\u0438\u043f\u043f_\u041a\u0438\u0440\u043a\u043e\u0440\u043e\u0432","title":"\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442"},{"location":"labs/Leetcode/","text":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u21161 \u0417\u0430\u0434\u0430\u0447\u0430 1 1493. Longest Subarray of 1's After Deleting One Element Given a binary array nums, you should delete one element from it. Return the size of the longest non-empty subarray containing only 1's in the resulting array. Return 0 if there is no such subarray. \u041a\u043e\u0434 \u0437\u0430\u0434\u0430\u0447\u0438: def longestSubarray(self, nums: List[int]) -> int: leftstreak = 0 rightstreak = 0 mxstreak = 0 nullflag = False for i in range(len(nums)): if nums[i] == 0: mxstreak = max(leftstreak + rightstreak, mxstreak) leftstreak = rightstreak rightstreak = 0 nullflag = True else: rightstreak += 1 mxstreak = max(leftstreak + rightstreak, mxstreak) if not nullflag: mxstreak -= 1 return mxstreak \u0417\u0430\u0434\u0430\u0447\u0430 2 1769. Minimum Number of Operations to Move All Balls to Each Box You have n boxes. You are given a binary string boxes of length n, where boxes[i] is '0' if the ith box is empty, and '1' if it contains one ball. In one operation, you can move one ball from a box to an adjacent box. Box i is adjacent to box j if abs(i - j) == 1. Note that after doing so, there may be more than one ball in some boxes. Return an array answer of size n, where answer[i] is the minimum number of operations needed to move all the balls to the ith box. Each answer[i] is calculated considering the initial state of the boxes. \u041a\u043e\u0434 \u0437\u0430\u0434\u0430\u0447\u0438: def minOperations(self, boxes: str) -> List[int]: dists = [] for i, i_box in enumerate(boxes): ans = 0 for j, j_box in enumerate(boxes): if j_box == '1': ans += abs(i - j) dists.append(ans) return dists \u0417\u0430\u0434\u0430\u0447\u0430 3 2807. Insert Greatest Common Divisors in Linked List Given the head of a linked list head, in which each node contains an integer value. Between every pair of adjacent nodes, insert a new node with a value equal to the greatest common divisor of them. Return the linked list after insertion. The greatest common divisor of two numbers is the largest positive integer that evenly divides both numbers. \u041a\u043e\u0434 \u0437\u0430\u0434\u0430\u0447\u0438: def insertGreatestCommonDivisors(self, head: Optional[ListNode]) -> Optional[ListNode]: cur = head while(cur.next): cur.next = ListNode(gcd(cur.val, cur.next.val), cur.next) cur = cur.next.next return head \u0417\u0430\u0434\u0430\u0447\u0430 4 841. Keys and Rooms There are n rooms labeled from 0 to n - 1 and all the rooms are locked except for room 0. Your goal is to visit all the rooms. However, you cannot enter a locked room without having its key. When you visit a room, you may find a set of distinct keys in it. Each key has a number on it, denoting which room it unlocks, and you can take all of them with you to unlock the other rooms. Given an array rooms where rooms[i] is the set of keys that you can obtain if you visited room i, return true if you can visit all the rooms, or false otherwise. \u041a\u043e\u0434 \u0437\u0430\u0434\u0430\u0447\u0438: def canVisitAllRooms(self, rooms: List[List[int]]) -> bool: visited = set() def dfs(edge: int): for ver in rooms[edge]: if ver not in visited: visited.add(ver) dfs(ver) visited.add(0) dfs(0) if len(visited) == len(rooms): return True return False","title":"Leetcode \u0437\u0430\u0434\u0430\u0447\u0438"},{"location":"labs/Leetcode/#no1","text":"","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u21161"},{"location":"labs/Leetcode/#1","text":"","title":"\u0417\u0430\u0434\u0430\u0447\u0430 1"},{"location":"labs/Leetcode/#1493-longest-subarray-of-1s-after-deleting-one-element","text":"Given a binary array nums, you should delete one element from it. Return the size of the longest non-empty subarray containing only 1's in the resulting array. Return 0 if there is no such subarray. \u041a\u043e\u0434 \u0437\u0430\u0434\u0430\u0447\u0438: def longestSubarray(self, nums: List[int]) -> int: leftstreak = 0 rightstreak = 0 mxstreak = 0 nullflag = False for i in range(len(nums)): if nums[i] == 0: mxstreak = max(leftstreak + rightstreak, mxstreak) leftstreak = rightstreak rightstreak = 0 nullflag = True else: rightstreak += 1 mxstreak = max(leftstreak + rightstreak, mxstreak) if not nullflag: mxstreak -= 1 return mxstreak","title":"1493. Longest Subarray of 1's After Deleting One Element"},{"location":"labs/Leetcode/#2","text":"","title":"\u0417\u0430\u0434\u0430\u0447\u0430 2"},{"location":"labs/Leetcode/#1769-minimum-number-of-operations-to-move-all-balls-to-each-box","text":"You have n boxes. You are given a binary string boxes of length n, where boxes[i] is '0' if the ith box is empty, and '1' if it contains one ball. In one operation, you can move one ball from a box to an adjacent box. Box i is adjacent to box j if abs(i - j) == 1. Note that after doing so, there may be more than one ball in some boxes. Return an array answer of size n, where answer[i] is the minimum number of operations needed to move all the balls to the ith box. Each answer[i] is calculated considering the initial state of the boxes. \u041a\u043e\u0434 \u0437\u0430\u0434\u0430\u0447\u0438: def minOperations(self, boxes: str) -> List[int]: dists = [] for i, i_box in enumerate(boxes): ans = 0 for j, j_box in enumerate(boxes): if j_box == '1': ans += abs(i - j) dists.append(ans) return dists","title":"1769. Minimum Number of Operations to Move All Balls to Each Box"},{"location":"labs/Leetcode/#3","text":"","title":"\u0417\u0430\u0434\u0430\u0447\u0430 3"},{"location":"labs/Leetcode/#2807-insert-greatest-common-divisors-in-linked-list","text":"Given the head of a linked list head, in which each node contains an integer value. Between every pair of adjacent nodes, insert a new node with a value equal to the greatest common divisor of them. Return the linked list after insertion. The greatest common divisor of two numbers is the largest positive integer that evenly divides both numbers. \u041a\u043e\u0434 \u0437\u0430\u0434\u0430\u0447\u0438: def insertGreatestCommonDivisors(self, head: Optional[ListNode]) -> Optional[ListNode]: cur = head while(cur.next): cur.next = ListNode(gcd(cur.val, cur.next.val), cur.next) cur = cur.next.next return head","title":"2807. Insert Greatest Common Divisors in Linked List"},{"location":"labs/Leetcode/#4","text":"","title":"\u0417\u0430\u0434\u0430\u0447\u0430 4"},{"location":"labs/Leetcode/#841-keys-and-rooms","text":"There are n rooms labeled from 0 to n - 1 and all the rooms are locked except for room 0. Your goal is to visit all the rooms. However, you cannot enter a locked room without having its key. When you visit a room, you may find a set of distinct keys in it. Each key has a number on it, denoting which room it unlocks, and you can take all of them with you to unlock the other rooms. Given an array rooms where rooms[i] is the set of keys that you can obtain if you visited room i, return true if you can visit all the rooms, or false otherwise. \u041a\u043e\u0434 \u0437\u0430\u0434\u0430\u0447\u0438: def canVisitAllRooms(self, rooms: List[List[int]]) -> bool: visited = set() def dfs(edge: int): for ver in rooms[edge]: if ver not in visited: visited.add(ver) dfs(ver) visited.add(0) dfs(0) if len(visited) == len(rooms): return True return False","title":"841. Keys and Rooms"},{"location":"labs/lab_1/","text":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u21161 \u0417\u0430\u0434\u0430\u043d\u0438\u0435 1 \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0443\u044e \u0438 \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u0441\u0435\u0440\u0432\u0435\u0440\u0443 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u00abHello, server\u00bb, \u0438 \u043e\u043d\u043e \u0434\u043e\u043b\u0436\u043d\u043e \u043e\u0442\u043e\u0431\u0440\u0430\u0437\u0438\u0442\u044c\u0441\u044f \u043d\u0430 \u0441\u0442\u043e\u0440\u043e\u043d\u0435 \u0441\u0435\u0440\u0432\u0435\u0440\u0430. \u0412 \u043e\u0442\u0432\u0435\u0442 \u0441\u0435\u0440\u0432\u0435\u0440 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0443 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u00abHello, client\u00bb, \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u0434\u043e\u043b\u0436\u043d\u043e \u043e\u0442\u043e\u0431\u0440\u0430\u0437\u0438\u0442\u044c\u0441\u044f \u0443 \u043a\u043b\u0438\u0435\u043d\u0442\u0430. \u041a\u043e\u0434 \u0441\u0435\u0440\u0432\u0435\u0440\u0430: import socket socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM) socket.bind(('', 8080)) max_user = 1 response = b\"Hello, client\" while True: client_data, addr = socket.recvfrom(1024) if not client_data: break print(client_data) socket.sendto(response, addr) socket.close() \u041a\u043e\u0434 \u043a\u043b\u0438\u0435\u043d\u0442\u0430: import socket socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM) while True: message = bytes(input(), 'utf-8') socket.sendto(message, ('localhost', 8080)) response = socket.recv(1024) if not response: break print(response) socket.close() \u0417\u0430\u0434\u0430\u043d\u0438\u0435 2 \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0443\u044e \u0438 \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u0437\u0430\u043f\u0440\u0430\u0448\u0438\u0432\u0430\u0435\u0442 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u043c\u0430\u0442\u0435\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438, \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u043a\u043e\u0442\u043e\u0440\u043e\u0439 \u0432\u0432\u043e\u0434\u044f\u0442\u0441\u044f \u0441 \u043a\u043b\u0430\u0432\u0438\u0430\u0442\u0443\u0440\u044b. \u0421\u0435\u0440\u0432\u0435\u0440 \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u0442 \u0434\u0430\u043d\u043d\u044b\u0435 \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0443. \u0412\u0430\u0440\u0438\u0430\u043d\u0442 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438: \u041f\u043e\u0438\u0441\u043a \u043f\u043b\u043e\u0449\u0430\u0434\u0438 \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u041a\u043e\u0434 \u0441\u0435\u0440\u0432\u0435\u0440\u0430: import socket import math server_socket = socket.socket() server_socket.bind(('', 8080)) max_user = 5 server_socket.listen(max_user) while True: client_socket, addr = server_socket.accept() client_data = list(map(lambda x: int(x), client_socket.recv(1024).decode().split())) if not client_data or len(client_data) != 3: print(\"Invalid parameters for triangle area task\") client_socket.close() break S = client_data[0] * client_data[1] * math.sin(client_data[2]) client_socket.send(bytes(str(S), 'utf-8')) print(client_data) socket.close() \u041a\u043e\u0434 \u043a\u043b\u0438\u0435\u043d\u0442\u0430: import socket client_socket = socket.socket() client_socket.connect(('localhost', 8080)) print(\"Please write the lengths of 2 sides and an angle of the parallelogramm:\") client_socket.send(bytes(input(), 'utf-8')) res = client_socket.recv(1024) print(f\"Area = {res.decode()}\") client_socket.close() \u0417\u0430\u0434\u0430\u043d\u0438\u0435 3 \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0430\u0435\u0442\u0441\u044f \u043a \u0441\u0435\u0440\u0432\u0435\u0440\u0443, \u0438 \u0432 \u043e\u0442\u0432\u0435\u0442 \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 HTTP-\u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0435\u0435 HTML-\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0443, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0441\u0435\u0440\u0432\u0435\u0440 \u043f\u043e\u0434\u0433\u0440\u0443\u0436\u0430\u0435\u0442 \u0438\u0437 \u0444\u0430\u0439\u043b\u0430 index.html. \u041a\u043e\u0434 \u0441\u0435\u0440\u0432\u0435\u0440\u0430: import socket socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM) socket.bind(('', 8080)) max_conn_count = 5 socket.listen(max_conn_count) while True: conn_socket, addr = socket.accept() request = conn_socket.recv(1024).decode().split() if request[0] != \"GET\": conn_socket.close() print(\"Bad Gateway\") conn_socket.send(b'Response 400') conn_socket.close() break print(request) with open('index.html', 'r') as index: response = 'Response 200' print(\"OK\") conn_socket.send(response.encode('utf-8')) conn_socket.close() \u041a\u043e\u0434 \u043a\u043b\u0438\u0435\u043d\u0442\u0430: import http.client host = 'localhost' client_conn = http.client.HTTPConnection(host, 8080) client_conn.request('GET', 'index.html') response = client_conn.getresponse() print(response.read().decode()) \u041a\u043e\u0434 HTML-\u0440\u0430\u0437\u043c\u0435\u0442\u043a\u0438 <!DOCTYPE html> <html lang=\"en\"> <head> <meta charset=\"UTF-8\"> <title>WEB Lab1-3</title> </head> <body> <h1> Hello, it's html page, delivered from python socket server. </h1> </body> </html> \u0417\u0430\u0434\u0430\u043d\u0438\u0435 4 \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0434\u0432\u0443\u0445\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u0438\u043b\u0438 \u043c\u043d\u043e\u0433\u043e\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u0447\u0430\u0442. \u0414\u043b\u044f \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u0431\u0430\u043b\u043b\u043e\u0432 \u0440\u0435\u0430\u043b\u0438\u0437\u0443\u0439\u0442\u0435 \u043c\u043d\u043e\u0433\u043e\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u0447\u0430\u0442. \u0422\u0440\u0435\u0431\u043e\u0432\u0430\u043d\u0438\u044f: \u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 socket. \u0414\u043b\u044f \u043c\u043d\u043e\u0433\u043e\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u043e\u0433\u043e \u0447\u0430\u0442\u0430 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 threading. \u041a\u043e\u0434 \u0441\u0435\u0440\u0432\u0435\u0440\u0430: import socket import threading from copy import copy max_conn_count = 10 locker = threading.Lock() threads = [] connections = [] def threaded_handle(conn, address): while True: data = conn.recv(1024) if not data: conn.close() print(f\"{address} connection interrupted\") break msg = address[0] + \":\" + str(address[1]) + \" send a message: \" + data.decode() print(msg) with locker: conn_copy = copy(connections) for c in conn_copy: c.sendall(msg.encode('utf-8')) def main(): a_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM) a_socket.bind(('', 8080)) a_socket.listen(max_conn_count) while True: conn_socket, addr = a_socket.accept() conn_thread = threading.Thread(target=threaded_handle, args=(conn_socket, addr,)) threads.append(conn_thread) connections.append(conn_socket) conn_thread.start() if __name__ == \"__main__\": main() \u041a\u043e\u0434 \u043a\u043b\u0438\u0435\u043d\u0442\u0430: import socket import threading getting_msg, host, port = True, 'localhost', 8080 client_locker = threading.Lock() def show_chat(sock): while True: with client_locker: serv_data = sock.recv(1024) if not serv_data: with client_locker: sock.close() print(\"Connection closed\") break print(serv_data.decode()) def main_client(): client_socket = socket.socket() client_socket.connect((host, port)) chat_thread = threading.Thread(target=show_chat, args=(client_socket,)) chat_thread.start() while getting_msg: new_msg = input().encode('utf-8') client_socket.send(new_msg) chat_thread.join() if __name__ == \"__main__\": main_client() \u0417\u0430\u0434\u0430\u043d\u0438\u0435 5 \u041d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u043f\u0440\u043e\u0441\u0442\u043e\u0439 \u0432\u0435\u0431-\u0441\u0435\u0440\u0432\u0435\u0440 \u0434\u043b\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 GET \u0438 POST HTTP-\u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 socket \u0432 Python. \u0421\u0435\u0440\u0432\u0435\u0440 \u0434\u043e\u043b\u0436\u0435\u043d: \u041f\u0440\u0438\u043d\u044f\u0442\u044c \u0438 \u0437\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0435 \u0438 \u043e\u0446\u0435\u043d\u043a\u0435 \u043f\u043e \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0435. \u041e\u0442\u0434\u0430\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e\u0431\u043e \u0432\u0441\u0435\u0445 \u043e\u0446\u0435\u043d\u043a\u0430\u0445 \u043f\u043e \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0430\u043c \u0432 \u0432\u0438\u0434\u0435 HTML-\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b. Web-\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0430 \u0441 \u043e\u0446\u0435\u043d\u043a\u0430\u043c\u0438 \u0432\u044b\u0433\u043b\u044f\u0434\u0438\u0442 \u0442\u0430\u043a: \u041a\u043e\u0434 \u0441\u0435\u0440\u0432\u0435\u0440\u0430: import socket import json from bs4 import BeautifulSoup as bs from urllib.parse import urlparse, parse_qs from datetime import datetime max_headers = 100 class HTTPRequest: def __init__(self, method, url, version, headers, r_body): self.method = method self.url = url self.version = version self.headers = headers self.body = r_body @property def parsed_url(self): return urlparse(self.url) @property def query(self): return parse_qs(self.parsed_url.query) class HTTPResponse: def __init__(self, code, status, version, headers=None, body=None): self.code = code self.status = status self.version = version self.headers = headers self.body = body def compile(self): resp = f\"{self.version} {self.code} {self.status}\\n\" if self.headers: for header, value in self.headers.items(): resp += f\"{header}: {value}\\n\" if self.body: resp += f\"\\n{self.body}\" return resp def compile_html(req, filename, json_file): soup = bs(open(filename, 'r+'), \"html.parser\") caption = soup.find('h2', {'id': 'subj_name'}) mark_list = soup.find('ul', {'id': 'marks'}) try: subj = req.query['subject'][0] caption.string = f\"\u041e\u0446\u0435\u043d\u043a\u0438 \u043f\u043e \u043f\u0440\u0435\u0434\u043c\u0435\u0442\u0443: {subj}\" with open(json_file, 'r') as grades_file: subjects = json.load(grades_file) marks = subjects[subj] for mark in marks: mark_li = soup.new_tag('li') mark_li.string = mark mark_list.append(mark_li) return soup.prettify('utf-8').decode() except KeyError: raise Exception(\"Wrong request parameters\") class HTTPServer: def __init__(self, ip, port): self.ip = ip self.port = port self.name = \"MyHTTPServer\" self.http_v = \"HTTP/1.1\" def serve_forever(self): serv_sock = socket.socket() serv_sock.bind((self.ip, self.port)) serv_sock.listen() try: while True: conn_socket, addr = serv_sock.accept() self.serve_client(conn_socket) finally: serv_sock.close() def serve_client(self, connection): req = self.parse_request(connection) if req: resp = self.handle_request(req).compile() resp_encoded = resp.encode() connection.sendall(resp_encoded) connection.close() def parse_request(self, connection): with connection.makefile('rb') as req_file: raw_first_line = req_file.readline() first_line = str(raw_first_line, 'utf-8') method, url, version = first_line.split() headers = self.parse_headers(req_file) return HTTPRequest(method, url, version, headers, req_file) def parse_headers(self, rfile): headers = dict() while len(headers) <= max_headers: r_line = rfile.readline().decode('utf-8') if r_line == '\\n' or r_line == '' or r_line == '\\r\\n': return headers header, value = tuple(r_line.split()) headers[header] = value raise Exception('too many headers') def handle_request(self, req): if req.parsed_url.path == \"/grades\": if req.method == \"GET\": html = compile_html(req, \"html/index.html\", \"json/grades.json\") resp_headers = { \"Server\": self.name, \"Date\": str(datetime.now()), \"Content-Length\": len(html), \"Content-Type\": \"text/html; charset=utf-8\" } return HTTPResponse(200, \"OK\", self.http_v, resp_headers, html) elif req.method == \"POST\": with open(\"json/grades.json\", \"r+\") as grades_file: subjects = json.load(grades_file) try: subjects[req.query[\"subject\"][0]].append(req.query[\"mark\"][0]) except KeyError: raise Exception(\"Wrong request parameters\") grades_file.seek(0) json.dump(subjects, grades_file) grades_file.truncate() return HTTPResponse(204, \"Created\", self.http_v) else: return HTTPResponse(400, \"Bad Request\", self.http_v) if __name__ == '__main__': host = '127.0.0.1' _port = 8080 serv = HTTPServer(host, _port) try: serv.serve_forever() except KeyboardInterrupt: pass \u041a\u043e\u0434 \u043a\u043b\u0438\u0435\u043d\u0442\u0430: import os import http.client import webbrowser class HTTPClient: def __init__(self): self.conn = None def connect_to(self, ip, port): self.conn = http.client.HTTPConnection(ip, port) def post_mark(self, subj, grade): if not self.conn: raise Exception('No connection provided') self.conn.request('POST', f\"/grades?subject={subj}&mark={grade}\") serv_response = self.conn.getresponse() print(serv_response.status, serv_response.reason) def get_marks(self, subj): if not self.conn: raise Exception('No connection provided') self.conn.request('GET', f\"/grades?subject={subj}\") serv_response = self.conn.getresponse() path = \"html/client.html\" body = serv_response.read() with open(path, \"wb\") as cli_html: cli_html.write(body) webbrowser.open('file://' + os.path.realpath(path), new=2) if __name__ == \"__main__\": _ip, _port = '127.0.0.1', 8080 client = HTTPClient() while True: client.connect_to(_ip, _port) subject = input(\"\u0412\u044b\u0431\u0435\u0440\u0438\u0442\u0435 \u043f\u0440\u0435\u0434\u043c\u0435\u0442: \") choice = int(input(\"1 - \u0412\u044b\u0441\u0442\u0430\u0432\u0438\u0442\u044c(POST) \u043e\u0446\u0435\u043d\u043a\u0443\\n2 - \u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c(GET) \u043e\u0446\u0435\u043d\u043a\u0438\\n\")) if choice == 1: mark = int(input(\"\u0412\u0432\u0435\u0434\u0438\u0442\u0435 \u043e\u0446\u0435\u043d\u043a\u0443 \u043e\u0442 2(\u043d\u0435\u0443\u0434) \u0434\u043e 5(\u043e\u0442\u043b): \")) if mark < 2 or mark > 5: raise Exception('\u041e\u0446\u0435\u043d\u043a\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0431\u044b\u0442\u044c \u043e\u0442 2(\u043d\u0435\u0443\u0434) \u0434\u043e 5(\u043e\u0442\u043b)') client.post_mark(subject, mark) continue client.get_marks(subject) JSON c \u043e\u0446\u0435\u043d\u043a\u0430\u043c\u0438 { \"Math\": [\"4\", \"4\", \"5\", \"4\", \"4\", \"2\", \"5\", \"2\"], \"Geography\": [\"3\", \"4\"], \"Informatics\": [\"2\", \"5\"], \"Chemistry\": [\"2\", \"4\"], \"History\": [\"5\", \"4\", \"4\", \"2\"], \"English\": [\"4\", \"4\", \"2\", \"4\", \"2\"], \"PE\": [\"2\", \"5\"], \"Physics\": [\"5\", \"4\"] }","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 1"},{"location":"labs/lab_1/#no1","text":"","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u21161"},{"location":"labs/lab_1/#1","text":"\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0443\u044e \u0438 \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u0441\u0435\u0440\u0432\u0435\u0440\u0443 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u00abHello, server\u00bb, \u0438 \u043e\u043d\u043e \u0434\u043e\u043b\u0436\u043d\u043e \u043e\u0442\u043e\u0431\u0440\u0430\u0437\u0438\u0442\u044c\u0441\u044f \u043d\u0430 \u0441\u0442\u043e\u0440\u043e\u043d\u0435 \u0441\u0435\u0440\u0432\u0435\u0440\u0430. \u0412 \u043e\u0442\u0432\u0435\u0442 \u0441\u0435\u0440\u0432\u0435\u0440 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0443 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u00abHello, client\u00bb, \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u0434\u043e\u043b\u0436\u043d\u043e \u043e\u0442\u043e\u0431\u0440\u0430\u0437\u0438\u0442\u044c\u0441\u044f \u0443 \u043a\u043b\u0438\u0435\u043d\u0442\u0430. \u041a\u043e\u0434 \u0441\u0435\u0440\u0432\u0435\u0440\u0430: import socket socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM) socket.bind(('', 8080)) max_user = 1 response = b\"Hello, client\" while True: client_data, addr = socket.recvfrom(1024) if not client_data: break print(client_data) socket.sendto(response, addr) socket.close() \u041a\u043e\u0434 \u043a\u043b\u0438\u0435\u043d\u0442\u0430: import socket socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM) while True: message = bytes(input(), 'utf-8') socket.sendto(message, ('localhost', 8080)) response = socket.recv(1024) if not response: break print(response) socket.close()","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 1"},{"location":"labs/lab_1/#2","text":"\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0443\u044e \u0438 \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u0437\u0430\u043f\u0440\u0430\u0448\u0438\u0432\u0430\u0435\u0442 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u043c\u0430\u0442\u0435\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438, \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u043a\u043e\u0442\u043e\u0440\u043e\u0439 \u0432\u0432\u043e\u0434\u044f\u0442\u0441\u044f \u0441 \u043a\u043b\u0430\u0432\u0438\u0430\u0442\u0443\u0440\u044b. \u0421\u0435\u0440\u0432\u0435\u0440 \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u0442 \u0434\u0430\u043d\u043d\u044b\u0435 \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0443. \u0412\u0430\u0440\u0438\u0430\u043d\u0442 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438: \u041f\u043e\u0438\u0441\u043a \u043f\u043b\u043e\u0449\u0430\u0434\u0438 \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u041a\u043e\u0434 \u0441\u0435\u0440\u0432\u0435\u0440\u0430: import socket import math server_socket = socket.socket() server_socket.bind(('', 8080)) max_user = 5 server_socket.listen(max_user) while True: client_socket, addr = server_socket.accept() client_data = list(map(lambda x: int(x), client_socket.recv(1024).decode().split())) if not client_data or len(client_data) != 3: print(\"Invalid parameters for triangle area task\") client_socket.close() break S = client_data[0] * client_data[1] * math.sin(client_data[2]) client_socket.send(bytes(str(S), 'utf-8')) print(client_data) socket.close() \u041a\u043e\u0434 \u043a\u043b\u0438\u0435\u043d\u0442\u0430: import socket client_socket = socket.socket() client_socket.connect(('localhost', 8080)) print(\"Please write the lengths of 2 sides and an angle of the parallelogramm:\") client_socket.send(bytes(input(), 'utf-8')) res = client_socket.recv(1024) print(f\"Area = {res.decode()}\") client_socket.close()","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 2"},{"location":"labs/lab_1/#3","text":"\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0430\u0435\u0442\u0441\u044f \u043a \u0441\u0435\u0440\u0432\u0435\u0440\u0443, \u0438 \u0432 \u043e\u0442\u0432\u0435\u0442 \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 HTTP-\u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0435\u0435 HTML-\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0443, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0441\u0435\u0440\u0432\u0435\u0440 \u043f\u043e\u0434\u0433\u0440\u0443\u0436\u0430\u0435\u0442 \u0438\u0437 \u0444\u0430\u0439\u043b\u0430 index.html. \u041a\u043e\u0434 \u0441\u0435\u0440\u0432\u0435\u0440\u0430: import socket socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM) socket.bind(('', 8080)) max_conn_count = 5 socket.listen(max_conn_count) while True: conn_socket, addr = socket.accept() request = conn_socket.recv(1024).decode().split() if request[0] != \"GET\": conn_socket.close() print(\"Bad Gateway\") conn_socket.send(b'Response 400') conn_socket.close() break print(request) with open('index.html', 'r') as index: response = 'Response 200' print(\"OK\") conn_socket.send(response.encode('utf-8')) conn_socket.close() \u041a\u043e\u0434 \u043a\u043b\u0438\u0435\u043d\u0442\u0430: import http.client host = 'localhost' client_conn = http.client.HTTPConnection(host, 8080) client_conn.request('GET', 'index.html') response = client_conn.getresponse() print(response.read().decode()) \u041a\u043e\u0434 HTML-\u0440\u0430\u0437\u043c\u0435\u0442\u043a\u0438 <!DOCTYPE html> <html lang=\"en\"> <head> <meta charset=\"UTF-8\"> <title>WEB Lab1-3</title> </head> <body> <h1> Hello, it's html page, delivered from python socket server. </h1> </body> </html>","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 3"},{"location":"labs/lab_1/#4","text":"\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0434\u0432\u0443\u0445\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u0438\u043b\u0438 \u043c\u043d\u043e\u0433\u043e\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u0447\u0430\u0442. \u0414\u043b\u044f \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u0431\u0430\u043b\u043b\u043e\u0432 \u0440\u0435\u0430\u043b\u0438\u0437\u0443\u0439\u0442\u0435 \u043c\u043d\u043e\u0433\u043e\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u0447\u0430\u0442. \u0422\u0440\u0435\u0431\u043e\u0432\u0430\u043d\u0438\u044f: \u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 socket. \u0414\u043b\u044f \u043c\u043d\u043e\u0433\u043e\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u043e\u0433\u043e \u0447\u0430\u0442\u0430 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 threading. \u041a\u043e\u0434 \u0441\u0435\u0440\u0432\u0435\u0440\u0430: import socket import threading from copy import copy max_conn_count = 10 locker = threading.Lock() threads = [] connections = [] def threaded_handle(conn, address): while True: data = conn.recv(1024) if not data: conn.close() print(f\"{address} connection interrupted\") break msg = address[0] + \":\" + str(address[1]) + \" send a message: \" + data.decode() print(msg) with locker: conn_copy = copy(connections) for c in conn_copy: c.sendall(msg.encode('utf-8')) def main(): a_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM) a_socket.bind(('', 8080)) a_socket.listen(max_conn_count) while True: conn_socket, addr = a_socket.accept() conn_thread = threading.Thread(target=threaded_handle, args=(conn_socket, addr,)) threads.append(conn_thread) connections.append(conn_socket) conn_thread.start() if __name__ == \"__main__\": main() \u041a\u043e\u0434 \u043a\u043b\u0438\u0435\u043d\u0442\u0430: import socket import threading getting_msg, host, port = True, 'localhost', 8080 client_locker = threading.Lock() def show_chat(sock): while True: with client_locker: serv_data = sock.recv(1024) if not serv_data: with client_locker: sock.close() print(\"Connection closed\") break print(serv_data.decode()) def main_client(): client_socket = socket.socket() client_socket.connect((host, port)) chat_thread = threading.Thread(target=show_chat, args=(client_socket,)) chat_thread.start() while getting_msg: new_msg = input().encode('utf-8') client_socket.send(new_msg) chat_thread.join() if __name__ == \"__main__\": main_client()","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 4"},{"location":"labs/lab_1/#5","text":"\u041d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u043f\u0440\u043e\u0441\u0442\u043e\u0439 \u0432\u0435\u0431-\u0441\u0435\u0440\u0432\u0435\u0440 \u0434\u043b\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 GET \u0438 POST HTTP-\u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 socket \u0432 Python. \u0421\u0435\u0440\u0432\u0435\u0440 \u0434\u043e\u043b\u0436\u0435\u043d: \u041f\u0440\u0438\u043d\u044f\u0442\u044c \u0438 \u0437\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0435 \u0438 \u043e\u0446\u0435\u043d\u043a\u0435 \u043f\u043e \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0435. \u041e\u0442\u0434\u0430\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e\u0431\u043e \u0432\u0441\u0435\u0445 \u043e\u0446\u0435\u043d\u043a\u0430\u0445 \u043f\u043e \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0430\u043c \u0432 \u0432\u0438\u0434\u0435 HTML-\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b. Web-\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0430 \u0441 \u043e\u0446\u0435\u043d\u043a\u0430\u043c\u0438 \u0432\u044b\u0433\u043b\u044f\u0434\u0438\u0442 \u0442\u0430\u043a: \u041a\u043e\u0434 \u0441\u0435\u0440\u0432\u0435\u0440\u0430: import socket import json from bs4 import BeautifulSoup as bs from urllib.parse import urlparse, parse_qs from datetime import datetime max_headers = 100 class HTTPRequest: def __init__(self, method, url, version, headers, r_body): self.method = method self.url = url self.version = version self.headers = headers self.body = r_body @property def parsed_url(self): return urlparse(self.url) @property def query(self): return parse_qs(self.parsed_url.query) class HTTPResponse: def __init__(self, code, status, version, headers=None, body=None): self.code = code self.status = status self.version = version self.headers = headers self.body = body def compile(self): resp = f\"{self.version} {self.code} {self.status}\\n\" if self.headers: for header, value in self.headers.items(): resp += f\"{header}: {value}\\n\" if self.body: resp += f\"\\n{self.body}\" return resp def compile_html(req, filename, json_file): soup = bs(open(filename, 'r+'), \"html.parser\") caption = soup.find('h2', {'id': 'subj_name'}) mark_list = soup.find('ul', {'id': 'marks'}) try: subj = req.query['subject'][0] caption.string = f\"\u041e\u0446\u0435\u043d\u043a\u0438 \u043f\u043e \u043f\u0440\u0435\u0434\u043c\u0435\u0442\u0443: {subj}\" with open(json_file, 'r') as grades_file: subjects = json.load(grades_file) marks = subjects[subj] for mark in marks: mark_li = soup.new_tag('li') mark_li.string = mark mark_list.append(mark_li) return soup.prettify('utf-8').decode() except KeyError: raise Exception(\"Wrong request parameters\") class HTTPServer: def __init__(self, ip, port): self.ip = ip self.port = port self.name = \"MyHTTPServer\" self.http_v = \"HTTP/1.1\" def serve_forever(self): serv_sock = socket.socket() serv_sock.bind((self.ip, self.port)) serv_sock.listen() try: while True: conn_socket, addr = serv_sock.accept() self.serve_client(conn_socket) finally: serv_sock.close() def serve_client(self, connection): req = self.parse_request(connection) if req: resp = self.handle_request(req).compile() resp_encoded = resp.encode() connection.sendall(resp_encoded) connection.close() def parse_request(self, connection): with connection.makefile('rb') as req_file: raw_first_line = req_file.readline() first_line = str(raw_first_line, 'utf-8') method, url, version = first_line.split() headers = self.parse_headers(req_file) return HTTPRequest(method, url, version, headers, req_file) def parse_headers(self, rfile): headers = dict() while len(headers) <= max_headers: r_line = rfile.readline().decode('utf-8') if r_line == '\\n' or r_line == '' or r_line == '\\r\\n': return headers header, value = tuple(r_line.split()) headers[header] = value raise Exception('too many headers') def handle_request(self, req): if req.parsed_url.path == \"/grades\": if req.method == \"GET\": html = compile_html(req, \"html/index.html\", \"json/grades.json\") resp_headers = { \"Server\": self.name, \"Date\": str(datetime.now()), \"Content-Length\": len(html), \"Content-Type\": \"text/html; charset=utf-8\" } return HTTPResponse(200, \"OK\", self.http_v, resp_headers, html) elif req.method == \"POST\": with open(\"json/grades.json\", \"r+\") as grades_file: subjects = json.load(grades_file) try: subjects[req.query[\"subject\"][0]].append(req.query[\"mark\"][0]) except KeyError: raise Exception(\"Wrong request parameters\") grades_file.seek(0) json.dump(subjects, grades_file) grades_file.truncate() return HTTPResponse(204, \"Created\", self.http_v) else: return HTTPResponse(400, \"Bad Request\", self.http_v) if __name__ == '__main__': host = '127.0.0.1' _port = 8080 serv = HTTPServer(host, _port) try: serv.serve_forever() except KeyboardInterrupt: pass \u041a\u043e\u0434 \u043a\u043b\u0438\u0435\u043d\u0442\u0430: import os import http.client import webbrowser class HTTPClient: def __init__(self): self.conn = None def connect_to(self, ip, port): self.conn = http.client.HTTPConnection(ip, port) def post_mark(self, subj, grade): if not self.conn: raise Exception('No connection provided') self.conn.request('POST', f\"/grades?subject={subj}&mark={grade}\") serv_response = self.conn.getresponse() print(serv_response.status, serv_response.reason) def get_marks(self, subj): if not self.conn: raise Exception('No connection provided') self.conn.request('GET', f\"/grades?subject={subj}\") serv_response = self.conn.getresponse() path = \"html/client.html\" body = serv_response.read() with open(path, \"wb\") as cli_html: cli_html.write(body) webbrowser.open('file://' + os.path.realpath(path), new=2) if __name__ == \"__main__\": _ip, _port = '127.0.0.1', 8080 client = HTTPClient() while True: client.connect_to(_ip, _port) subject = input(\"\u0412\u044b\u0431\u0435\u0440\u0438\u0442\u0435 \u043f\u0440\u0435\u0434\u043c\u0435\u0442: \") choice = int(input(\"1 - \u0412\u044b\u0441\u0442\u0430\u0432\u0438\u0442\u044c(POST) \u043e\u0446\u0435\u043d\u043a\u0443\\n2 - \u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c(GET) \u043e\u0446\u0435\u043d\u043a\u0438\\n\")) if choice == 1: mark = int(input(\"\u0412\u0432\u0435\u0434\u0438\u0442\u0435 \u043e\u0446\u0435\u043d\u043a\u0443 \u043e\u0442 2(\u043d\u0435\u0443\u0434) \u0434\u043e 5(\u043e\u0442\u043b): \")) if mark < 2 or mark > 5: raise Exception('\u041e\u0446\u0435\u043d\u043a\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0431\u044b\u0442\u044c \u043e\u0442 2(\u043d\u0435\u0443\u0434) \u0434\u043e 5(\u043e\u0442\u043b)') client.post_mark(subject, mark) continue client.get_marks(subject) JSON c \u043e\u0446\u0435\u043d\u043a\u0430\u043c\u0438 { \"Math\": [\"4\", \"4\", \"5\", \"4\", \"4\", \"2\", \"5\", \"2\"], \"Geography\": [\"3\", \"4\"], \"Informatics\": [\"2\", \"5\"], \"Chemistry\": [\"2\", \"4\"], \"History\": [\"5\", \"4\", \"4\", \"2\"], \"English\": [\"4\", \"4\", \"2\", \"4\", \"2\"], \"PE\": [\"2\", \"5\"], \"Physics\": [\"5\", \"4\"] }","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 5"},{"location":"labs/lab_2/","text":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u21162 \u0421\u043f\u0438\u0441\u043e\u043a \u043e\u0442\u0435\u043b\u0435\u0439 \u2003\u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0443\u0447\u0438\u0442\u044b\u0432\u0430\u0442\u044c \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u043e\u0442\u0435\u043b\u044f, \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0430 \u043e\u0442\u0435\u043b\u044f, \u0430\u0434\u0440\u0435\u0441, \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435, \u0442\u0438\u043f\u044b \u043d\u043e\u043c\u0435\u0440\u043e\u0432, \u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c, \u0432\u043c\u0435\u0441\u0442\u0438\u043c\u043e\u0441\u0442\u044c, \u0443\u0434\u043e\u0431\u0441\u0442\u0432\u0430. \u2003\u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0439 \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b: \u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u043d\u043e\u0432\u044b\u0445 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439. \u041f\u0440\u043e\u0441\u043c\u043e\u0442\u0440 \u0438 \u0440\u0435\u0437\u0435\u0440\u0432\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043d\u043e\u043c\u0435\u0440\u043e\u0432. \u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u0434\u043e\u043b\u0436\u0435\u043d \u0438\u043c\u0435\u0442\u044c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0440\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0438 \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u044f \u0441\u0432\u043e\u0438\u0445 \u0440\u0435\u0437\u0435\u0440\u0432\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0439. \u041d\u0430\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u043e\u0442\u0437\u044b\u0432\u043e\u0432 \u043a \u043d\u043e\u043c\u0435\u0440\u0430\u043c. \u041f\u0440\u0438 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0438 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0435\u0432, \u0434\u043e\u043b\u0436\u043d\u044b \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0442\u044c\u0441\u044f \u043f\u0435\u0440\u0438\u043e\u0434 \u043f\u0440\u043e\u0436\u0438\u0432\u0430\u043d\u0438\u044f, \u0442\u0435\u043a\u0441\u0442 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u044f, \u0440\u0435\u0439\u0442\u0438\u043d\u0433 (1-10), \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0442\u043e\u0440\u0435. \u0410\u0434\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0430\u0442\u043e\u0440 \u0434\u043e\u043b\u0436\u0435\u043d \u0438\u043c\u0435\u0442\u044c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0437\u0430\u0441\u0435\u043b\u0438\u0442\u044c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0432 \u043e\u0442\u0435\u043b\u044c \u0438 \u0432\u044b\u0441\u0435\u043b\u0438\u0442\u044c \u0438\u0437 \u043e\u0442\u0435\u043b\u044f \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 Django-admin. \u0412 \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u043e\u0439 \u0447\u0430\u0441\u0442\u0438 \u0434\u043e\u043b\u0436\u043d\u0430 \u0444\u043e\u0440\u043c\u0438\u0440\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u0442\u0430\u0431\u043b\u0438\u0446\u0430, \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0430\u044e\u0449\u0430\u044f \u043f\u043e\u0441\u0442\u043e\u044f\u043b\u044c\u0446\u0435\u0432 \u043e\u0442\u0435\u043b\u044f \u0437\u0430 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0439 \u043c\u0435\u0441\u044f\u0446. \u041c\u043e\u0434\u0435\u043b\u0438 1) \u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u2003\u041c\u043e\u0434\u0435\u043b\u044c \u0441\u043b\u0443\u0436\u0438\u0442 \u0434\u043b\u044f \u043e\u0444\u043e\u0440\u043c\u043b\u0435\u043d\u0438\u044f \u0433\u043e\u0441\u0442\u044f \u0438\u043b\u0438 \u0440\u0430\u0431\u043e\u0442\u043d\u0438\u043a\u0430 \u0432 \u0441\u0438\u0441\u0442\u0435\u043c\u0443. \u0413\u0430\u043b\u043e\u0447\u043a\u0430 \u043d\u0430 \u043f\u043e\u043b\u0435 is_staff_member \u0434\u0430\u0435\u0442 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u044b\u0435 \u043f\u0440\u0430\u0432\u0430 \u043f\u0440\u043e\u0441\u043c\u043e\u0442\u0440\u0430, \u0432 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 \u043e\u0442 \u0434\u043e\u043b\u0436\u043d\u043e\u0441\u0442\u0438 \u2003\u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0432 \u0441\u0438\u0441\u0442\u0435\u043c\u0443 \u043f\u0440\u043e\u0432\u043e\u0434\u0438\u0442\u0441\u044f \u0447\u0435\u0440\u0435\u0437 \u043e\u043f\u0435\u0440\u0430\u0442\u043e\u0440\u0430 \u0441\u0430\u0439\u0442\u0430, \u0434\u043b\u044f \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 \u0434\u043e\u0441\u0442\u0430\u0442\u043e\u0447\u043d\u043e \u0443\u043a\u0430\u0437\u0430\u0442\u044c \u0434\u0430\u043d\u043d\u044b\u0435 class CustomUser(AbstractUser): phone_number = models.CharField(max_length=15, blank=True, null=True, verbose_name='\u041d\u043e\u043c\u0435\u0440 \u0442\u0435\u043b\u0435\u0444\u043e\u043d\u0430') date_of_birth = models.DateField(blank=True, null=True, verbose_name='\u0414\u0430\u0442\u0430 \u0440\u043e\u0436\u0434\u0435\u043d\u0438\u044f') is_staff_member = models.BooleanField(default=False, verbose_name='\u0421\u043e\u0442\u0440\u0443\u0434\u043d\u0438\u043a \u043e\u0442\u0435\u043b\u044f') address = models.CharField(max_length=255, blank=True, null=True, verbose_name='\u0410\u0434\u0440\u0435\u0441') class Meta: verbose_name = '\u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c' verbose_name_plural = '\u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0438' def __str__(self): return self.username 2) \u0411\u0440\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438e \u2003\u041c\u043e\u0434\u0435\u043b\u044c \u0441\u043b\u0443\u0436\u0438\u0442 \u0434\u043b\u044f \u043e\u0444\u043e\u0440\u043c\u043b\u0435\u043d\u0438\u044f \u0431\u0440\u043e\u043d\u0438 \u043d\u0430 \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u044b\u0439 \u0441\u0432\u043e\u0431\u043e\u0434\u043d\u044b\u0439 \u043d\u043e\u043c\u0435\u0440 class Booking(models.Model): user = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.CASCADE, related_name='bookings', verbose_name='\u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c') room = models.ForeignKey(Room, on_delete=models.CASCADE, verbose_name='\u041d\u043e\u043c\u0435\u0440') check_in_date = models.DateField(verbose_name='\u0414\u0430\u0442\u0430 \u0437\u0430\u0435\u0437\u0434\u0430') check_out_date = models.DateField(verbose_name='\u0414\u0430\u0442\u0430 \u0432\u044b\u0435\u0437\u0434\u0430') is_active = models.BooleanField(default=True, verbose_name='\u0410\u043a\u0442\u0438\u0432\u043d\u0430\u044f \u0431\u0440\u043e\u043d\u044c') class Meta: verbose_name = '\u0411\u0440\u043e\u043d\u044c' verbose_name_plural = '\u0411\u0440\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f' def __str__(self): return f\"\u0411\u0440\u043e\u043d\u044c {self.user.username} \u043d\u0430 {self.room}\" 3) \u041e\u0442\u0435\u043b\u0438 \u2003\u041c\u043e\u0434\u0435\u043b\u044c \u043e\u0442\u0432\u0435\u0447\u0430\u0435\u0442 \u0437\u0430 \u0432\u043d\u0435\u0441\u0435\u043d\u0438\u0435 \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u0433\u043e \u043e\u0442\u0435\u043b\u044f \u0432 \u0441\u0438\u0441\u0442\u0435\u043c\u0443. \u0412\u043b\u0430\u0434\u0435\u043b\u0435\u0446 \u0438\u043b\u0438 \u0435\u0433\u043e \u0434\u043e\u0432\u0435\u0440\u0435\u043d\u043d\u043e\u0435 \u043b\u0438\u0446\u043e \u0434\u043e\u043b\u0436\u043d\u044b \u0432\u043d\u0435\u0441\u0442\u0438 \u0441\u0432\u043e\u044e \u0433\u043e\u0441\u0442\u0438\u043d\u0438\u0446\u0443 \u0432 \u0441\u0438\u0441\u0442\u0435\u043c\u0443 \u0447\u0435\u0440\u0435\u0437 \u0430\u0434\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044e \u0441\u0430\u0439\u0442\u0430 class Hotel(models.Model): name = models.CharField(max_length=200, verbose_name='\u041d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u043e\u0442\u0435\u043b\u044f') owner = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.CASCADE, related_name='owned_hotels', verbose_name='\u0412\u043b\u0430\u0434\u0435\u043b\u0435\u0446') address = models.CharField(max_length=200, verbose_name='\u0410\u0434\u0440\u0435\u0441') description = models.TextField(blank=True, verbose_name='\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435') class Meta: verbose_name = '\u041e\u0442\u0435\u043b\u044c' verbose_name_plural = '\u041e\u0442\u0435\u043b\u0438' def __str__(self): return self.name 4) \u041d\u043e\u043c\u0435\u0440 \u2003\u042d\u0442\u0430 \u043c\u043e\u0434\u0435\u043b\u044c \u0441\u043b\u0443\u0436\u0438\u0442 \u0434\u043b\u044f \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u044f \u043d\u043e\u043c\u0435\u0440\u0430 \u043e\u0442\u0435\u043b\u044f, \u0443\u0447\u0438\u0442\u044b\u0432\u0430\u044e\u0442\u0441\u044f \u0442\u0430\u043a\u0436\u0435 \u043f\u043e\u0436\u0435\u043b\u0430\u043d\u0438\u044f \u0438 \u043f\u0440\u043e\u0441\u044c\u0431\u044b \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432, \u0435\u0441\u043b\u0438 \u043e\u043d\u0438 \u043f\u0440\u043e\u043f\u0438\u0441\u0430\u043d\u044b class Room(models.Model): hotel = models.ForeignKey(Hotel, on_delete=models.CASCADE, related_name='rooms', verbose_name='\u041e\u0442\u0435\u043b\u044c') room_type = models.ForeignKey(RoomType, on_delete=models.CASCADE, verbose_name='\u0422\u0438\u043f \u043d\u043e\u043c\u0435\u0440\u0430') price = models.DecimalField(max_digits=10, decimal_places=2, verbose_name='\u0426\u0435\u043d\u0430') capacity = models.IntegerField(verbose_name='\u0412\u043c\u0435\u0441\u0442\u0438\u043c\u043e\u0441\u0442\u044c') amenities = models.TextField(blank=True, verbose_name='\u0423\u0434\u043e\u0431\u0441\u0442\u0432\u0430') class Meta: verbose_name = '\u041d\u043e\u043c\u0435\u0440' verbose_name_plural = '\u041d\u043e\u043c\u0435\u0440\u0430' def __str__(self): return f\"{self.room_type.name} ({self.hotel.name})\" 5) \u0422\u0438\u043f \u043d\u043e\u043c\u0435\u0440\u0430 \u2003\u0412 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u0443\u044e \u0442\u0430\u0431\u043b\u0438\u0446\u0443 \u0432\u043d\u043e\u0441\u044f\u0442\u0441\u044f \u0434\u0430\u043d\u043d\u044b\u0435 \u043e \u0442\u0438\u043f\u043e\u0432\u044b\u0445 \u043d\u043e\u043c\u0435\u0440\u0430\u0445 \u043e\u0442\u0435\u043b\u044f, \u043a \u043f\u0440\u0438\u043c\u0435\u0440\u0443 \u043b\u044e\u043a\u0441-\u043d\u043e\u043c\u0435\u0440, \u043a\u043b\u0430\u0441\u0441\u0438\u0447\u0435\u0441\u043a\u0438\u0439 \u0438 \u0442.\u0434. \u0415\u0441\u043b\u0438 \u0443 \u0433\u043e\u0441\u0442\u0438\u043d\u0438\u0446\u044b \u0435\u0441\u0442\u044c \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0439 \u043d\u043e\u043c\u0435\u0440, \u043e\u043d\u0438 \u043c\u043e\u0433\u0443\u0442 \u0435\u0433\u043e \u0432\u043d\u0435\u0441\u0442\u0438, \u043e\u0431\u0440\u0430\u0442\u0438\u0432\u0448\u0438\u0441\u044c \u043a \u0430\u0434\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 class RoomType(models.Model): name = models.CharField(max_length=100, verbose_name='\u0422\u0438\u043f \u043d\u043e\u043c\u0435\u0440\u0430') description = models.TextField(blank=True, verbose_name='\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435') class Meta: verbose_name = '\u0422\u0438\u043f \u043d\u043e\u043c\u0435\u0440\u0430' verbose_name_plural = '\u0422\u0438\u043f\u044b \u043d\u043e\u043c\u0435\u0440\u043e\u0432' def __str__(self): return self.name 6) \u0411\u0440\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438e \u2003\u0412 \u044d\u0442\u043e\u0439 \u0442\u0430\u0431\u043b\u0438\u0446\u0435 \u0445\u0440\u0430\u043d\u044f\u0442\u0441\u044f \u043e\u0442\u0437\u044b\u0432\u044b \u043d\u0430 \u043e\u0442\u0435\u043b\u044c, \u043e\u0446\u0435\u043d\u043a\u0438 \u043d\u043e\u043c\u0435\u0440\u0430, \u0443\u0431\u043e\u0440\u043a\u0438 \u0438 \u0441\u0435\u0440\u0432\u0438\u0441\u0430 \u0432 \u0446\u0435\u043b\u043e\u043c class Review(models.Model): room = models.ForeignKey(Room, on_delete=models.CASCADE, related_name='reviews', verbose_name='\u041d\u043e\u043c\u0435\u0440') user = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.CASCADE, verbose_name='\u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c') comment = models.TextField(verbose_name='\u041a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0439') rating = models.IntegerField(choices=[(i, i) for i in range(1, 11)], verbose_name='\u0420\u0435\u0439\u0442\u0438\u043d\u0433') stay_start = models.DateField(verbose_name='\u041d\u0430\u0447\u0430\u043b\u043e \u043f\u0440\u043e\u0436\u0438\u0432\u0430\u043d\u0438\u044f') stay_end = models.DateField(verbose_name='\u041a\u043e\u043d\u0435\u0446 \u043f\u0440\u043e\u0436\u0438\u0432\u0430\u043d\u0438\u044f') created_at = models.DateTimeField(auto_now_add=True, verbose_name='\u0414\u0430\u0442\u0430 \u043e\u0442\u0437\u044b\u0432\u0430') class Meta: verbose_name = '\u041e\u0442\u0437\u044b\u0432' verbose_name_plural = '\u041e\u0442\u0437\u044b\u0432\u044b' def __str__(self): return f\"\u041e\u0442\u0437\u044b\u0432 \u043e\u0442 {self.user.name} \u043d\u0430 {self.room}\" \u0421\u0430\u0439\u0442 \u041d\u0430 \u044d\u0442\u043e\u0439 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0435 \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0437\u0430\u0431\u0440\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043d\u043e\u043c\u0435\u0440 \u0432 \u043e\u0442\u0435\u043b\u0435 \u0424\u043e\u0440\u043c\u0430 \u0434\u043b\u044f \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 \u0432\u044b\u0433\u043b\u044f\u0434\u0438\u0442 \u0442\u0430\u043a: \u0412\u0441\u0435 \u043e\u0442\u0435\u043b\u0438 \u043c\u043e\u0436\u043d\u043e \u043d\u0430\u0439\u0442\u0438 \u043d\u0430 \u044d\u0442\u043e\u0439 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0435 \u0410 \u0442\u0443\u0442 \u043c\u043e\u0436\u043d\u043e \u043e\u0441\u0442\u0430\u0432\u0438\u0442\u044c \u043e\u0442\u0437\u044b\u0432 \u043e \u043d\u043e\u043c\u0435\u0440\u0435 \u0438 \u043e \u0433\u043e\u0441\u0442\u0438\u043d\u0438\u0446\u0435","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 2"},{"location":"labs/lab_2/#no2","text":"","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u21162"},{"location":"labs/lab_2/#_1","text":"\u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0443\u0447\u0438\u0442\u044b\u0432\u0430\u0442\u044c \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u043e\u0442\u0435\u043b\u044f, \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0430 \u043e\u0442\u0435\u043b\u044f, \u0430\u0434\u0440\u0435\u0441, \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435, \u0442\u0438\u043f\u044b \u043d\u043e\u043c\u0435\u0440\u043e\u0432, \u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c, \u0432\u043c\u0435\u0441\u0442\u0438\u043c\u043e\u0441\u0442\u044c, \u0443\u0434\u043e\u0431\u0441\u0442\u0432\u0430. \u2003\u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0439 \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b: \u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u043d\u043e\u0432\u044b\u0445 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439. \u041f\u0440\u043e\u0441\u043c\u043e\u0442\u0440 \u0438 \u0440\u0435\u0437\u0435\u0440\u0432\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043d\u043e\u043c\u0435\u0440\u043e\u0432. \u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u0434\u043e\u043b\u0436\u0435\u043d \u0438\u043c\u0435\u0442\u044c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0440\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0438 \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u044f \u0441\u0432\u043e\u0438\u0445 \u0440\u0435\u0437\u0435\u0440\u0432\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0439. \u041d\u0430\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u043e\u0442\u0437\u044b\u0432\u043e\u0432 \u043a \u043d\u043e\u043c\u0435\u0440\u0430\u043c. \u041f\u0440\u0438 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0438 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0435\u0432, \u0434\u043e\u043b\u0436\u043d\u044b \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0442\u044c\u0441\u044f \u043f\u0435\u0440\u0438\u043e\u0434 \u043f\u0440\u043e\u0436\u0438\u0432\u0430\u043d\u0438\u044f, \u0442\u0435\u043a\u0441\u0442 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u044f, \u0440\u0435\u0439\u0442\u0438\u043d\u0433 (1-10), \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0442\u043e\u0440\u0435. \u0410\u0434\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0430\u0442\u043e\u0440 \u0434\u043e\u043b\u0436\u0435\u043d \u0438\u043c\u0435\u0442\u044c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0437\u0430\u0441\u0435\u043b\u0438\u0442\u044c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0432 \u043e\u0442\u0435\u043b\u044c \u0438 \u0432\u044b\u0441\u0435\u043b\u0438\u0442\u044c \u0438\u0437 \u043e\u0442\u0435\u043b\u044f \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 Django-admin. \u0412 \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u043e\u0439 \u0447\u0430\u0441\u0442\u0438 \u0434\u043e\u043b\u0436\u043d\u0430 \u0444\u043e\u0440\u043c\u0438\u0440\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u0442\u0430\u0431\u043b\u0438\u0446\u0430, \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0430\u044e\u0449\u0430\u044f \u043f\u043e\u0441\u0442\u043e\u044f\u043b\u044c\u0446\u0435\u0432 \u043e\u0442\u0435\u043b\u044f \u0437\u0430 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0439 \u043c\u0435\u0441\u044f\u0446.","title":"\u0421\u043f\u0438\u0441\u043e\u043a \u043e\u0442\u0435\u043b\u0435\u0439"},{"location":"labs/lab_2/#_2","text":"","title":"\u041c\u043e\u0434\u0435\u043b\u0438"},{"location":"labs/lab_2/#1","text":"\u041c\u043e\u0434\u0435\u043b\u044c \u0441\u043b\u0443\u0436\u0438\u0442 \u0434\u043b\u044f \u043e\u0444\u043e\u0440\u043c\u043b\u0435\u043d\u0438\u044f \u0433\u043e\u0441\u0442\u044f \u0438\u043b\u0438 \u0440\u0430\u0431\u043e\u0442\u043d\u0438\u043a\u0430 \u0432 \u0441\u0438\u0441\u0442\u0435\u043c\u0443. \u0413\u0430\u043b\u043e\u0447\u043a\u0430 \u043d\u0430 \u043f\u043e\u043b\u0435 is_staff_member \u0434\u0430\u0435\u0442 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u044b\u0435 \u043f\u0440\u0430\u0432\u0430 \u043f\u0440\u043e\u0441\u043c\u043e\u0442\u0440\u0430, \u0432 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 \u043e\u0442 \u0434\u043e\u043b\u0436\u043d\u043e\u0441\u0442\u0438 \u2003\u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0432 \u0441\u0438\u0441\u0442\u0435\u043c\u0443 \u043f\u0440\u043e\u0432\u043e\u0434\u0438\u0442\u0441\u044f \u0447\u0435\u0440\u0435\u0437 \u043e\u043f\u0435\u0440\u0430\u0442\u043e\u0440\u0430 \u0441\u0430\u0439\u0442\u0430, \u0434\u043b\u044f \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 \u0434\u043e\u0441\u0442\u0430\u0442\u043e\u0447\u043d\u043e \u0443\u043a\u0430\u0437\u0430\u0442\u044c \u0434\u0430\u043d\u043d\u044b\u0435 class CustomUser(AbstractUser): phone_number = models.CharField(max_length=15, blank=True, null=True, verbose_name='\u041d\u043e\u043c\u0435\u0440 \u0442\u0435\u043b\u0435\u0444\u043e\u043d\u0430') date_of_birth = models.DateField(blank=True, null=True, verbose_name='\u0414\u0430\u0442\u0430 \u0440\u043e\u0436\u0434\u0435\u043d\u0438\u044f') is_staff_member = models.BooleanField(default=False, verbose_name='\u0421\u043e\u0442\u0440\u0443\u0434\u043d\u0438\u043a \u043e\u0442\u0435\u043b\u044f') address = models.CharField(max_length=255, blank=True, null=True, verbose_name='\u0410\u0434\u0440\u0435\u0441') class Meta: verbose_name = '\u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c' verbose_name_plural = '\u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0438' def __str__(self): return self.username","title":"1) \u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f"},{"location":"labs/lab_2/#2-e","text":"\u041c\u043e\u0434\u0435\u043b\u044c \u0441\u043b\u0443\u0436\u0438\u0442 \u0434\u043b\u044f \u043e\u0444\u043e\u0440\u043c\u043b\u0435\u043d\u0438\u044f \u0431\u0440\u043e\u043d\u0438 \u043d\u0430 \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u044b\u0439 \u0441\u0432\u043e\u0431\u043e\u0434\u043d\u044b\u0439 \u043d\u043e\u043c\u0435\u0440 class Booking(models.Model): user = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.CASCADE, related_name='bookings', verbose_name='\u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c') room = models.ForeignKey(Room, on_delete=models.CASCADE, verbose_name='\u041d\u043e\u043c\u0435\u0440') check_in_date = models.DateField(verbose_name='\u0414\u0430\u0442\u0430 \u0437\u0430\u0435\u0437\u0434\u0430') check_out_date = models.DateField(verbose_name='\u0414\u0430\u0442\u0430 \u0432\u044b\u0435\u0437\u0434\u0430') is_active = models.BooleanField(default=True, verbose_name='\u0410\u043a\u0442\u0438\u0432\u043d\u0430\u044f \u0431\u0440\u043e\u043d\u044c') class Meta: verbose_name = '\u0411\u0440\u043e\u043d\u044c' verbose_name_plural = '\u0411\u0440\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f' def __str__(self): return f\"\u0411\u0440\u043e\u043d\u044c {self.user.username} \u043d\u0430 {self.room}\"","title":"2) \u0411\u0440\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438e"},{"location":"labs/lab_2/#3","text":"\u041c\u043e\u0434\u0435\u043b\u044c \u043e\u0442\u0432\u0435\u0447\u0430\u0435\u0442 \u0437\u0430 \u0432\u043d\u0435\u0441\u0435\u043d\u0438\u0435 \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u0433\u043e \u043e\u0442\u0435\u043b\u044f \u0432 \u0441\u0438\u0441\u0442\u0435\u043c\u0443. \u0412\u043b\u0430\u0434\u0435\u043b\u0435\u0446 \u0438\u043b\u0438 \u0435\u0433\u043e \u0434\u043e\u0432\u0435\u0440\u0435\u043d\u043d\u043e\u0435 \u043b\u0438\u0446\u043e \u0434\u043e\u043b\u0436\u043d\u044b \u0432\u043d\u0435\u0441\u0442\u0438 \u0441\u0432\u043e\u044e \u0433\u043e\u0441\u0442\u0438\u043d\u0438\u0446\u0443 \u0432 \u0441\u0438\u0441\u0442\u0435\u043c\u0443 \u0447\u0435\u0440\u0435\u0437 \u0430\u0434\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044e \u0441\u0430\u0439\u0442\u0430 class Hotel(models.Model): name = models.CharField(max_length=200, verbose_name='\u041d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u043e\u0442\u0435\u043b\u044f') owner = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.CASCADE, related_name='owned_hotels', verbose_name='\u0412\u043b\u0430\u0434\u0435\u043b\u0435\u0446') address = models.CharField(max_length=200, verbose_name='\u0410\u0434\u0440\u0435\u0441') description = models.TextField(blank=True, verbose_name='\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435') class Meta: verbose_name = '\u041e\u0442\u0435\u043b\u044c' verbose_name_plural = '\u041e\u0442\u0435\u043b\u0438' def __str__(self): return self.name","title":"3) \u041e\u0442\u0435\u043b\u0438"},{"location":"labs/lab_2/#4","text":"\u042d\u0442\u0430 \u043c\u043e\u0434\u0435\u043b\u044c \u0441\u043b\u0443\u0436\u0438\u0442 \u0434\u043b\u044f \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u044f \u043d\u043e\u043c\u0435\u0440\u0430 \u043e\u0442\u0435\u043b\u044f, \u0443\u0447\u0438\u0442\u044b\u0432\u0430\u044e\u0442\u0441\u044f \u0442\u0430\u043a\u0436\u0435 \u043f\u043e\u0436\u0435\u043b\u0430\u043d\u0438\u044f \u0438 \u043f\u0440\u043e\u0441\u044c\u0431\u044b \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432, \u0435\u0441\u043b\u0438 \u043e\u043d\u0438 \u043f\u0440\u043e\u043f\u0438\u0441\u0430\u043d\u044b class Room(models.Model): hotel = models.ForeignKey(Hotel, on_delete=models.CASCADE, related_name='rooms', verbose_name='\u041e\u0442\u0435\u043b\u044c') room_type = models.ForeignKey(RoomType, on_delete=models.CASCADE, verbose_name='\u0422\u0438\u043f \u043d\u043e\u043c\u0435\u0440\u0430') price = models.DecimalField(max_digits=10, decimal_places=2, verbose_name='\u0426\u0435\u043d\u0430') capacity = models.IntegerField(verbose_name='\u0412\u043c\u0435\u0441\u0442\u0438\u043c\u043e\u0441\u0442\u044c') amenities = models.TextField(blank=True, verbose_name='\u0423\u0434\u043e\u0431\u0441\u0442\u0432\u0430') class Meta: verbose_name = '\u041d\u043e\u043c\u0435\u0440' verbose_name_plural = '\u041d\u043e\u043c\u0435\u0440\u0430' def __str__(self): return f\"{self.room_type.name} ({self.hotel.name})\"","title":"4) \u041d\u043e\u043c\u0435\u0440"},{"location":"labs/lab_2/#5","text":"\u0412 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u0443\u044e \u0442\u0430\u0431\u043b\u0438\u0446\u0443 \u0432\u043d\u043e\u0441\u044f\u0442\u0441\u044f \u0434\u0430\u043d\u043d\u044b\u0435 \u043e \u0442\u0438\u043f\u043e\u0432\u044b\u0445 \u043d\u043e\u043c\u0435\u0440\u0430\u0445 \u043e\u0442\u0435\u043b\u044f, \u043a \u043f\u0440\u0438\u043c\u0435\u0440\u0443 \u043b\u044e\u043a\u0441-\u043d\u043e\u043c\u0435\u0440, \u043a\u043b\u0430\u0441\u0441\u0438\u0447\u0435\u0441\u043a\u0438\u0439 \u0438 \u0442.\u0434. \u0415\u0441\u043b\u0438 \u0443 \u0433\u043e\u0441\u0442\u0438\u043d\u0438\u0446\u044b \u0435\u0441\u0442\u044c \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0439 \u043d\u043e\u043c\u0435\u0440, \u043e\u043d\u0438 \u043c\u043e\u0433\u0443\u0442 \u0435\u0433\u043e \u0432\u043d\u0435\u0441\u0442\u0438, \u043e\u0431\u0440\u0430\u0442\u0438\u0432\u0448\u0438\u0441\u044c \u043a \u0430\u0434\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 class RoomType(models.Model): name = models.CharField(max_length=100, verbose_name='\u0422\u0438\u043f \u043d\u043e\u043c\u0435\u0440\u0430') description = models.TextField(blank=True, verbose_name='\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435') class Meta: verbose_name = '\u0422\u0438\u043f \u043d\u043e\u043c\u0435\u0440\u0430' verbose_name_plural = '\u0422\u0438\u043f\u044b \u043d\u043e\u043c\u0435\u0440\u043e\u0432' def __str__(self): return self.name","title":"5) \u0422\u0438\u043f \u043d\u043e\u043c\u0435\u0440\u0430"},{"location":"labs/lab_2/#6-e","text":"\u0412 \u044d\u0442\u043e\u0439 \u0442\u0430\u0431\u043b\u0438\u0446\u0435 \u0445\u0440\u0430\u043d\u044f\u0442\u0441\u044f \u043e\u0442\u0437\u044b\u0432\u044b \u043d\u0430 \u043e\u0442\u0435\u043b\u044c, \u043e\u0446\u0435\u043d\u043a\u0438 \u043d\u043e\u043c\u0435\u0440\u0430, \u0443\u0431\u043e\u0440\u043a\u0438 \u0438 \u0441\u0435\u0440\u0432\u0438\u0441\u0430 \u0432 \u0446\u0435\u043b\u043e\u043c class Review(models.Model): room = models.ForeignKey(Room, on_delete=models.CASCADE, related_name='reviews', verbose_name='\u041d\u043e\u043c\u0435\u0440') user = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.CASCADE, verbose_name='\u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c') comment = models.TextField(verbose_name='\u041a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0439') rating = models.IntegerField(choices=[(i, i) for i in range(1, 11)], verbose_name='\u0420\u0435\u0439\u0442\u0438\u043d\u0433') stay_start = models.DateField(verbose_name='\u041d\u0430\u0447\u0430\u043b\u043e \u043f\u0440\u043e\u0436\u0438\u0432\u0430\u043d\u0438\u044f') stay_end = models.DateField(verbose_name='\u041a\u043e\u043d\u0435\u0446 \u043f\u0440\u043e\u0436\u0438\u0432\u0430\u043d\u0438\u044f') created_at = models.DateTimeField(auto_now_add=True, verbose_name='\u0414\u0430\u0442\u0430 \u043e\u0442\u0437\u044b\u0432\u0430') class Meta: verbose_name = '\u041e\u0442\u0437\u044b\u0432' verbose_name_plural = '\u041e\u0442\u0437\u044b\u0432\u044b' def __str__(self): return f\"\u041e\u0442\u0437\u044b\u0432 \u043e\u0442 {self.user.name} \u043d\u0430 {self.room}\"","title":"6) \u0411\u0440\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438e"},{"location":"labs/lab_2/#_3","text":"\u041d\u0430 \u044d\u0442\u043e\u0439 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0435 \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0437\u0430\u0431\u0440\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043d\u043e\u043c\u0435\u0440 \u0432 \u043e\u0442\u0435\u043b\u0435 \u0424\u043e\u0440\u043c\u0430 \u0434\u043b\u044f \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 \u0432\u044b\u0433\u043b\u044f\u0434\u0438\u0442 \u0442\u0430\u043a: \u0412\u0441\u0435 \u043e\u0442\u0435\u043b\u0438 \u043c\u043e\u0436\u043d\u043e \u043d\u0430\u0439\u0442\u0438 \u043d\u0430 \u044d\u0442\u043e\u0439 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0435 \u0410 \u0442\u0443\u0442 \u043c\u043e\u0436\u043d\u043e \u043e\u0441\u0442\u0430\u0432\u0438\u0442\u044c \u043e\u0442\u0437\u044b\u0432 \u043e \u043d\u043e\u043c\u0435\u0440\u0435 \u0438 \u043e \u0433\u043e\u0441\u0442\u0438\u043d\u0438\u0446\u0435","title":"\u0421\u0430\u0439\u0442"},{"location":"labs/lab_3/","text":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u21163 \u041e\u0442\u0435\u043b\u044c \u2003\u0421\u043e\u0437\u0434\u0430\u0442\u044c \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u043d\u0443\u044e \u0441\u0438\u0441\u0442\u0435\u043c\u0443, \u043f\u0440\u0435\u0434\u043d\u0430\u0437\u043d\u0430\u0447\u0435\u043d\u043d\u0443\u044e \u0434\u043b\u044f \u0430\u0434\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0430\u0442\u043e\u0440\u0430 \u0433\u043e\u0441\u0442\u0438\u043d\u0438\u0446\u044b. \u2003\u0422\u0430\u043a\u0430\u044f \u0441\u0438\u0441\u0442\u0435\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u043e\u0431\u0435\u0441\u043f\u0435\u0447\u0438\u0432\u0430\u0442\u044c \u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u0441\u0432\u0435\u0434\u0435\u043d\u0438\u0439 \u043e\u0431 \u0438\u043c\u0435\u044e\u0449\u0438\u0445\u0441\u044f \u0432 \u0433\u043e\u0441\u0442\u0438\u043d\u0438\u0446\u0435 \u043d\u043e\u043c\u0435\u0440\u0430\u0445, \u043e \u043f\u0440\u043e\u0436\u0438\u0432\u0430\u044e\u0449\u0438\u0445 \u0432 \u0433\u043e\u0441\u0442\u0438\u043d\u0438\u0446\u0435 \u043a\u043b\u0438\u0435\u043d\u0442\u0430\u0445 \u0438 \u043e \u0441\u043b\u0443\u0436\u0430\u0449\u0438\u0445, \u0443\u0431\u0438\u0440\u0430\u044e\u0449\u0438\u0445\u0441\u044f \u0432 \u043d\u043e\u043c\u0435\u0440\u0430\u0445. \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043d\u043e\u043c\u0435\u0440\u043e\u0432 \u0432 \u0433\u043e\u0441\u0442\u0438\u043d\u0438\u0446\u0435 \u0438\u0437\u0432\u0435\u0441\u0442\u043d\u043e, \u0438 \u0438\u043c\u0435\u044e\u0442\u0441\u044f \u043d\u043e\u043c\u0435\u0440\u0430 \u0442\u0440\u0435\u0445 \u0442\u0438\u043f\u043e\u0432: \u043e\u0434\u043d\u043e\u043c\u0435\u0441\u0442\u043d\u044b\u0439, \u0434\u0432\u0443\u0445\u043c\u0435\u0441\u0442\u043d\u044b\u0439 \u0438 \u0442\u0440\u0435\u0445\u043c\u0435\u0441\u0442\u043d\u044b\u0439, \u043e\u0442\u043b\u0438\u0447\u0430\u044e\u0449\u0438\u0435\u0441\u044f \u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c\u044e \u043f\u0440\u043e\u0436\u0438\u0432\u0430\u043d\u0438\u044f \u0432 \u0441\u0443\u0442\u043a\u0438. \u0412 \u043a\u0430\u0436\u0434\u043e\u043c \u043d\u043e\u043c\u0435\u0440\u0435 \u0435\u0441\u0442\u044c \u0442\u0435\u043b\u0435\u0444\u043e\u043d. \u2003\u041e \u043a\u0430\u0436\u0434\u043e\u043c \u043f\u0440\u043e\u0436\u0438\u0432\u0430\u044e\u0449\u0435\u043c \u0434\u043e\u043b\u0436\u043d\u0430 \u0445\u0440\u0430\u043d\u0438\u0442\u044c\u0441\u044f \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0430\u044f \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f: \u043d\u043e\u043c\u0435\u0440 \u043f\u0430\u0441\u043f\u043e\u0440\u0442\u0430, \u0444\u0430\u043c\u0438\u043b\u0438\u044f, \u0438\u043c\u044f, \u043e\u0442\u0447\u0435\u0441\u0442\u0432\u043e, \u0433\u043e\u0440\u043e\u0434, \u0438\u0437 \u043a\u043e\u0442\u043e\u0440\u043e\u0433\u043e \u043e\u043d \u043f\u0440\u0438\u0431\u044b\u043b, \u0434\u0430\u0442\u0430 \u043f\u043e\u0441\u0435\u043b\u0435\u043d\u0438\u044f \u0432 \u0433\u043e\u0441\u0442\u0438\u043d\u0438\u0446\u0435, \u0432\u044b\u0434\u0435\u043b\u0435\u043d\u043d\u044b\u0439 \u0433\u043e\u0441\u0442\u0438\u043d\u0438\u0447\u043d\u044b\u0439 \u043d\u043e\u043c\u0435\u0440. \u2003\u041e \u0441\u043b\u0443\u0436\u0430\u0449\u0438\u0445 \u0433\u043e\u0441\u0442\u0438\u043d\u0438\u0446\u044b \u0434\u043e\u043b\u0436\u043d\u0430 \u0431\u044b\u0442\u044c \u0438\u0437\u0432\u0435\u0441\u0442\u043d\u0430 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u0433\u043e \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u043d\u0438\u044f: \u0444\u0430\u043c\u0438\u043b\u0438\u044f, \u0438\u043c\u044f, \u043e\u0442\u0447\u0435\u0441\u0442\u0432\u043e, \u0433\u0434\u0435 (\u044d\u0442\u0430\u0436) \u0438 \u043a\u043e\u0433\u0434\u0430 (\u0434\u0435\u043d\u044c \u043d\u0435\u0434\u0435\u043b\u0438) \u043e\u043d \u0443\u0431\u0438\u0440\u0430\u0435\u0442. \u0421\u043b\u0443\u0436\u0430\u0449\u0438\u0439 \u0433\u043e\u0441\u0442\u0438\u043d\u0438\u0446\u044b \u0443\u0431\u0438\u0440\u0430\u0435\u0442 \u0432\u0441\u0435 \u043d\u043e\u043c\u0435\u0440\u0430 \u043d\u0430 \u043e\u0434\u043d\u043e\u043c \u044d\u0442\u0430\u0436\u0435 \u0432 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u044b\u0435 \u0434\u043d\u0438 \u043d\u0435\u0434\u0435\u043b\u0438, \u043f\u0440\u0438 \u044d\u0442\u043e\u043c \u0432 \u0440\u0430\u0437\u043d\u044b\u0435 \u0434\u043d\u0438 \u043e\u043d \u043c\u043e\u0436\u0435\u0442 \u0443\u0431\u0438\u0440\u0430\u0442\u044c \u0440\u0430\u0437\u043d\u044b\u0435 \u044d\u0442\u0430\u0436\u0438. \u2003\u0420\u0430\u0431\u043e\u0442\u0430 \u0441 \u0441\u0438\u0441\u0442\u0435\u043c\u043e\u0439 \u043f\u0440\u0435\u0434\u043f\u043e\u043b\u0430\u0433\u0430\u0435\u0442 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u0439 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438: \u043e \u043a\u043b\u0438\u0435\u043d\u0442\u0430\u0445, \u043f\u0440\u043e\u0436\u0438\u0432\u0430\u0432\u0448\u0438\u0445 \u0432 \u0437\u0430\u0434\u0430\u043d\u043d\u043e\u043c \u043d\u043e\u043c\u0435\u0440\u0435, \u0432 \u0437\u0430\u0434\u0430\u043d\u043d\u044b\u0439 \u043f\u0435\u0440\u0438\u043e\u0434 \u0432\u0440\u0435\u043c\u0435\u043d\u0438; \u043e \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0435 \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432, \u043f\u0440\u0438\u0431\u044b\u0432\u0448\u0438\u0445 \u0438\u0437 \u0437\u0430\u0434\u0430\u043d\u043d\u043e\u0433\u043e \u0433\u043e\u0440\u043e\u0434\u0430, \u043e \u0442\u043e\u043c, \u043a\u0442\u043e \u0438\u0437 \u0441\u043b\u0443\u0436\u0430\u0449\u0438\u0445 \u0443\u0431\u0438\u0440\u0430\u043b \u043d\u043e\u043c\u0435\u0440 \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u043e\u0433\u043e \u043a\u043b\u0438\u0435\u043d\u0442\u0430 \u0432 \u0437\u0430\u0434\u0430\u043d\u043d\u044b\u0439 \u0434\u0435\u043d\u044c \u043d\u0435\u0434\u0435\u043b\u0438, \u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0432 \u0433\u043e\u0441\u0442\u0438\u043d\u0438\u0446\u0435 \u0441\u0432\u043e\u0431\u043e\u0434\u043d\u044b\u0445 \u043d\u043e\u043c\u0435\u0440\u043e\u0432; \u0441\u043f\u0438\u0441\u043e\u043a \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432 \u0441 \u0443\u043a\u0430\u0437\u0430\u043d\u0438\u0435\u043c \u043c\u0435\u0441\u0442\u0430 \u0436\u0438\u0442\u0435\u043b\u044c\u0441\u0442\u0432\u0430, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043f\u0440\u043e\u0436\u0438\u0432\u0430\u043b\u0438 \u0432 \u0442\u0435 \u0436\u0435 \u0434\u043d\u0438, \u0447\u0442\u043e \u0438 \u0437\u0430\u0434\u0430\u043d\u043d\u044b\u0439 \u043a\u043b\u0438\u0435\u043d\u0442, \u0432 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u044b\u0439 \u043f\u0435\u0440\u0438\u043e\u0434 \u0432\u0440\u0435\u043c\u0435\u043d\u0438. \u2003\u0410\u0434\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0430\u0442\u043e\u0440 \u0434\u043e\u043b\u0436\u0435\u043d \u0438\u043c\u0435\u0442\u044c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438: \u043f\u0440\u0438\u043d\u044f\u0442\u044c \u043d\u0430 \u0440\u0430\u0431\u043e\u0442\u0443 \u0438\u043b\u0438 \u0443\u0432\u043e\u043b\u0438\u0442\u044c \u0441\u043b\u0443\u0436\u0430\u0449\u0435\u0433\u043e \u0433\u043e\u0441\u0442\u0438\u043d\u0438\u0446\u044b; \u0438\u0437\u043c\u0435\u043d\u0438\u0442\u044c \u0440\u0430\u0441\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0440\u0430\u0431\u043e\u0442\u044b \u0441\u043b\u0443\u0436\u0430\u0449\u0435\u0433\u043e; \u043f\u043e\u0441\u0435\u043b\u0438\u0442\u044c \u0438\u043b\u0438 \u0432\u044b\u0441\u0435\u043b\u0438\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442\u0430. \u2003\u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043f\u0440\u0435\u0434\u0443\u0441\u043c\u043e\u0442\u0440\u0435\u0442\u044c \u0442\u0430\u043a\u0436\u0435 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u0432\u044b\u0434\u0430\u0447\u0438 \u043e\u0442\u0447\u0435\u0442\u0430 \u043e \u0440\u0430\u0431\u043e\u0442\u0435 \u0433\u043e\u0441\u0442\u0438\u043d\u0438\u0446\u044b \u0437\u0430 \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u0439 \u043a\u0432\u0430\u0440\u0442\u0430\u043b \u0442\u0435\u043a\u0443\u0449\u0435\u0433\u043e \u0433\u043e\u0434\u0430. \u0422\u0430\u043a\u043e\u0439 \u043e\u0442\u0447\u0435\u0442 \u0434\u043e\u043b\u0436\u0435\u043d \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0442\u044c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u0441\u0432\u0435\u0434\u0435\u043d\u0438\u044f: \u0447\u0438\u0441\u043b\u043e \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432 \u0437\u0430 \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u0439 \u043f\u0435\u0440\u0438\u043e\u0434 \u0432 \u043a\u0430\u0436\u0434\u043e\u043c \u043d\u043e\u043c\u0435\u0440\u0435; \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043d\u043e\u043c\u0435\u0440\u043e\u0432 \u043d\u0435 \u043a\u0430\u0436\u0434\u043e\u043c \u044d\u0442\u0430\u0436\u0435; \u043e\u0431\u0449\u0430\u044f \u0441\u0443\u043c\u043c\u0430 \u0434\u043e\u0445\u043e\u0434\u0430 \u0437\u0430 \u043a\u0430\u0436\u0434\u044b\u0439 \u043d\u043e\u043c\u0435\u0440; \u0441\u0443\u043c\u043c\u0430\u0440\u043d\u044b\u0439 \u0434\u043e\u0445\u043e\u0434 \u043f\u043e \u0432\u0441\u0435\u0439 \u0433\u043e\u0441\u0442\u0438\u043d\u0438\u0446\u0435. \u0421\u0445\u0435\u043c\u0430 \u0431\u0430\u0437\u044b \u0434\u0430\u043d\u043d\u044b\u0445 \u041c\u043e\u0434\u0435\u043b\u0438 \u041c\u043e\u0434\u0435\u043b\u044c \u043f\u0440\u043e\u0444\u0438\u043b\u044f \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430 class UserProfile(models.Model): user = models.OneToOneField(User,on_delete=models.CASCADE, related_name=\"profile\") is_staff_member = models.BooleanField(default=False, verbose_name='\u0421\u043e\u0442\u0440\u0443\u0434\u043d\u0438\u043a \u043e\u0442\u0435\u043b\u044f') passport_number = models.CharField(max_length=20, unique=True, verbose_name='\u041d\u043e\u043c\u0435\u0440 \u043f\u0430\u0441\u043f\u043e\u0440\u0442\u0430') last_name = models.CharField(max_length=100, verbose_name='\u0424\u0430\u043c\u0438\u043b\u0438\u044f') first_name = models.CharField(max_length=100, verbose_name='\u0418\u043c\u044f') middle_name = models.CharField(max_length=100, blank=True, null=True, verbose_name='\u041e\u0442\u0447\u0435\u0441\u0442\u0432\u043e') city = models.CharField(max_length=100, verbose_name='\u0413\u043e\u0440\u043e\u0434') bookings = models.ManyToManyField(\"booking.Booking\", blank=True, null=True, related_name=\"user_profile\", verbose_name='\u0411\u0440\u043e\u043d\u0438') \u041c\u043e\u0434\u0435\u043b\u044c \u0434\u043b\u044f \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 \u0431\u0440\u043e\u043d\u0435\u0439 class Booking(models.Model): book_date = models.DateField(verbose_name='\u0414\u0430\u0442\u0430 \u0431\u0440\u043e\u043d\u0438') prepayment = models.IntegerField(verbose_name='\u041f\u0440\u0435\u0434\u043e\u043f\u043b\u0430\u0442\u0430') night_count = models.IntegerField(default=1, verbose_name='\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043d\u043e\u0447\u0435\u0439') guest_count = models.IntegerField(default=1, verbose_name='\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0433\u043e\u0441\u0442\u0435\u0439') client_preference = models.CharField(max_length=50, verbose_name='\u041f\u0440\u0435\u0434\u043f\u043e\u0447\u0442\u0435\u043d\u0438\u044f \u043a\u043b\u0438\u0435\u043d\u0442\u0430') room_id = models.ForeignKey(Room, on_delete=models.CASCADE, verbose_name='\u041a\u043e\u043c\u043d\u0430\u0442\u0430') guest_id = models.ForeignKey(UserProfile, on_delete=models.CASCADE, blank=True, null=True, verbose_name='\u0413\u043e\u0441\u0442\u044c') statuses = [ (\"reg\", \"\u0417\u0430\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u043d\u0430\"), (\"conf\", \"\u041f\u043e\u0434\u0442\u0432\u0435\u0440\u0436\u0434\u0435\u043d\u0430\"), (\"done\",\"\u0417\u0430\u0432\u0435\u0440\u0448\u0435\u043d\u0430\"), (\"can\", \"\u041e\u0442\u043c\u0435\u043d\u0435\u043d\u0430\") ] status = models.CharField(max_length = 20, choices=statuses, verbose_name='\u0421\u0442\u0430\u0442\u0443\u0441') \u041c\u043e\u0434\u0435\u043b\u0438 \u0434\u043b\u044f \u0442\u0438\u043f\u0430 \u043a\u043e\u043c\u043d\u0430\u0442\u044b \u0438 \u044d\u0442\u0430\u0436\u0430 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0435\u043d\u043d\u043e class RoomType(models.Model): room_category = models.CharField(max_length=50, primary_key=True, verbose_name='\u041a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u044f \u043d\u043e\u043c\u0435\u0440\u0430') night_cost = models.IntegerField(default=0, verbose_name='\u0421\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c \u0437\u0430 \u043d\u043e\u0447\u044c') guest_count = models.IntegerField(default=2, verbose_name='\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0441\u043f\u0430\u043b\u044c\u043d\u044b\u0445 \u043c\u0435\u0441\u0442') description = models.CharField(max_length=100, verbose_name='\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435') class Floor(models.Model): fix_date = models.DateField(auto_now=True, verbose_name='\u0414\u0430\u0442\u0430 \u0440\u0435\u043c\u043e\u043d\u0442\u0430') clean_date = models.DateField(auto_now=True, verbose_name='\u0414\u0430\u0442\u0430 \u0443\u0431\u043e\u0440\u043a\u0438') rooms_count = models.IntegerField(default=0, verbose_name='\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043d\u043e\u043c\u0435\u0440\u043e\u0432') cleaner = models.ManyToManyField(\"staff.Employee\", related_name=\"cleaner\", verbose_name='\u0423\u0431\u043e\u0440\u0449\u0438\u043a') \u041c\u043e\u0434\u0435\u043b\u044c \u0434\u043b\u044f \u043d\u043e\u043c\u0435\u0440\u0430 \u043e\u0442\u0435\u043b\u044f class Room(models.Model): room_category = models.ForeignKey(RoomType, on_delete=models.CASCADE, verbose_name='\u041a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u044f \u043d\u043e\u043c\u0435\u0440\u0430') floor = models.ForeignKey(Floor, on_delete=models.CASCADE, verbose_name='\u042d\u0442\u0430\u0436') phone = models.IntegerField(default=0, verbose_name='\u0422\u0435\u043b\u0435\u0444\u043e\u043d') is_occupied = models.BooleanField(default=False, verbose_name='\u0417\u0430\u043d\u044f\u0442\u043e\u0441\u0442\u044c \u043d\u043e\u043c\u0435\u0440\u0430') is_active = models.BooleanField(default=True, verbose_name='\u0413\u043e\u0442\u043e\u0432\u043d\u043e\u0441\u0442\u044c \u043d\u043e\u043c\u0435\u0440\u0430') guest_count = models.IntegerField(default=2, verbose_name='\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0433\u043e\u0441\u0442\u0435\u0439') description = models.CharField(max_length=100, verbose_name='\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435') \u041c\u043e\u0434\u0435\u043b\u044c \u0434\u043b\u044f \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 \u0443\u0431\u043e\u0440\u043e\u043a \u044d\u0442\u0430\u0436\u0430 class RoomClean(models.Model): complaints = models.CharField(max_length=50, verbose_name='\u0416\u0430\u043b\u043e\u0431\u044b') clean_mark = models.IntegerField(default=5, verbose_name='\u041e\u0446\u0435\u043d\u043a\u0430') clean_date = models.DateField(auto_now_add=True, verbose_name='\u0414\u0430\u0442\u0430 \u0443\u0431\u043e\u0440\u043a\u0438') floor = models.ForeignKey(Floor, on_delete=models.CASCADE, verbose_name='\u042d\u0442\u0430\u0436') worker_id = models.ForeignKey(Employee, blank=True, null=True, on_delete=models.CASCADE, verbose_name='\u0423\u0431\u043e\u0440\u0449\u0438\u043a') \u0410 \u0442\u0430\u043a\u0436\u0435 \u043c\u043e\u0434\u0435\u043b\u044c \u0434\u043b\u044f \u0441\u043e\u0442\u0440\u0443\u0434\u043d\u0438\u043a\u043e\u0432 class Employee(models.Model): passport = models.CharField(max_length=50, verbose_name='\u041f\u0430\u0441\u043f\u043e\u0440\u0442') full_name = models.CharField(max_length=50, verbose_name='\u0424\u0418\u041e') employee_date = models.DateField(auto_now_add=True, verbose_name='\u0414\u0430\u0442\u0430 \u0442\u0440\u0443\u0434\u043e\u0443\u0441\u0442\u0440\u043e\u0439\u0441\u0442\u0432\u0430') fire_date = models.DateField(null=True, blank=True, verbose_name='\u0414\u0430\u0442\u0430 \u0443\u0432\u043e\u043b\u044c\u043d\u0435\u043d\u0438\u044f') salary = models.IntegerField(verbose_name='\u041e\u043a\u043b\u0430\u0434') rank = models.CharField(max_length=50, verbose_name='\u0414\u043e\u043b\u0436\u043d\u043e\u0441\u0442\u044c') \u041e\u0442\u0447\u0435\u0442\u044b 1) \u041e \u043a\u043b\u0438\u0435\u043d\u0442\u0430\u0445, \u043f\u0440\u043e\u0436\u0438\u0432\u0430\u0432\u0448\u0438\u0445 \u0432 \u0437\u0430\u0434\u0430\u043d\u043d\u043e\u043c \u043d\u043e\u043c\u0435\u0440\u0435, \u0432 \u0437\u0430\u0434\u0430\u043d\u043d\u044b\u0439 \u043f\u0435\u0440\u0438\u043e\u0434 \u0432\u0440\u0435\u043c\u0435\u043d\u0438 URL: /api/books/get_books/ Method: GET Auth required: YES @api_view([\"GET\"]) @csrf_exempt def get_books(request): books = Booking.objects.all().order_by('book_date') serializer = BookingSerializer(books, many=True) return JsonResponse({'books': serializer.data}, safe=False, status=status.HTTP_200_OK) 2) \u041e \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0435 \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432, \u043f\u0440\u0438\u0431\u044b\u0432\u0448\u0438\u0445 \u0438\u0437 \u0437\u0430\u0434\u0430\u043d\u043d\u043e\u0433\u043e \u0433\u043e\u0440\u043e\u0434\u0430 URL: /api/accounts/get_guests/ Method: GET Auth required: YES @api_view([\"GET\"]) @csrf_exempt def get_guests(request): city = request.query_params.get('city') guests = UserProfile.objects.filter(city=city) serializer = UserProfileSerializer(guests, many=True) return JsonResponse({'count': len(serializer.data)}, safe=False, status=status.HTTP_200_OK) 3) \u041e \u0442\u043e\u043c, \u043a\u0442\u043e \u0438\u0437 \u0441\u043b\u0443\u0436\u0430\u0449\u0438\u0445 \u0443\u0431\u0438\u0440\u0430\u043b \u043d\u043e\u043c\u0435\u0440 \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u043e\u0433\u043e \u043a\u043b\u0438\u0435\u043d\u0442\u0430 \u0432 \u0437\u0430\u0434\u0430\u043d\u043d\u044b\u0439 \u0434\u0435\u043d\u044c \u043d\u0435\u0434\u0435\u043b\u0438 URL: /api/books/get_books/ Method: GET Auth required: YES @api_view([\"GET\"]) @csrf_exempt def get_books(request): books = Booking.objects.all().order_by('book_date') serializer = BookingSerializer(books, many=True) return JsonResponse({'books': serializer.data}, safe=False, status=status.HTTP_200_OK) 4) \u0421\u043a\u043e\u043b\u044c\u043a\u043e \u0432 \u0433\u043e\u0441\u0442\u0438\u043d\u0438\u0446\u0435 \u0441\u0432\u043e\u0431\u043e\u0434\u043d\u044b\u0445 \u043d\u043e\u043c\u0435\u0440\u043e\u0432 URL: /api/hotel/get_empty_rooms/ Method: GET Auth required: YES @api_view([\"GET\"]) @csrf_exempt def get_empty_rooms(request): rooms = Room.objects.filter(is_occupied=True) serializer = RoomSerializer(rooms, many=True) return JsonResponse({'rooms': len(serializer.data)}, safe=False, status=status.HTTP_200_OK) 5) \u0441\u043f\u0438\u0441\u043e\u043a \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432 \u0441 \u0443\u043a\u0430\u0437\u0430\u043d\u0438\u0435\u043c \u043c\u0435\u0441\u0442\u0430 \u0436\u0438\u0442\u0435\u043b\u044c\u0441\u0442\u0432\u0430, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043f\u0440\u043e\u0436\u0438\u0432\u0430\u043b\u0438 \u0432 \u0442\u0435 \u0436\u0435 \u0434\u043d\u0438, \u0447\u0442\u043e \u0438 \u0437\u0430\u0434\u0430\u043d\u043d\u044b\u0439 \u043a\u043b\u0438\u0435\u043d\u0442, \u0432 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u044b\u0439 \u043f\u0435\u0440\u0438\u043e\u0434 \u0432\u0440\u0435\u043c\u0435\u043d\u0438 URL: /api/accounts/get_guests_on_neighbour/ Method: GET Auth required: YES @api_view([\"GET\"]) @csrf_exempt def get_guests_on_neighbour(request): name = request.query_params.get('name') guests = UserProfile.objects.get(last_name=name) dates = Booking.objects.get(guest_id=guests).book_date other_books = Booking.objects.filter(book_date=dates) data = {'guests': []} for book in other_books: data['guests'].append([book.guest_id.last_name, book.guest_id.city]) return JsonResponse(data, safe=False, status=status.HTTP_200_OK)","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 3"},{"location":"labs/lab_3/#no3","text":"","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u21163"},{"location":"labs/lab_3/#_1","text":"\u0421\u043e\u0437\u0434\u0430\u0442\u044c \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u043d\u0443\u044e \u0441\u0438\u0441\u0442\u0435\u043c\u0443, \u043f\u0440\u0435\u0434\u043d\u0430\u0437\u043d\u0430\u0447\u0435\u043d\u043d\u0443\u044e \u0434\u043b\u044f \u0430\u0434\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0430\u0442\u043e\u0440\u0430 \u0433\u043e\u0441\u0442\u0438\u043d\u0438\u0446\u044b. \u2003\u0422\u0430\u043a\u0430\u044f \u0441\u0438\u0441\u0442\u0435\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u043e\u0431\u0435\u0441\u043f\u0435\u0447\u0438\u0432\u0430\u0442\u044c \u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u0441\u0432\u0435\u0434\u0435\u043d\u0438\u0439 \u043e\u0431 \u0438\u043c\u0435\u044e\u0449\u0438\u0445\u0441\u044f \u0432 \u0433\u043e\u0441\u0442\u0438\u043d\u0438\u0446\u0435 \u043d\u043e\u043c\u0435\u0440\u0430\u0445, \u043e \u043f\u0440\u043e\u0436\u0438\u0432\u0430\u044e\u0449\u0438\u0445 \u0432 \u0433\u043e\u0441\u0442\u0438\u043d\u0438\u0446\u0435 \u043a\u043b\u0438\u0435\u043d\u0442\u0430\u0445 \u0438 \u043e \u0441\u043b\u0443\u0436\u0430\u0449\u0438\u0445, \u0443\u0431\u0438\u0440\u0430\u044e\u0449\u0438\u0445\u0441\u044f \u0432 \u043d\u043e\u043c\u0435\u0440\u0430\u0445. \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043d\u043e\u043c\u0435\u0440\u043e\u0432 \u0432 \u0433\u043e\u0441\u0442\u0438\u043d\u0438\u0446\u0435 \u0438\u0437\u0432\u0435\u0441\u0442\u043d\u043e, \u0438 \u0438\u043c\u0435\u044e\u0442\u0441\u044f \u043d\u043e\u043c\u0435\u0440\u0430 \u0442\u0440\u0435\u0445 \u0442\u0438\u043f\u043e\u0432: \u043e\u0434\u043d\u043e\u043c\u0435\u0441\u0442\u043d\u044b\u0439, \u0434\u0432\u0443\u0445\u043c\u0435\u0441\u0442\u043d\u044b\u0439 \u0438 \u0442\u0440\u0435\u0445\u043c\u0435\u0441\u0442\u043d\u044b\u0439, \u043e\u0442\u043b\u0438\u0447\u0430\u044e\u0449\u0438\u0435\u0441\u044f \u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c\u044e \u043f\u0440\u043e\u0436\u0438\u0432\u0430\u043d\u0438\u044f \u0432 \u0441\u0443\u0442\u043a\u0438. \u0412 \u043a\u0430\u0436\u0434\u043e\u043c \u043d\u043e\u043c\u0435\u0440\u0435 \u0435\u0441\u0442\u044c \u0442\u0435\u043b\u0435\u0444\u043e\u043d. \u2003\u041e \u043a\u0430\u0436\u0434\u043e\u043c \u043f\u0440\u043e\u0436\u0438\u0432\u0430\u044e\u0449\u0435\u043c \u0434\u043e\u043b\u0436\u043d\u0430 \u0445\u0440\u0430\u043d\u0438\u0442\u044c\u0441\u044f \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0430\u044f \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f: \u043d\u043e\u043c\u0435\u0440 \u043f\u0430\u0441\u043f\u043e\u0440\u0442\u0430, \u0444\u0430\u043c\u0438\u043b\u0438\u044f, \u0438\u043c\u044f, \u043e\u0442\u0447\u0435\u0441\u0442\u0432\u043e, \u0433\u043e\u0440\u043e\u0434, \u0438\u0437 \u043a\u043e\u0442\u043e\u0440\u043e\u0433\u043e \u043e\u043d \u043f\u0440\u0438\u0431\u044b\u043b, \u0434\u0430\u0442\u0430 \u043f\u043e\u0441\u0435\u043b\u0435\u043d\u0438\u044f \u0432 \u0433\u043e\u0441\u0442\u0438\u043d\u0438\u0446\u0435, \u0432\u044b\u0434\u0435\u043b\u0435\u043d\u043d\u044b\u0439 \u0433\u043e\u0441\u0442\u0438\u043d\u0438\u0447\u043d\u044b\u0439 \u043d\u043e\u043c\u0435\u0440. \u2003\u041e \u0441\u043b\u0443\u0436\u0430\u0449\u0438\u0445 \u0433\u043e\u0441\u0442\u0438\u043d\u0438\u0446\u044b \u0434\u043e\u043b\u0436\u043d\u0430 \u0431\u044b\u0442\u044c \u0438\u0437\u0432\u0435\u0441\u0442\u043d\u0430 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u0433\u043e \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u043d\u0438\u044f: \u0444\u0430\u043c\u0438\u043b\u0438\u044f, \u0438\u043c\u044f, \u043e\u0442\u0447\u0435\u0441\u0442\u0432\u043e, \u0433\u0434\u0435 (\u044d\u0442\u0430\u0436) \u0438 \u043a\u043e\u0433\u0434\u0430 (\u0434\u0435\u043d\u044c \u043d\u0435\u0434\u0435\u043b\u0438) \u043e\u043d \u0443\u0431\u0438\u0440\u0430\u0435\u0442. \u0421\u043b\u0443\u0436\u0430\u0449\u0438\u0439 \u0433\u043e\u0441\u0442\u0438\u043d\u0438\u0446\u044b \u0443\u0431\u0438\u0440\u0430\u0435\u0442 \u0432\u0441\u0435 \u043d\u043e\u043c\u0435\u0440\u0430 \u043d\u0430 \u043e\u0434\u043d\u043e\u043c \u044d\u0442\u0430\u0436\u0435 \u0432 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u044b\u0435 \u0434\u043d\u0438 \u043d\u0435\u0434\u0435\u043b\u0438, \u043f\u0440\u0438 \u044d\u0442\u043e\u043c \u0432 \u0440\u0430\u0437\u043d\u044b\u0435 \u0434\u043d\u0438 \u043e\u043d \u043c\u043e\u0436\u0435\u0442 \u0443\u0431\u0438\u0440\u0430\u0442\u044c \u0440\u0430\u0437\u043d\u044b\u0435 \u044d\u0442\u0430\u0436\u0438. \u2003\u0420\u0430\u0431\u043e\u0442\u0430 \u0441 \u0441\u0438\u0441\u0442\u0435\u043c\u043e\u0439 \u043f\u0440\u0435\u0434\u043f\u043e\u043b\u0430\u0433\u0430\u0435\u0442 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u0439 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438: \u043e \u043a\u043b\u0438\u0435\u043d\u0442\u0430\u0445, \u043f\u0440\u043e\u0436\u0438\u0432\u0430\u0432\u0448\u0438\u0445 \u0432 \u0437\u0430\u0434\u0430\u043d\u043d\u043e\u043c \u043d\u043e\u043c\u0435\u0440\u0435, \u0432 \u0437\u0430\u0434\u0430\u043d\u043d\u044b\u0439 \u043f\u0435\u0440\u0438\u043e\u0434 \u0432\u0440\u0435\u043c\u0435\u043d\u0438; \u043e \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0435 \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432, \u043f\u0440\u0438\u0431\u044b\u0432\u0448\u0438\u0445 \u0438\u0437 \u0437\u0430\u0434\u0430\u043d\u043d\u043e\u0433\u043e \u0433\u043e\u0440\u043e\u0434\u0430, \u043e \u0442\u043e\u043c, \u043a\u0442\u043e \u0438\u0437 \u0441\u043b\u0443\u0436\u0430\u0449\u0438\u0445 \u0443\u0431\u0438\u0440\u0430\u043b \u043d\u043e\u043c\u0435\u0440 \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u043e\u0433\u043e \u043a\u043b\u0438\u0435\u043d\u0442\u0430 \u0432 \u0437\u0430\u0434\u0430\u043d\u043d\u044b\u0439 \u0434\u0435\u043d\u044c \u043d\u0435\u0434\u0435\u043b\u0438, \u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0432 \u0433\u043e\u0441\u0442\u0438\u043d\u0438\u0446\u0435 \u0441\u0432\u043e\u0431\u043e\u0434\u043d\u044b\u0445 \u043d\u043e\u043c\u0435\u0440\u043e\u0432; \u0441\u043f\u0438\u0441\u043e\u043a \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432 \u0441 \u0443\u043a\u0430\u0437\u0430\u043d\u0438\u0435\u043c \u043c\u0435\u0441\u0442\u0430 \u0436\u0438\u0442\u0435\u043b\u044c\u0441\u0442\u0432\u0430, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043f\u0440\u043e\u0436\u0438\u0432\u0430\u043b\u0438 \u0432 \u0442\u0435 \u0436\u0435 \u0434\u043d\u0438, \u0447\u0442\u043e \u0438 \u0437\u0430\u0434\u0430\u043d\u043d\u044b\u0439 \u043a\u043b\u0438\u0435\u043d\u0442, \u0432 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u044b\u0439 \u043f\u0435\u0440\u0438\u043e\u0434 \u0432\u0440\u0435\u043c\u0435\u043d\u0438. \u2003\u0410\u0434\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0430\u0442\u043e\u0440 \u0434\u043e\u043b\u0436\u0435\u043d \u0438\u043c\u0435\u0442\u044c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438: \u043f\u0440\u0438\u043d\u044f\u0442\u044c \u043d\u0430 \u0440\u0430\u0431\u043e\u0442\u0443 \u0438\u043b\u0438 \u0443\u0432\u043e\u043b\u0438\u0442\u044c \u0441\u043b\u0443\u0436\u0430\u0449\u0435\u0433\u043e \u0433\u043e\u0441\u0442\u0438\u043d\u0438\u0446\u044b; \u0438\u0437\u043c\u0435\u043d\u0438\u0442\u044c \u0440\u0430\u0441\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0440\u0430\u0431\u043e\u0442\u044b \u0441\u043b\u0443\u0436\u0430\u0449\u0435\u0433\u043e; \u043f\u043e\u0441\u0435\u043b\u0438\u0442\u044c \u0438\u043b\u0438 \u0432\u044b\u0441\u0435\u043b\u0438\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442\u0430. \u2003\u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043f\u0440\u0435\u0434\u0443\u0441\u043c\u043e\u0442\u0440\u0435\u0442\u044c \u0442\u0430\u043a\u0436\u0435 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u0432\u044b\u0434\u0430\u0447\u0438 \u043e\u0442\u0447\u0435\u0442\u0430 \u043e \u0440\u0430\u0431\u043e\u0442\u0435 \u0433\u043e\u0441\u0442\u0438\u043d\u0438\u0446\u044b \u0437\u0430 \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u0439 \u043a\u0432\u0430\u0440\u0442\u0430\u043b \u0442\u0435\u043a\u0443\u0449\u0435\u0433\u043e \u0433\u043e\u0434\u0430. \u0422\u0430\u043a\u043e\u0439 \u043e\u0442\u0447\u0435\u0442 \u0434\u043e\u043b\u0436\u0435\u043d \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0442\u044c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u0441\u0432\u0435\u0434\u0435\u043d\u0438\u044f: \u0447\u0438\u0441\u043b\u043e \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432 \u0437\u0430 \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u0439 \u043f\u0435\u0440\u0438\u043e\u0434 \u0432 \u043a\u0430\u0436\u0434\u043e\u043c \u043d\u043e\u043c\u0435\u0440\u0435; \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043d\u043e\u043c\u0435\u0440\u043e\u0432 \u043d\u0435 \u043a\u0430\u0436\u0434\u043e\u043c \u044d\u0442\u0430\u0436\u0435; \u043e\u0431\u0449\u0430\u044f \u0441\u0443\u043c\u043c\u0430 \u0434\u043e\u0445\u043e\u0434\u0430 \u0437\u0430 \u043a\u0430\u0436\u0434\u044b\u0439 \u043d\u043e\u043c\u0435\u0440; \u0441\u0443\u043c\u043c\u0430\u0440\u043d\u044b\u0439 \u0434\u043e\u0445\u043e\u0434 \u043f\u043e \u0432\u0441\u0435\u0439 \u0433\u043e\u0441\u0442\u0438\u043d\u0438\u0446\u0435.","title":"\u041e\u0442\u0435\u043b\u044c"},{"location":"labs/lab_3/#_2","text":"","title":"\u0421\u0445\u0435\u043c\u0430 \u0431\u0430\u0437\u044b \u0434\u0430\u043d\u043d\u044b\u0445"},{"location":"labs/lab_3/#_3","text":"\u041c\u043e\u0434\u0435\u043b\u044c \u043f\u0440\u043e\u0444\u0438\u043b\u044f \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430 class UserProfile(models.Model): user = models.OneToOneField(User,on_delete=models.CASCADE, related_name=\"profile\") is_staff_member = models.BooleanField(default=False, verbose_name='\u0421\u043e\u0442\u0440\u0443\u0434\u043d\u0438\u043a \u043e\u0442\u0435\u043b\u044f') passport_number = models.CharField(max_length=20, unique=True, verbose_name='\u041d\u043e\u043c\u0435\u0440 \u043f\u0430\u0441\u043f\u043e\u0440\u0442\u0430') last_name = models.CharField(max_length=100, verbose_name='\u0424\u0430\u043c\u0438\u043b\u0438\u044f') first_name = models.CharField(max_length=100, verbose_name='\u0418\u043c\u044f') middle_name = models.CharField(max_length=100, blank=True, null=True, verbose_name='\u041e\u0442\u0447\u0435\u0441\u0442\u0432\u043e') city = models.CharField(max_length=100, verbose_name='\u0413\u043e\u0440\u043e\u0434') bookings = models.ManyToManyField(\"booking.Booking\", blank=True, null=True, related_name=\"user_profile\", verbose_name='\u0411\u0440\u043e\u043d\u0438') \u041c\u043e\u0434\u0435\u043b\u044c \u0434\u043b\u044f \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 \u0431\u0440\u043e\u043d\u0435\u0439 class Booking(models.Model): book_date = models.DateField(verbose_name='\u0414\u0430\u0442\u0430 \u0431\u0440\u043e\u043d\u0438') prepayment = models.IntegerField(verbose_name='\u041f\u0440\u0435\u0434\u043e\u043f\u043b\u0430\u0442\u0430') night_count = models.IntegerField(default=1, verbose_name='\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043d\u043e\u0447\u0435\u0439') guest_count = models.IntegerField(default=1, verbose_name='\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0433\u043e\u0441\u0442\u0435\u0439') client_preference = models.CharField(max_length=50, verbose_name='\u041f\u0440\u0435\u0434\u043f\u043e\u0447\u0442\u0435\u043d\u0438\u044f \u043a\u043b\u0438\u0435\u043d\u0442\u0430') room_id = models.ForeignKey(Room, on_delete=models.CASCADE, verbose_name='\u041a\u043e\u043c\u043d\u0430\u0442\u0430') guest_id = models.ForeignKey(UserProfile, on_delete=models.CASCADE, blank=True, null=True, verbose_name='\u0413\u043e\u0441\u0442\u044c') statuses = [ (\"reg\", \"\u0417\u0430\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u043d\u0430\"), (\"conf\", \"\u041f\u043e\u0434\u0442\u0432\u0435\u0440\u0436\u0434\u0435\u043d\u0430\"), (\"done\",\"\u0417\u0430\u0432\u0435\u0440\u0448\u0435\u043d\u0430\"), (\"can\", \"\u041e\u0442\u043c\u0435\u043d\u0435\u043d\u0430\") ] status = models.CharField(max_length = 20, choices=statuses, verbose_name='\u0421\u0442\u0430\u0442\u0443\u0441') \u041c\u043e\u0434\u0435\u043b\u0438 \u0434\u043b\u044f \u0442\u0438\u043f\u0430 \u043a\u043e\u043c\u043d\u0430\u0442\u044b \u0438 \u044d\u0442\u0430\u0436\u0430 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0435\u043d\u043d\u043e class RoomType(models.Model): room_category = models.CharField(max_length=50, primary_key=True, verbose_name='\u041a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u044f \u043d\u043e\u043c\u0435\u0440\u0430') night_cost = models.IntegerField(default=0, verbose_name='\u0421\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c \u0437\u0430 \u043d\u043e\u0447\u044c') guest_count = models.IntegerField(default=2, verbose_name='\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0441\u043f\u0430\u043b\u044c\u043d\u044b\u0445 \u043c\u0435\u0441\u0442') description = models.CharField(max_length=100, verbose_name='\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435') class Floor(models.Model): fix_date = models.DateField(auto_now=True, verbose_name='\u0414\u0430\u0442\u0430 \u0440\u0435\u043c\u043e\u043d\u0442\u0430') clean_date = models.DateField(auto_now=True, verbose_name='\u0414\u0430\u0442\u0430 \u0443\u0431\u043e\u0440\u043a\u0438') rooms_count = models.IntegerField(default=0, verbose_name='\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043d\u043e\u043c\u0435\u0440\u043e\u0432') cleaner = models.ManyToManyField(\"staff.Employee\", related_name=\"cleaner\", verbose_name='\u0423\u0431\u043e\u0440\u0449\u0438\u043a') \u041c\u043e\u0434\u0435\u043b\u044c \u0434\u043b\u044f \u043d\u043e\u043c\u0435\u0440\u0430 \u043e\u0442\u0435\u043b\u044f class Room(models.Model): room_category = models.ForeignKey(RoomType, on_delete=models.CASCADE, verbose_name='\u041a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u044f \u043d\u043e\u043c\u0435\u0440\u0430') floor = models.ForeignKey(Floor, on_delete=models.CASCADE, verbose_name='\u042d\u0442\u0430\u0436') phone = models.IntegerField(default=0, verbose_name='\u0422\u0435\u043b\u0435\u0444\u043e\u043d') is_occupied = models.BooleanField(default=False, verbose_name='\u0417\u0430\u043d\u044f\u0442\u043e\u0441\u0442\u044c \u043d\u043e\u043c\u0435\u0440\u0430') is_active = models.BooleanField(default=True, verbose_name='\u0413\u043e\u0442\u043e\u0432\u043d\u043e\u0441\u0442\u044c \u043d\u043e\u043c\u0435\u0440\u0430') guest_count = models.IntegerField(default=2, verbose_name='\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0433\u043e\u0441\u0442\u0435\u0439') description = models.CharField(max_length=100, verbose_name='\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435') \u041c\u043e\u0434\u0435\u043b\u044c \u0434\u043b\u044f \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 \u0443\u0431\u043e\u0440\u043e\u043a \u044d\u0442\u0430\u0436\u0430 class RoomClean(models.Model): complaints = models.CharField(max_length=50, verbose_name='\u0416\u0430\u043b\u043e\u0431\u044b') clean_mark = models.IntegerField(default=5, verbose_name='\u041e\u0446\u0435\u043d\u043a\u0430') clean_date = models.DateField(auto_now_add=True, verbose_name='\u0414\u0430\u0442\u0430 \u0443\u0431\u043e\u0440\u043a\u0438') floor = models.ForeignKey(Floor, on_delete=models.CASCADE, verbose_name='\u042d\u0442\u0430\u0436') worker_id = models.ForeignKey(Employee, blank=True, null=True, on_delete=models.CASCADE, verbose_name='\u0423\u0431\u043e\u0440\u0449\u0438\u043a') \u0410 \u0442\u0430\u043a\u0436\u0435 \u043c\u043e\u0434\u0435\u043b\u044c \u0434\u043b\u044f \u0441\u043e\u0442\u0440\u0443\u0434\u043d\u0438\u043a\u043e\u0432 class Employee(models.Model): passport = models.CharField(max_length=50, verbose_name='\u041f\u0430\u0441\u043f\u043e\u0440\u0442') full_name = models.CharField(max_length=50, verbose_name='\u0424\u0418\u041e') employee_date = models.DateField(auto_now_add=True, verbose_name='\u0414\u0430\u0442\u0430 \u0442\u0440\u0443\u0434\u043e\u0443\u0441\u0442\u0440\u043e\u0439\u0441\u0442\u0432\u0430') fire_date = models.DateField(null=True, blank=True, verbose_name='\u0414\u0430\u0442\u0430 \u0443\u0432\u043e\u043b\u044c\u043d\u0435\u043d\u0438\u044f') salary = models.IntegerField(verbose_name='\u041e\u043a\u043b\u0430\u0434') rank = models.CharField(max_length=50, verbose_name='\u0414\u043e\u043b\u0436\u043d\u043e\u0441\u0442\u044c')","title":"\u041c\u043e\u0434\u0435\u043b\u0438"},{"location":"labs/lab_3/#_4","text":"1) \u041e \u043a\u043b\u0438\u0435\u043d\u0442\u0430\u0445, \u043f\u0440\u043e\u0436\u0438\u0432\u0430\u0432\u0448\u0438\u0445 \u0432 \u0437\u0430\u0434\u0430\u043d\u043d\u043e\u043c \u043d\u043e\u043c\u0435\u0440\u0435, \u0432 \u0437\u0430\u0434\u0430\u043d\u043d\u044b\u0439 \u043f\u0435\u0440\u0438\u043e\u0434 \u0432\u0440\u0435\u043c\u0435\u043d\u0438 URL: /api/books/get_books/ Method: GET Auth required: YES @api_view([\"GET\"]) @csrf_exempt def get_books(request): books = Booking.objects.all().order_by('book_date') serializer = BookingSerializer(books, many=True) return JsonResponse({'books': serializer.data}, safe=False, status=status.HTTP_200_OK) 2) \u041e \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0435 \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432, \u043f\u0440\u0438\u0431\u044b\u0432\u0448\u0438\u0445 \u0438\u0437 \u0437\u0430\u0434\u0430\u043d\u043d\u043e\u0433\u043e \u0433\u043e\u0440\u043e\u0434\u0430 URL: /api/accounts/get_guests/ Method: GET Auth required: YES @api_view([\"GET\"]) @csrf_exempt def get_guests(request): city = request.query_params.get('city') guests = UserProfile.objects.filter(city=city) serializer = UserProfileSerializer(guests, many=True) return JsonResponse({'count': len(serializer.data)}, safe=False, status=status.HTTP_200_OK) 3) \u041e \u0442\u043e\u043c, \u043a\u0442\u043e \u0438\u0437 \u0441\u043b\u0443\u0436\u0430\u0449\u0438\u0445 \u0443\u0431\u0438\u0440\u0430\u043b \u043d\u043e\u043c\u0435\u0440 \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u043e\u0433\u043e \u043a\u043b\u0438\u0435\u043d\u0442\u0430 \u0432 \u0437\u0430\u0434\u0430\u043d\u043d\u044b\u0439 \u0434\u0435\u043d\u044c \u043d\u0435\u0434\u0435\u043b\u0438 URL: /api/books/get_books/ Method: GET Auth required: YES @api_view([\"GET\"]) @csrf_exempt def get_books(request): books = Booking.objects.all().order_by('book_date') serializer = BookingSerializer(books, many=True) return JsonResponse({'books': serializer.data}, safe=False, status=status.HTTP_200_OK) 4) \u0421\u043a\u043e\u043b\u044c\u043a\u043e \u0432 \u0433\u043e\u0441\u0442\u0438\u043d\u0438\u0446\u0435 \u0441\u0432\u043e\u0431\u043e\u0434\u043d\u044b\u0445 \u043d\u043e\u043c\u0435\u0440\u043e\u0432 URL: /api/hotel/get_empty_rooms/ Method: GET Auth required: YES @api_view([\"GET\"]) @csrf_exempt def get_empty_rooms(request): rooms = Room.objects.filter(is_occupied=True) serializer = RoomSerializer(rooms, many=True) return JsonResponse({'rooms': len(serializer.data)}, safe=False, status=status.HTTP_200_OK) 5) \u0441\u043f\u0438\u0441\u043e\u043a \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432 \u0441 \u0443\u043a\u0430\u0437\u0430\u043d\u0438\u0435\u043c \u043c\u0435\u0441\u0442\u0430 \u0436\u0438\u0442\u0435\u043b\u044c\u0441\u0442\u0432\u0430, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043f\u0440\u043e\u0436\u0438\u0432\u0430\u043b\u0438 \u0432 \u0442\u0435 \u0436\u0435 \u0434\u043d\u0438, \u0447\u0442\u043e \u0438 \u0437\u0430\u0434\u0430\u043d\u043d\u044b\u0439 \u043a\u043b\u0438\u0435\u043d\u0442, \u0432 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u044b\u0439 \u043f\u0435\u0440\u0438\u043e\u0434 \u0432\u0440\u0435\u043c\u0435\u043d\u0438 URL: /api/accounts/get_guests_on_neighbour/ Method: GET Auth required: YES @api_view([\"GET\"]) @csrf_exempt def get_guests_on_neighbour(request): name = request.query_params.get('name') guests = UserProfile.objects.get(last_name=name) dates = Booking.objects.get(guest_id=guests).book_date other_books = Booking.objects.filter(book_date=dates) data = {'guests': []} for book in other_books: data['guests'].append([book.guest_id.last_name, book.guest_id.city]) return JsonResponse(data, safe=False, status=status.HTTP_200_OK)","title":"\u041e\u0442\u0447\u0435\u0442\u044b"},{"location":"labs/lab_4/","text":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u21164 \u0410\u0432\u0442\u043e\u0440\u0438\u0437\u0430\u0446\u0438\u044f \u0410\u0432\u0442\u043e\u0440\u0438\u0437\u0430\u0446\u0438\u044f \u0438 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u043d\u0430 \u0441\u0430\u0439\u0442\u0435 \u0432\u044b\u0433\u043b\u044f\u0434\u0438\u0442 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c URL: http://localhost:3000/auth \u0411\u0440\u043e\u043d\u0438 \u0412\u0441\u0435 \u0431\u0440\u043e\u043d\u0438 \u0441 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c\u044e \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u0438\u0445 \u0441\u0442\u0430\u0442\u0443\u0441\u0430, \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0430 \u0434\u043b\u044f \u0430\u0434\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0430\u0442\u043e\u0440\u043e\u0432 \u0438 \u043f\u043e\u0440\u0442\u044c\u0435 URL: http://localhost:3000/books \u0421\u043e\u0442\u0440\u0443\u0434\u043d\u0438\u043a\u0438 \u0422\u0430\u043a \u0432\u044b\u0433\u043b\u044f\u0434\u044f\u0442 \u043a\u0430\u0440\u0442\u043e\u0447\u043a\u0438 \u0441\u043e\u0442\u0440\u0443\u0434\u043d\u0438\u043a\u043e\u0432, \u0444\u043e\u0442\u043e\u0433\u0440\u0430\u0444\u0438\u0438 \u0431\u0443\u0434\u0443\u0442 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u044b URL: http://localhost:3000/staff \u041f\u043e\u0441\u0442\u043e\u044f\u043b\u044c\u0446\u044b \u0421\u043f\u0438\u0441\u043e\u043a \u043f\u043e\u0441\u0442\u043e\u044f\u043d\u043d\u044b\u0445 (\u0438 \u043d\u0435 \u043e\u0447\u0435\u043d\u044c) \u0433\u043e\u0441\u0442\u0435\u0439 URL: http://localhost:3000/guests \u0423\u0431\u043e\u0440\u043a\u0438 \u041d\u0430 \u044d\u0442\u043e\u0439 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0435 \u043c\u043e\u0436\u043d\u043e \u043f\u0440\u043e\u0441\u043c\u043e\u0442\u0440\u0435\u0442\u044c \u0432\u0441\u0435 \u043e\u0446\u0435\u043d\u0435\u043d\u043d\u044b\u0435 \u0443\u0431\u043e\u0440\u043a\u0438 \u044d\u0442\u0430\u0436\u0435\u0439 URL: http://localhost:3000/cleans \u0421\u043f\u0438\u0441\u043e\u043a \u043d\u043e\u043c\u0435\u0440\u043e\u0432 \u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u043c\u043e\u0436\u0435\u0442 \u0432\u044b\u0431\u0440\u0430\u0442\u044c \u0443\u0434\u043e\u0431\u043d\u044b\u0439 \u0435\u043c\u0443 \u043d\u043e\u043c\u0435\u0440 \u0438 \u0437\u0434\u0435\u0441\u044c \u0436\u0435 \u0437\u0430\u0431\u0440\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0435\u0433\u043e URL: http://localhost:3000/bookings","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 4"},{"location":"labs/lab_4/#no4","text":"","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u21164"},{"location":"labs/lab_4/#_1","text":"\u0410\u0432\u0442\u043e\u0440\u0438\u0437\u0430\u0446\u0438\u044f \u0438 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u043d\u0430 \u0441\u0430\u0439\u0442\u0435 \u0432\u044b\u0433\u043b\u044f\u0434\u0438\u0442 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c URL: http://localhost:3000/auth","title":"\u0410\u0432\u0442\u043e\u0440\u0438\u0437\u0430\u0446\u0438\u044f"},{"location":"labs/lab_4/#_2","text":"\u0412\u0441\u0435 \u0431\u0440\u043e\u043d\u0438 \u0441 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c\u044e \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u0438\u0445 \u0441\u0442\u0430\u0442\u0443\u0441\u0430, \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0430 \u0434\u043b\u044f \u0430\u0434\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0430\u0442\u043e\u0440\u043e\u0432 \u0438 \u043f\u043e\u0440\u0442\u044c\u0435 URL: http://localhost:3000/books","title":"\u0411\u0440\u043e\u043d\u0438"},{"location":"labs/lab_4/#_3","text":"\u0422\u0430\u043a \u0432\u044b\u0433\u043b\u044f\u0434\u044f\u0442 \u043a\u0430\u0440\u0442\u043e\u0447\u043a\u0438 \u0441\u043e\u0442\u0440\u0443\u0434\u043d\u0438\u043a\u043e\u0432, \u0444\u043e\u0442\u043e\u0433\u0440\u0430\u0444\u0438\u0438 \u0431\u0443\u0434\u0443\u0442 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u044b URL: http://localhost:3000/staff","title":"\u0421\u043e\u0442\u0440\u0443\u0434\u043d\u0438\u043a\u0438"},{"location":"labs/lab_4/#_4","text":"\u0421\u043f\u0438\u0441\u043e\u043a \u043f\u043e\u0441\u0442\u043e\u044f\u043d\u043d\u044b\u0445 (\u0438 \u043d\u0435 \u043e\u0447\u0435\u043d\u044c) \u0433\u043e\u0441\u0442\u0435\u0439 URL: http://localhost:3000/guests","title":"\u041f\u043e\u0441\u0442\u043e\u044f\u043b\u044c\u0446\u044b"},{"location":"labs/lab_4/#_5","text":"\u041d\u0430 \u044d\u0442\u043e\u0439 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0435 \u043c\u043e\u0436\u043d\u043e \u043f\u0440\u043e\u0441\u043c\u043e\u0442\u0440\u0435\u0442\u044c \u0432\u0441\u0435 \u043e\u0446\u0435\u043d\u0435\u043d\u043d\u044b\u0435 \u0443\u0431\u043e\u0440\u043a\u0438 \u044d\u0442\u0430\u0436\u0435\u0439 URL: http://localhost:3000/cleans","title":"\u0423\u0431\u043e\u0440\u043a\u0438"},{"location":"labs/lab_4/#_6","text":"\u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u043c\u043e\u0436\u0435\u0442 \u0432\u044b\u0431\u0440\u0430\u0442\u044c \u0443\u0434\u043e\u0431\u043d\u044b\u0439 \u0435\u043c\u0443 \u043d\u043e\u043c\u0435\u0440 \u0438 \u0437\u0434\u0435\u0441\u044c \u0436\u0435 \u0437\u0430\u0431\u0440\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0435\u0433\u043e URL: http://localhost:3000/bookings","title":"\u0421\u043f\u0438\u0441\u043e\u043a \u043d\u043e\u043c\u0435\u0440\u043e\u0432"},{"location":"labs/lab_5/","text":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u21165 \u041c\u043e\u0434\u0435\u043b\u0438 \u041a\u043e\u0434 \u043c\u043e\u0434\u0435\u043b\u0438 User: class User(SQLModel, table=True): id: int = Field(default=None, primary_key=True) email: str fullname: str hash_password: str created_at: Optional[datetime] = Field(sa_column=Column( TIMESTAMP(timezone=True), nullable=False, server_default=text(\"CURRENT_TIMESTAMP\"), )) task_list: List[\"Task\"] = Relationship(back_populates=\"author\") \u041a\u043e\u0434 \u043c\u043e\u0434\u0435\u043b\u0438 Task: class PriorityType(Enum): extreme = \"extreme\" high = \"high\" medium = \"medium\" low = \"low\" class StatusType(Enum): done = \"done\" in_progress = \"in_progress\" cancelled = \"cancelled\" delayed = \"delayed\" added = \"added\" class TaskDefault(SQLModel): name: str description: Optional[str] = \"\" deadline: datetime status: StatusType priority: PriorityType tag: Optional[str] = \"\" created_at: Optional[datetime] = Field(sa_column=Column( TIMESTAMP(timezone=True), nullable=False, server_default=text(\"CURRENT_TIMESTAMP\"), )) class Task(TaskDefault, table=True): id: int = Field(default=None, primary_key=True) schedules: Optional[List[\"Schedule\"]] = Relationship( back_populates=\"tasks\", link_model=TaskSchedule ) created_by: int = Field( default=None, foreign_key=\"user.id\" ) author: Optional[User] = Relationship(back_populates=\"task_list\") task_link: List[TaskSchedule] = Relationship(back_populates=\"tasks\") notification_list: List[\"Notification\"] = Relationship(back_populates=\"parent_task\") class TaskUser(TaskDefault): author: Optional[User] = None \u041a\u043e\u0434 \u043c\u043e\u0434\u0435\u043b\u0438 Schedule: class Schedule(SQLModel, table=True): id: int = Field(default=None, primary_key=True) date: datetime tasks: Optional[List[\"Task\"]] = Relationship( back_populates=\"schedules\", link_model=TaskSchedule ) productivity_score: Optional[int] = 5 notes: Optional[str] = '' schedule_link: List[TaskSchedule] = Relationship(back_populates=\"schedules\") \u041a\u043e\u0434 \u043c\u043e\u0434\u0435\u043b\u0438 Task_Schedule: class TaskScheduleDefault(SQLModel): urgency: Optional[int] = 5 start_time: datetime end_time: Optional[datetime] class TaskSchedule(TaskScheduleDefault, table=True): id: int = Field(default=None, primary_key=True) task_id: Optional[int] = Field( default=None, foreign_key=\"task.id\" ) schedule_id: Optional[int] = Field( default=None, foreign_key=\"schedule.id\" ) tasks: Optional[\"Task\"] = Relationship(back_populates=\"task_link\") schedules: Optional[\"Schedule\"] = Relationship(back_populates=\"schedule_link\") class TaskScheduleSerializator(TaskScheduleDefault): tasks: Optional[\"Task\"] = None schedules: Optional[\"Schedule\"] = None \u041a\u043e\u0434 \u043c\u043e\u0434\u0435\u043b\u0438 Notification: class NotificationDefault(SQLModel): created_at: Optional[datetime] = Field(sa_column=Column( TIMESTAMP(timezone=True), nullable=False, server_default=text(\"CURRENT_TIMESTAMP\"), )) message: Optional[str] = '' is_read: bool = False class Notification(NotificationDefault, table=True): id: int = Field(default=None, primary_key=True) task: int = Field(default=None, foreign_key=\"task.id\") parent_task: Optional[Task] = Relationship(back_populates=\"notification_list\") class NotificationTask(NotificationDefault): parent_task: Optional[Task] = None \u0421\u0435\u0440\u0432\u0438\u0441\u044b \u041a\u043e\u0434 ce\u0440\u0432\u0438\u0441\u0430 Notification: def new_notification_create(notification: Notification, session) -> Notification: session.add(notification) session.commit() session.refresh(notification) return {\"status\": 200, \"data\": notification} def list_all_notifications(session) -> List[Notification]: return session.exec(select(Notification)).all() def get_notification_by_id(notification_id: int, session) -> Notification: data = session.exec(select(Notification).where(Notification.id == notification_id)).first() if not data: raise HTTPException(status_code=404, detail=\"Notification not found\") return data def delete_notification(notification_id: int, session): notification = session.get(Notification, notification_id) if not notification: raise HTTPException(status_code=404, detail=\"Notification not found\") session.delete(notification) session.commit() return {\"ok\": True} def patch_notification(notification_id: int, notification: Notification, session) -> Notification: db_notification = session.get(Notification, notification_id) if not db_notification: raise HTTPException(status_code=404, detail=\"Notification not found\") notification_data = notification.model_dump(exclude_unset=True) for key, value in notification_data.items(): setattr(db_notification, key, value) session.add(db_notification) session.commit() session.refresh(db_notification) return db_notification \u041a\u043e\u0434 ce\u0440\u0432\u0438\u0441\u0430 User: def new_user_create(user: User, session) -> User: hashed_password = get_password_hash(user.hash_password) user = User( email=user.email, fullname=user.fullname, hash_password=hashed_password ) session.add(user) session.commit() session.refresh(user) return user def list_all_users(session) -> List[User]: return session.exec(select(User)).all() def get_user_by_id(user_id: int, session) -> User: user = session.exec(select(User).where(User.id == user_id)).first() if not user: raise HTTPException(status_code=404, detail=\"User not found\") return user def change_password(old_password: str, new_password: str, current_user: User, session ) -> User: if verify_password(old_password, current_user.hash_password): setattr(current_user, \"hash_password\", get_password_hash(new_password)) session.add(current_user) session.commit() session.refresh(current_user) return current_user def delete_user(user_id: int, session): user = session.get(User, user_id) if not user: raise HTTPException(status_code=404, detail=\"User not found\") session.delete(user) session.commit() return {\"ok\": True} def patch_user(user_id: int, user: User, session) -> User: db_user = session.get(User, user_id) if not db_user: raise HTTPException(status_code=404, detail=\"User not found\") user_data = user.model_dump(exclude_unset=True) for key, value in user_data.items(): setattr(db_user, key, value) session.add(db_user) session.commit() session.refresh(db_user) return db_user \u041a\u043e\u0434 ce\u0440\u0432\u0438\u0441\u0430 Task_Schedule: def new_taskSchedule_create(taskSchedule: TaskSchedule, session) -> TaskSchedule: session.add(taskSchedule) session.commit() session.refresh(taskSchedule) return {\"status\": 200, \"data\": taskSchedule} def get_taskSchedule_by_id(taskSchedule_id: int, session) -> TaskSchedule: taskSchedule = session.exec(select(TaskSchedule).where(TaskSchedule.id == taskSchedule_id)).first() if not taskSchedule: raise HTTPException(status_code=404, detail=\"TaskSchedule not found\") return taskSchedule def delete_taskSchedule(taskSchedule_id: int, session): taskSchedule = session.get(TaskSchedule, taskSchedule_id) if not taskSchedule: raise HTTPException(status_code=404, detail=\"TaskSchedule not found\") session.delete(taskSchedule) session.commit() return {\"ok\": True} def patch_taskSchedule(taskSchedule_id: int, taskSchedule: TaskSchedule, session) -> TaskSchedule: db_taskSchedule = session.get(TaskSchedule, taskSchedule_id) if not db_taskSchedule: raise HTTPException(status_code=404, detail=\"TaskSchedule not found\") taskSchedule_data = taskSchedule.model_dump(exclude_unset=True) for key, value in taskSchedule_data.items(): setattr(db_taskSchedule, key, value) session.add(db_taskSchedule) session.commit() session.refresh(db_taskSchedule) return db_taskSchedule \u041a\u043e\u0434 ce\u0440\u0432\u0438\u0441\u0430 Notification: class NotificationDefault(SQLModel): created_at: Optional[datetime] = Field(sa_column=Column( TIMESTAMP(timezone=True), nullable=False, server_default=text(\"CURRENT_TIMESTAMP\"), )) message: Optional[str] = '' is_read: bool = False class Notification(NotificationDefault, table=True): id: int = Field(default=None, primary_key=True) task: int = Field(default=None, foreign_key=\"task.id\") parent_task: Optional[Task] = Relationship(back_populates=\"notification_list\") class NotificationTask(NotificationDefault): parent_task: Optional[Task] = None \u041a\u043e\u0434 ce\u0440\u0432\u0438\u0441\u0430 Notification: class NotificationDefault(SQLModel): created_at: Optional[datetime] = Field(sa_column=Column( TIMESTAMP(timezone=True), nullable=False, server_default=text(\"CURRENT_TIMESTAMP\"), )) message: Optional[str] = '' is_read: bool = False class Notification(NotificationDefault, table=True): id: int = Field(default=None, primary_key=True) task: int = Field(default=None, foreign_key=\"task.id\") parent_task: Optional[Task] = Relationship(back_populates=\"notification_list\") class NotificationTask(NotificationDefault): parent_task: Optional[Task] = None \u041a\u043e\u0434 ce\u0440\u0432\u0438\u0441\u0430 Notification: class NotificationDefault(SQLModel): created_at: Optional[datetime] = Field(sa_column=Column( TIMESTAMP(timezone=True), nullable=False, server_default=text(\"CURRENT_TIMESTAMP\"), )) message: Optional[str] = '' is_read: bool = False class Notification(NotificationDefault, table=True): id: int = Field(default=None, primary_key=True) task: int = Field(default=None, foreign_key=\"task.id\") parent_task: Optional[Task] = Relationship(back_populates=\"notification_list\") class NotificationTask(NotificationDefault): parent_task: Optional[Task] = None \u041a\u043e\u0434 ce\u0440\u0432\u0438\u0441\u0430 Notification: class NotificationDefault(SQLModel): created_at: Optional[datetime] = Field(sa_column=Column( TIMESTAMP(timezone=True), nullable=False, server_default=text(\"CURRENT_TIMESTAMP\"), )) message: Optional[str] = '' is_read: bool = False class Notification(NotificationDefault, table=True): id: int = Field(default=None, primary_key=True) task: int = Field(default=None, foreign_key=\"task.id\") parent_task: Optional[Task] = Relationship(back_populates=\"notification_list\") class NotificationTask(NotificationDefault): parent_task: Optional[Task] = None","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 5"},{"location":"labs/lab_5/#no5","text":"","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u21165"},{"location":"labs/lab_5/#_1","text":"\u041a\u043e\u0434 \u043c\u043e\u0434\u0435\u043b\u0438 User: class User(SQLModel, table=True): id: int = Field(default=None, primary_key=True) email: str fullname: str hash_password: str created_at: Optional[datetime] = Field(sa_column=Column( TIMESTAMP(timezone=True), nullable=False, server_default=text(\"CURRENT_TIMESTAMP\"), )) task_list: List[\"Task\"] = Relationship(back_populates=\"author\") \u041a\u043e\u0434 \u043c\u043e\u0434\u0435\u043b\u0438 Task: class PriorityType(Enum): extreme = \"extreme\" high = \"high\" medium = \"medium\" low = \"low\" class StatusType(Enum): done = \"done\" in_progress = \"in_progress\" cancelled = \"cancelled\" delayed = \"delayed\" added = \"added\" class TaskDefault(SQLModel): name: str description: Optional[str] = \"\" deadline: datetime status: StatusType priority: PriorityType tag: Optional[str] = \"\" created_at: Optional[datetime] = Field(sa_column=Column( TIMESTAMP(timezone=True), nullable=False, server_default=text(\"CURRENT_TIMESTAMP\"), )) class Task(TaskDefault, table=True): id: int = Field(default=None, primary_key=True) schedules: Optional[List[\"Schedule\"]] = Relationship( back_populates=\"tasks\", link_model=TaskSchedule ) created_by: int = Field( default=None, foreign_key=\"user.id\" ) author: Optional[User] = Relationship(back_populates=\"task_list\") task_link: List[TaskSchedule] = Relationship(back_populates=\"tasks\") notification_list: List[\"Notification\"] = Relationship(back_populates=\"parent_task\") class TaskUser(TaskDefault): author: Optional[User] = None \u041a\u043e\u0434 \u043c\u043e\u0434\u0435\u043b\u0438 Schedule: class Schedule(SQLModel, table=True): id: int = Field(default=None, primary_key=True) date: datetime tasks: Optional[List[\"Task\"]] = Relationship( back_populates=\"schedules\", link_model=TaskSchedule ) productivity_score: Optional[int] = 5 notes: Optional[str] = '' schedule_link: List[TaskSchedule] = Relationship(back_populates=\"schedules\") \u041a\u043e\u0434 \u043c\u043e\u0434\u0435\u043b\u0438 Task_Schedule: class TaskScheduleDefault(SQLModel): urgency: Optional[int] = 5 start_time: datetime end_time: Optional[datetime] class TaskSchedule(TaskScheduleDefault, table=True): id: int = Field(default=None, primary_key=True) task_id: Optional[int] = Field( default=None, foreign_key=\"task.id\" ) schedule_id: Optional[int] = Field( default=None, foreign_key=\"schedule.id\" ) tasks: Optional[\"Task\"] = Relationship(back_populates=\"task_link\") schedules: Optional[\"Schedule\"] = Relationship(back_populates=\"schedule_link\") class TaskScheduleSerializator(TaskScheduleDefault): tasks: Optional[\"Task\"] = None schedules: Optional[\"Schedule\"] = None \u041a\u043e\u0434 \u043c\u043e\u0434\u0435\u043b\u0438 Notification: class NotificationDefault(SQLModel): created_at: Optional[datetime] = Field(sa_column=Column( TIMESTAMP(timezone=True), nullable=False, server_default=text(\"CURRENT_TIMESTAMP\"), )) message: Optional[str] = '' is_read: bool = False class Notification(NotificationDefault, table=True): id: int = Field(default=None, primary_key=True) task: int = Field(default=None, foreign_key=\"task.id\") parent_task: Optional[Task] = Relationship(back_populates=\"notification_list\") class NotificationTask(NotificationDefault): parent_task: Optional[Task] = None","title":"\u041c\u043e\u0434\u0435\u043b\u0438"},{"location":"labs/lab_5/#_2","text":"\u041a\u043e\u0434 ce\u0440\u0432\u0438\u0441\u0430 Notification: def new_notification_create(notification: Notification, session) -> Notification: session.add(notification) session.commit() session.refresh(notification) return {\"status\": 200, \"data\": notification} def list_all_notifications(session) -> List[Notification]: return session.exec(select(Notification)).all() def get_notification_by_id(notification_id: int, session) -> Notification: data = session.exec(select(Notification).where(Notification.id == notification_id)).first() if not data: raise HTTPException(status_code=404, detail=\"Notification not found\") return data def delete_notification(notification_id: int, session): notification = session.get(Notification, notification_id) if not notification: raise HTTPException(status_code=404, detail=\"Notification not found\") session.delete(notification) session.commit() return {\"ok\": True} def patch_notification(notification_id: int, notification: Notification, session) -> Notification: db_notification = session.get(Notification, notification_id) if not db_notification: raise HTTPException(status_code=404, detail=\"Notification not found\") notification_data = notification.model_dump(exclude_unset=True) for key, value in notification_data.items(): setattr(db_notification, key, value) session.add(db_notification) session.commit() session.refresh(db_notification) return db_notification \u041a\u043e\u0434 ce\u0440\u0432\u0438\u0441\u0430 User: def new_user_create(user: User, session) -> User: hashed_password = get_password_hash(user.hash_password) user = User( email=user.email, fullname=user.fullname, hash_password=hashed_password ) session.add(user) session.commit() session.refresh(user) return user def list_all_users(session) -> List[User]: return session.exec(select(User)).all() def get_user_by_id(user_id: int, session) -> User: user = session.exec(select(User).where(User.id == user_id)).first() if not user: raise HTTPException(status_code=404, detail=\"User not found\") return user def change_password(old_password: str, new_password: str, current_user: User, session ) -> User: if verify_password(old_password, current_user.hash_password): setattr(current_user, \"hash_password\", get_password_hash(new_password)) session.add(current_user) session.commit() session.refresh(current_user) return current_user def delete_user(user_id: int, session): user = session.get(User, user_id) if not user: raise HTTPException(status_code=404, detail=\"User not found\") session.delete(user) session.commit() return {\"ok\": True} def patch_user(user_id: int, user: User, session) -> User: db_user = session.get(User, user_id) if not db_user: raise HTTPException(status_code=404, detail=\"User not found\") user_data = user.model_dump(exclude_unset=True) for key, value in user_data.items(): setattr(db_user, key, value) session.add(db_user) session.commit() session.refresh(db_user) return db_user \u041a\u043e\u0434 ce\u0440\u0432\u0438\u0441\u0430 Task_Schedule: def new_taskSchedule_create(taskSchedule: TaskSchedule, session) -> TaskSchedule: session.add(taskSchedule) session.commit() session.refresh(taskSchedule) return {\"status\": 200, \"data\": taskSchedule} def get_taskSchedule_by_id(taskSchedule_id: int, session) -> TaskSchedule: taskSchedule = session.exec(select(TaskSchedule).where(TaskSchedule.id == taskSchedule_id)).first() if not taskSchedule: raise HTTPException(status_code=404, detail=\"TaskSchedule not found\") return taskSchedule def delete_taskSchedule(taskSchedule_id: int, session): taskSchedule = session.get(TaskSchedule, taskSchedule_id) if not taskSchedule: raise HTTPException(status_code=404, detail=\"TaskSchedule not found\") session.delete(taskSchedule) session.commit() return {\"ok\": True} def patch_taskSchedule(taskSchedule_id: int, taskSchedule: TaskSchedule, session) -> TaskSchedule: db_taskSchedule = session.get(TaskSchedule, taskSchedule_id) if not db_taskSchedule: raise HTTPException(status_code=404, detail=\"TaskSchedule not found\") taskSchedule_data = taskSchedule.model_dump(exclude_unset=True) for key, value in taskSchedule_data.items(): setattr(db_taskSchedule, key, value) session.add(db_taskSchedule) session.commit() session.refresh(db_taskSchedule) return db_taskSchedule \u041a\u043e\u0434 ce\u0440\u0432\u0438\u0441\u0430 Notification: class NotificationDefault(SQLModel): created_at: Optional[datetime] = Field(sa_column=Column( TIMESTAMP(timezone=True), nullable=False, server_default=text(\"CURRENT_TIMESTAMP\"), )) message: Optional[str] = '' is_read: bool = False class Notification(NotificationDefault, table=True): id: int = Field(default=None, primary_key=True) task: int = Field(default=None, foreign_key=\"task.id\") parent_task: Optional[Task] = Relationship(back_populates=\"notification_list\") class NotificationTask(NotificationDefault): parent_task: Optional[Task] = None \u041a\u043e\u0434 ce\u0440\u0432\u0438\u0441\u0430 Notification: class NotificationDefault(SQLModel): created_at: Optional[datetime] = Field(sa_column=Column( TIMESTAMP(timezone=True), nullable=False, server_default=text(\"CURRENT_TIMESTAMP\"), )) message: Optional[str] = '' is_read: bool = False class Notification(NotificationDefault, table=True): id: int = Field(default=None, primary_key=True) task: int = Field(default=None, foreign_key=\"task.id\") parent_task: Optional[Task] = Relationship(back_populates=\"notification_list\") class NotificationTask(NotificationDefault): parent_task: Optional[Task] = None \u041a\u043e\u0434 ce\u0440\u0432\u0438\u0441\u0430 Notification: class NotificationDefault(SQLModel): created_at: Optional[datetime] = Field(sa_column=Column( TIMESTAMP(timezone=True), nullable=False, server_default=text(\"CURRENT_TIMESTAMP\"), )) message: Optional[str] = '' is_read: bool = False class Notification(NotificationDefault, table=True): id: int = Field(default=None, primary_key=True) task: int = Field(default=None, foreign_key=\"task.id\") parent_task: Optional[Task] = Relationship(back_populates=\"notification_list\") class NotificationTask(NotificationDefault): parent_task: Optional[Task] = None \u041a\u043e\u0434 ce\u0440\u0432\u0438\u0441\u0430 Notification: class NotificationDefault(SQLModel): created_at: Optional[datetime] = Field(sa_column=Column( TIMESTAMP(timezone=True), nullable=False, server_default=text(\"CURRENT_TIMESTAMP\"), )) message: Optional[str] = '' is_read: bool = False class Notification(NotificationDefault, table=True): id: int = Field(default=None, primary_key=True) task: int = Field(default=None, foreign_key=\"task.id\") parent_task: Optional[Task] = Relationship(back_populates=\"notification_list\") class NotificationTask(NotificationDefault): parent_task: Optional[Task] = None","title":"\u0421\u0435\u0440\u0432\u0438\u0441\u044b"},{"location":"labs/lab_6/","text":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u21166 \u0417\u0430\u0434\u0430\u0447\u0430 1 \u0420\u0430\u0437\u043b\u0438\u0447\u0438\u044f \u043c\u0435\u0436\u0434\u0443 threading, multiprocessing \u0438 async \u0432 Python \u0417\u0430\u0434\u0430\u0447\u0430: \u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u0442\u0440\u0438 \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0445 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b \u043d\u0430 Python, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0449\u0438\u0435 \u043a\u0430\u0436\u0434\u044b\u0439 \u0438\u0437 \u043f\u043e\u0434\u0445\u043e\u0434\u043e\u0432: threading, multiprocessing \u0438 async. \u041a\u0430\u0436\u0434\u0430\u044f \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0440\u0435\u0448\u0430\u0442\u044c \u0441\u0447\u0438\u0442\u0430\u0442\u044c \u0441\u0443\u043c\u043c\u0443 \u0432\u0441\u0435\u0445 \u0447\u0438\u0441\u0435\u043b \u043e\u0442 1 \u0434\u043e 10000000000000. \u0420\u0430\u0437\u0434\u0435\u043b\u0438\u0442\u0435 \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044f \u043d\u0430 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u044b\u0445 \u0437\u0430\u0434\u0430\u0447 \u0434\u043b\u044f \u0443\u0441\u043a\u043e\u0440\u0435\u043d\u0438\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f. \u041f\u043e\u0434\u0440\u043e\u0431\u043d\u043e\u0441\u0442\u0438 \u0437\u0430\u0434\u0430\u043d\u0438\u044f: \u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0443 \u043d\u0430 Python \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u043f\u043e\u0434\u0445\u043e\u0434\u0430: threading, multiprocessing \u0438 async. \u041a\u0430\u0436\u0434\u0430\u044f \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0442\u044c \u0444\u0443\u043d\u043a\u0446\u0438\u044e calculate_sum(), \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0431\u0443\u0434\u0435\u0442 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0442\u044c \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044f. \u0414\u043b\u044f threading \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 \u043c\u043e\u0434\u0443\u043b\u044c threading, \u0434\u043b\u044f multiprocessing - \u043c\u043e\u0434\u0443\u043b\u044c multiprocessing, \u0430 \u0434\u043b\u044f async - \u043a\u043b\u044e\u0447\u0435\u0432\u044b\u0435 \u0441\u043b\u043e\u0432\u0430 async/await \u0438 \u043c\u043e\u0434\u0443\u043b\u044c asyncio. \u041a\u0430\u0436\u0434\u0430\u044f \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0440\u0430\u0437\u0431\u0438\u0442\u044c \u0437\u0430\u0434\u0430\u0447\u0443 \u043d\u0430 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043f\u043e\u0434\u0437\u0430\u0434\u0430\u0447 \u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0442\u044c \u0438\u0445 \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u043e. \u0417\u0430\u043c\u0435\u0440\u044c\u0442\u0435 \u0432\u0440\u0435\u043c\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u043a\u0430\u0436\u0434\u043e\u0439 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b \u0438 \u0441\u0440\u0430\u0432\u043d\u0438\u0442\u0435 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b. \u041e\u0431\u044b\u0447\u043d\u044b\u0439 \u043f\u043e\u0434\u0441\u0447\u0435\u0442 for max_value in range(5, 10): t = time.time() cnt = 0 for i in range(1, 10 ** max_value + 1): cnt += i print(\"Counter value:\", cnt) print(\"Time:\", time.time() - t) print(\"--\\--\\--\\--\\--\\--\\--\\--\\--\") Threading: n = 1_000_000_000 sums = [] lock = threading.Lock() def counter(begin, shift): global sums part = sum(range(begin, n, shift)) lock.acquire() sums.append(part) lock.release() def calculate_sum(): thread_count = 100 threads = [threading.Thread(target=counter, args=(i, thread_count)) for i in range(thread_count)] for thread in threads: thread.start() for thread in threads: thread.join() if __name__ == '__main__': start_time = time.time() calculate_sum() print(\"\u0421\u0443\u043c\u043c\u0430:\", sum(sums), \"\u0412\u0440\u0435\u043c\u044f:\", time.time() - start_time) Multiprocessing: sums = [] n = 1_000_000_000 def counter(x): return sum(range(x[0], n, x[1])) def calculate_sums(): process_count = 10 with multiprocessing.Pool(processes=process_count) as pool: it = pool.imap_unordered(counter, [(i, process_count) for i in range(process_count)], chunksize=1) return sum(it) if __name__ == '__main__': start = time.time() result = calculate_sums() print(\"\u0421\u0443\u043c\u043c\u0430:\", result, \"\u0412\u0440\u0435\u043c\u044f:\", time.time() - start) Async: n = 1_000_000_000 async def counter(begin, shift): return sum(range(begin, n, shift)) async def calculate_sum(): coroutines_count = 100 tasks = [counter(i, coroutines_count) for i in range(coroutines_count)] return await asyncio.gather(*tasks) if __name__ == '__main__': start = time.time() sums = asyncio.run(calculate_sum()) print(\"\u0421\u0443\u043c\u043c\u0430:\", sum(sums), \"\u0412\u0440\u0435\u043c\u044f:\", time.time() - start) \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b \u041c\u0435\u0442\u043e\u0434 \u0412\u0440\u0435\u043c\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f (\u0441\u0435\u043a.) Sum 32.69 Threading 32.49 Multiprocessing 6.07 Async 35.32 \u0412\u044b\u0432\u043e\u0434\u044b \u0412 \u043f\u043e\u0434\u0441\u0447\u0435\u0442\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 threading \u043d\u0435 \u0434\u0430\u0435\u0442 \u043f\u043e\u0447\u0442\u0438 \u043d\u0438\u043a\u0430\u043a\u043e\u0433\u043e \u043f\u0440\u0438\u0440\u043e\u0441\u0442\u0430 \u043f\u043e \u0441\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u044e \u0441 \u043e\u0434\u043d\u043e\u043f\u043e\u0442\u043e\u043a\u043e\u043c, \u043a\u0430\u043a \u0438 Async Multiprocessing \u0441 \u0431\u043e\u043b\u044c\u0448\u0438\u043c \u043f\u0440\u0435\u0438\u043c\u0443\u0449\u0435\u0441\u0442\u0432\u043e\u043c \u0432\u044b\u0438\u0433\u0440\u044b\u0432\u0430\u0435\u0442 \u0432 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u044f\u0445 \u043f\u043e\u0434\u0441\u0447\u0435\u0442\u0430 \u0417\u0430\u0434\u0430\u0447\u0430 2 \u041f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u044b\u0439 \u043f\u0430\u0440\u0441\u0438\u043d\u0433 \u0432\u0435\u0431-\u0441\u0442\u0440\u0430\u043d\u0438\u0446 \u0441 \u0441\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435\u043c \u0432 \u0431\u0430\u0437\u0443 \u0434\u0430\u043d\u043d\u044b\u0445 \u0417\u0430\u0434\u0430\u0447\u0430: \u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0443 \u043d\u0430 Python \u0434\u043b\u044f \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u043e\u0433\u043e \u043f\u0430\u0440\u0441\u0438\u043d\u0433\u0430 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u0445 \u0432\u0435\u0431-\u0441\u0442\u0440\u0430\u043d\u0438\u0446 \u0441 \u0441\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435\u043c \u0434\u0430\u043d\u043d\u044b\u0445 \u0432 \u0431\u0430\u0437\u0443 \u0434\u0430\u043d\u043d\u044b\u0445 \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u043f\u043e\u0434\u0445\u043e\u0434\u043e\u0432 threading, multiprocessing \u0438 async. \u041a\u0430\u0436\u0434\u0430\u044f \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u043f\u0430\u0440\u0441\u0438\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u0441 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u0445 \u0432\u0435\u0431-\u0441\u0430\u0439\u0442\u043e\u0432, \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0442\u044c \u0438\u0445 \u0432 \u0431\u0430\u0437\u0443 \u0434\u0430\u043d\u043d\u044b\u0445. \u041f\u043e\u0434\u0440\u043e\u0431\u043d\u043e\u0441\u0442\u0438 \u0437\u0430\u0434\u0430\u043d\u0438\u044f: \u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u0442\u0440\u0438 \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0445 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b \u043d\u0430 Python, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0449\u0438\u0435 \u043a\u0430\u0436\u0434\u044b\u0439 \u0438\u0437 \u043f\u043e\u0434\u0445\u043e\u0434\u043e\u0432: threading, multiprocessing \u0438 async. \u041a\u0430\u0436\u0434\u0430\u044f \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0442\u044c \u0444\u0443\u043d\u043a\u0446\u0438\u044e parse_and_save(url), \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0431\u0443\u0434\u0435\u0442 \u0437\u0430\u0433\u0440\u0443\u0436\u0430\u0442\u044c HTML-\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0443 \u043f\u043e \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u043e\u043c\u0443 URL, \u043f\u0430\u0440\u0441\u0438\u0442\u044c \u0435\u0435, \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0442\u044c \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043e\u043a \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b \u0432 \u0431\u0430\u0437\u0443 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438 \u0432\u044b\u0432\u043e\u0434\u0438\u0442\u044c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043d\u0430 \u044d\u043a\u0440\u0430\u043d. \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 \u0431\u0430\u0437\u0443 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438\u0437 \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u044b \u043d\u043e\u043c\u0435\u0440 1 \u0434\u043b\u044f \u0437\u0430\u043f\u043e\u043b\u0435\u043d\u043d\u0438\u044f \u0435\u0435 \u0434\u0430\u043d\u043d\u044b\u043c\u0438. \u0415\u0441\u043b\u0438 \u0412\u044b \u043d\u0435 \u043f\u043e\u043d\u0438\u043c\u0430\u0435\u0442\u0435, \u043a\u0430\u043a\u0438\u0435 \u0442\u0430\u0431\u043b\u0438\u0446\u044b \u0438 \u043e\u0442\u043a\u0443\u0434\u0430 \u0412\u044b \u043c\u043e\u0433\u043b\u0438 \u0431\u044b \u0437\u0430\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043f\u0430\u0440\u0441\u0438\u043d\u0433\u0430, \u043d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u043f\u0440\u0435\u043f\u043e\u0434\u0430\u0432\u0430\u0442\u0435\u043b\u044e \u0432 \u043e\u0431\u0449\u0435\u043c \u0447\u0430\u0442\u0435 \u043f\u043e\u0442\u043e\u043a\u0430. \u0414\u043b\u044f threading \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 \u043c\u043e\u0434\u0443\u043b\u044c threading, \u0434\u043b\u044f multiprocessing - \u043c\u043e\u0434\u0443\u043b\u044c multiprocessing, \u0430 \u0434\u043b\u044f async - \u043a\u043b\u044e\u0447\u0435\u0432\u044b\u0435 \u0441\u043b\u043e\u0432\u0430 async/await \u0438 \u043c\u043e\u0434\u0443\u043b\u044c aiohttp \u0434\u043b\u044f \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0445 \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432. \u0421\u043e\u0437\u0434\u0430\u0439\u0442\u0435 \u0441\u043f\u0438\u0441\u043e\u043a \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u0445 URL-\u0430\u0434\u0440\u0435\u0441\u043e\u0432 \u0432\u0435\u0431-\u0441\u0442\u0440\u0430\u043d\u0438\u0446 \u0434\u043b\u044f \u043f\u0430\u0440\u0441\u0438\u043d\u0433\u0430 \u0438 \u0440\u0430\u0437\u0434\u0435\u043b\u0438\u0442\u0435 \u0435\u0433\u043e \u043d\u0430 \u0440\u0430\u0432\u043d\u044b\u0435 \u0447\u0430\u0441\u0442\u0438 \u0434\u043b\u044f \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u043e\u0433\u043e \u043f\u0430\u0440\u0441\u0438\u043d\u0433\u0430. \u0417\u0430\u043f\u0443\u0441\u0442\u0438\u0442\u0435 \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u044b\u0439 \u043f\u0430\u0440\u0441\u0438\u043d\u0433 \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0439 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b \u0438 \u0441\u043e\u0445\u0440\u0430\u043d\u0438\u0442\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0432 \u0431\u0430\u0437\u0443 \u0434\u0430\u043d\u043d\u044b\u0445. \u0417\u0430\u043c\u0435\u0440\u044c\u0442\u0435 \u0432\u0440\u0435\u043c\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u043a\u0430\u0436\u0434\u043e\u0439 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b \u0438 \u0441\u0440\u0430\u0432\u043d\u0438\u0442\u0435 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b. \u0414\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u0442\u0440\u0435\u0431\u043e\u0432\u0430\u043d\u0438\u044f: \u0421\u0434\u0435\u043b\u0430\u0439\u0442\u0435 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044e, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0443\u044e \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u043a\u0430\u0436\u0434\u043e\u0439 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u044b\u0435 \u043f\u043e\u0434\u0445\u043e\u0434\u044b \u0438 \u0438\u0445 \u043e\u0441\u043e\u0431\u0435\u043d\u043d\u043e\u0441\u0442\u0438. \u0412\u043a\u043b\u044e\u0447\u0438\u0442\u0435 \u0432 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044e \u0442\u0430\u0431\u043b\u0438\u0446\u044b, \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0430\u044e\u0449\u0438\u0435 \u0432\u0440\u0435\u043c\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u043a\u0430\u0436\u0434\u043e\u0439 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b. \u041f\u0440\u043e\u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0438\u0440\u0443\u0439\u0442\u0435 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b \u0441\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u044f \u0432\u0440\u0435\u043c\u0435\u043d\u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 \u0440\u0430\u0437\u043d\u044b\u0445 \u043f\u043e\u0434\u0445\u043e\u0434\u043e\u0432. \u0421\u043f\u0438\u0441\u043e\u043a \u0441\u0430\u0439\u0442\u043e\u0432: https://www.leadertask.ru/blog/celi-na-etot-god https://singularity-app.ru/blog/tseli-na-god/?ysclid=maut5kcczr776505947 https://instalook.ru/blog/spisok-celey-na--god?ysclid=mauug5wya098753197 https://www.coaching-online.org/monthly-goals/ https://facedragons.com/personal-development/list-of-goal-ideas/ \u0413\u043b\u0430\u0432\u043d\u044b\u0439 \u0444\u0430\u0439\u043b: def get_sqlalchemy_engine(): return create_engine(sqlalchemy_url) def test_connection(): engine = get_sqlalchemy_engine() with engine.connect() as connection: print(\"\u041f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u043a \u0431\u0430\u0437\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 \u0443\u0441\u043f\u0435\u0448\u043d\u043e \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043b\u0435\u043d\u043e!\") return True if __name__ == \"__main__\": test_connection() run_parser(sqlalchemy_url, links) run_threading_parser(sqlalchemy_url, links) run_multiprocessing_parser(sqlalchemy_url, links) run_async_parser(sqlalchemy_url, links) \u041e\u0431\u044b\u0447\u043d\u044b\u0439 \u043f\u0430\u0440\u0441\u0438\u043d\u0433: def save(engine, task_table, task_name): with engine.connect() as connection: try: stmt = insert(task_table).values( name=task_name, deadline='2026-01-01 00:00:00.000', status='in_progress', priority='medium', created_by=0 ) result = connection.execute(stmt) connection.commit() return result except Exception as e: connection.rollback() raise engine.dispose() def parse_and_save(sqlalchemy_url, url): engine = create_engine(sqlalchemy_url) metadata = MetaData() task_table = Table( 'task', metadata, autoload_with=engine ) resp = req.get(url) soup = BeautifulSoup(resp.text, 'html.parser') if url in [ 'https://www.leadertask.ru/blog/celi-na-etot-god', 'https://www.makingsenseofcents.com/2022/12/goal-ideas.html', 'https://facedragons.com/personal-development/list-of-goal-ideas/' ]: soup = soup.find_all('ul', {'class': 'wp-block-list'}) else: soup = soup.find_all('ol') tasks = [] for tag in soup: for task_index in tag.text.splitlines(): if task_index != '': tasks.append(task_index) save(engine, task_table, tasks) def process_urls(urls, sqlalchemy_url): for url in urls: parse_and_save(sqlalchemy_url, url) def parser(sqlalchemy_url, urls): start_time = time.time() process_urls(urls, sqlalchemy_url) elapsed_time = time.time() - start_time print(f\"Parser: {elapsed_time:.2f} \u0441\u0435\u043a.\") def run_parser(sqlalchemy_url, urls): parser(sqlalchemy_url, urls) Threading: def save(engine, task_table, task_name): with engine.connect() as connection: try: stmt = insert(task_table).values( name=task_name, deadline='2026-01-01 00:00:00.000', status='in_progress', priority='medium', created_by=0 ) result = connection.execute(stmt) connection.commit() return result except Exception as e: connection.rollback() raise engine.dispose() def parse_and_save(sqlalchemy_url, url): engine = create_engine(sqlalchemy_url) metadata = MetaData() task_table = Table( 'task', metadata, autoload_with=engine ) resp = req.get(url) soup = BeautifulSoup(resp.text, 'html.parser') if url in [ 'https://www.leadertask.ru/blog/celi-na-etot-god', 'https://www.makingsenseofcents.com/2022/12/goal-ideas.html', 'https://facedragons.com/personal-development/list-of-goal-ideas/' ]: soup = soup.find_all('ul', {'class': 'wp-block-list'}) else: soup = soup.find_all('ol') tasks = [] for tag in soup: for task_index in tag.text.splitlines(): if task_index != '': tasks.append(task_index) save(engine, task_table, tasks) def threading_parser(sqlalchemy_url, urls): start_time = time.time() num_threads = 6 chunk_size = len(urls) // num_threads threads = [] for i in range(num_threads): start = i * chunk_size end = start + chunk_size if i < num_threads - 1 else len(urls) thread_urls = urls[start:end] thread = threading.Thread( target=lambda urls: [parse_and_save(sqlalchemy_url, url) for url in urls], args=(thread_urls,), name=f\"Thread-{i+1}\" ) threads.append(thread) thread.start() for thread in threads: thread.join() elapsed_time = time.time() - start_time print(f\"Threading: {elapsed_time:.2f} \u0441\u0435\u043a.\") def run_threading_parser(sqlalchemy_url, urls): threading_parser(sqlalchemy_url, urls) Multiprocessing: def save(engine, task_table, task_name): with engine.connect() as connection: try: stmt = insert(task_table).values( name=task_name, deadline='2026-01-01 00:00:00.000', status='in_progress', priority='medium', created_by=0 ) result = connection.execute(stmt) connection.commit() return result except Exception as e: connection.rollback() raise engine.dispose() def parse_and_save(sqlalchemy_url, url): engine = create_engine(sqlalchemy_url) metadata = MetaData() task_table = Table( 'task', metadata, autoload_with=engine ) resp = req.get(url) soup = BeautifulSoup(resp.text, 'html.parser') if url in [ 'https://www.leadertask.ru/blog/celi-na-etot-god', 'https://www.makingsenseofcents.com/2022/12/goal-ideas.html', 'https://facedragons.com/personal-development/list-of-goal-ideas/' ]: soup = soup.find_all('ul', {'class': 'wp-block-list'}) else: soup = soup.find_all('ol') tasks = [] for tag in soup: for task_index in tag.text.splitlines(): if task_index != '': tasks.append(task_index) save(engine, task_table, tasks) def process_urls(urls, sqlalchemy_url): for url in urls: parse_and_save(sqlalchemy_url, url) def multiprocessing_parser(sqlalchemy_url, urls): start_time = time.time() num_processes = 5 chunk_size = len(urls) // num_processes chunks = [urls[i:i + chunk_size] for i in range(0, len(urls), chunk_size)] processes = [] for chunk in chunks: process = multiprocessing.Process( target=process_urls, args=(chunk, sqlalchemy_url) ) processes.append(process) process.start() for process in processes: process.join() elapsed_time = time.time() - start_time print(f\"Multiprocessing: {elapsed_time:.2f} \u0441\u0435\u043a.\") def run_multiprocessing_parser(sqlalchemy_url, urls): multiprocessing_parser(sqlalchemy_url, urls) Async: async def save(engine, task_table, tasks): with engine.connect() as connection: try: for task_i in tasks: stmt = insert(task_table).values( name=task_i, deadline='2026-01-01 00:00:00.000', status='in_progress', priority='medium', created_by=0 ) result = connection.execute(stmt) connection.commit() return result except Exception as e: connection.rollback() raise engine.dispose() async def parse_and_save(sqlalchemy_url, session, url): engine = create_engine(sqlalchemy_url) metadata = MetaData() task_table = Table( 'task', metadata, autoload_with=engine ) try: async with session.get(url, timeout=10) as response: html = await response.text() soup = BeautifulSoup(html, 'html.parser') if url in [ 'https://www.leadertask.ru/blog/celi-na-etot-god', 'https://www.makingsenseofcents.com/2022/12/goal-ideas.html', 'https://facedragons.com/personal-development/list-of-goal-ideas/' ]: soup = soup.find_all('ul', {'class': 'wp-block-list'}) else: soup = soup.find_all('ol') tasks = [] for tag in soup: for task_index in tag.text.splitlines(): if task_index != '': tasks.append(task_index) await save(engine, task_table, tasks) except Exception as e: print(f\"Error parsing {url}: {e}\") async def async_parser(sqlalchemy_url, urls): start_time = time.time() connector = aiohttp.TCPConnector() async with aiohttp.ClientSession(connector=connector) as session: tasks = [parse_and_save(sqlalchemy_url, session, url) for url in urls] await asyncio.gather(*tasks) elapsed_time = time.time() - start_time print(f\"Async: {elapsed_time:.2f} \u0441\u0435\u043a.\") def run_async_parser(sqlalchemy_url, sample_urls): asyncio.run(async_parser(sqlalchemy_url, sample_urls)) \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b \u041c\u0435\u0442\u043e\u0434 \u0412\u0440\u0435\u043c\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f (\u0441\u0435\u043a.) Parser 13.99 Threading 12.99 Multiprocessing 6.38 Async 3.73 \u0412\u044b\u0432\u043e\u0434\u044b \u0412 \u043f\u0430\u0440\u0441\u0438\u043d\u0433\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 threading \u043d\u0435 \u0434\u0430\u0435\u0442 \u043f\u043e\u0447\u0442\u0438 \u043d\u0438\u043a\u0430\u043a\u043e\u0433\u043e \u043f\u0440\u0438\u0440\u043e\u0441\u0442\u0430 \u043f\u043e \u0441\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u044e \u0441 \u043e\u0434\u043d\u043e\u043f\u043e\u0442\u043e\u043a\u043e\u043c Async \u0441 \u0431\u043e\u043b\u044c\u0448\u0438\u043c \u043f\u0440\u0435\u0438\u043c\u0443\u0449\u0435\u0441\u0442\u0432\u043e\u043c \u0432\u044b\u0438\u0433\u0440\u044b\u0432\u0430\u0435\u0442 \u0432 \u043f\u043e\u0434\u043e\u0431\u043d\u044b\u0445 \u043f\u0430\u0440\u0441\u0438\u043d\u0433\u0443 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u044f\u0445 Multiprocessing - \u043d\u0435\u043f\u043b\u043e\u0445\u043e\u0439 \u0432\u044b\u0431\u043e\u0440","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 6"},{"location":"labs/lab_6/#no6","text":"","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u21166"},{"location":"labs/lab_6/#1","text":"\u0420\u0430\u0437\u043b\u0438\u0447\u0438\u044f \u043c\u0435\u0436\u0434\u0443 threading, multiprocessing \u0438 async \u0432 Python \u0417\u0430\u0434\u0430\u0447\u0430: \u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u0442\u0440\u0438 \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0445 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b \u043d\u0430 Python, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0449\u0438\u0435 \u043a\u0430\u0436\u0434\u044b\u0439 \u0438\u0437 \u043f\u043e\u0434\u0445\u043e\u0434\u043e\u0432: threading, multiprocessing \u0438 async. \u041a\u0430\u0436\u0434\u0430\u044f \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0440\u0435\u0448\u0430\u0442\u044c \u0441\u0447\u0438\u0442\u0430\u0442\u044c \u0441\u0443\u043c\u043c\u0443 \u0432\u0441\u0435\u0445 \u0447\u0438\u0441\u0435\u043b \u043e\u0442 1 \u0434\u043e 10000000000000. \u0420\u0430\u0437\u0434\u0435\u043b\u0438\u0442\u0435 \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044f \u043d\u0430 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u044b\u0445 \u0437\u0430\u0434\u0430\u0447 \u0434\u043b\u044f \u0443\u0441\u043a\u043e\u0440\u0435\u043d\u0438\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f. \u041f\u043e\u0434\u0440\u043e\u0431\u043d\u043e\u0441\u0442\u0438 \u0437\u0430\u0434\u0430\u043d\u0438\u044f: \u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0443 \u043d\u0430 Python \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u043f\u043e\u0434\u0445\u043e\u0434\u0430: threading, multiprocessing \u0438 async. \u041a\u0430\u0436\u0434\u0430\u044f \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0442\u044c \u0444\u0443\u043d\u043a\u0446\u0438\u044e calculate_sum(), \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0431\u0443\u0434\u0435\u0442 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0442\u044c \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044f. \u0414\u043b\u044f threading \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 \u043c\u043e\u0434\u0443\u043b\u044c threading, \u0434\u043b\u044f multiprocessing - \u043c\u043e\u0434\u0443\u043b\u044c multiprocessing, \u0430 \u0434\u043b\u044f async - \u043a\u043b\u044e\u0447\u0435\u0432\u044b\u0435 \u0441\u043b\u043e\u0432\u0430 async/await \u0438 \u043c\u043e\u0434\u0443\u043b\u044c asyncio. \u041a\u0430\u0436\u0434\u0430\u044f \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0440\u0430\u0437\u0431\u0438\u0442\u044c \u0437\u0430\u0434\u0430\u0447\u0443 \u043d\u0430 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043f\u043e\u0434\u0437\u0430\u0434\u0430\u0447 \u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0442\u044c \u0438\u0445 \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u043e. \u0417\u0430\u043c\u0435\u0440\u044c\u0442\u0435 \u0432\u0440\u0435\u043c\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u043a\u0430\u0436\u0434\u043e\u0439 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b \u0438 \u0441\u0440\u0430\u0432\u043d\u0438\u0442\u0435 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b. \u041e\u0431\u044b\u0447\u043d\u044b\u0439 \u043f\u043e\u0434\u0441\u0447\u0435\u0442 for max_value in range(5, 10): t = time.time() cnt = 0 for i in range(1, 10 ** max_value + 1): cnt += i print(\"Counter value:\", cnt) print(\"Time:\", time.time() - t) print(\"--\\--\\--\\--\\--\\--\\--\\--\\--\") Threading: n = 1_000_000_000 sums = [] lock = threading.Lock() def counter(begin, shift): global sums part = sum(range(begin, n, shift)) lock.acquire() sums.append(part) lock.release() def calculate_sum(): thread_count = 100 threads = [threading.Thread(target=counter, args=(i, thread_count)) for i in range(thread_count)] for thread in threads: thread.start() for thread in threads: thread.join() if __name__ == '__main__': start_time = time.time() calculate_sum() print(\"\u0421\u0443\u043c\u043c\u0430:\", sum(sums), \"\u0412\u0440\u0435\u043c\u044f:\", time.time() - start_time) Multiprocessing: sums = [] n = 1_000_000_000 def counter(x): return sum(range(x[0], n, x[1])) def calculate_sums(): process_count = 10 with multiprocessing.Pool(processes=process_count) as pool: it = pool.imap_unordered(counter, [(i, process_count) for i in range(process_count)], chunksize=1) return sum(it) if __name__ == '__main__': start = time.time() result = calculate_sums() print(\"\u0421\u0443\u043c\u043c\u0430:\", result, \"\u0412\u0440\u0435\u043c\u044f:\", time.time() - start) Async: n = 1_000_000_000 async def counter(begin, shift): return sum(range(begin, n, shift)) async def calculate_sum(): coroutines_count = 100 tasks = [counter(i, coroutines_count) for i in range(coroutines_count)] return await asyncio.gather(*tasks) if __name__ == '__main__': start = time.time() sums = asyncio.run(calculate_sum()) print(\"\u0421\u0443\u043c\u043c\u0430:\", sum(sums), \"\u0412\u0440\u0435\u043c\u044f:\", time.time() - start)","title":"\u0417\u0430\u0434\u0430\u0447\u0430 1"},{"location":"labs/lab_6/#_1","text":"\u041c\u0435\u0442\u043e\u0434 \u0412\u0440\u0435\u043c\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f (\u0441\u0435\u043a.) Sum 32.69 Threading 32.49 Multiprocessing 6.07 Async 35.32","title":"\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b"},{"location":"labs/lab_6/#_2","text":"\u0412 \u043f\u043e\u0434\u0441\u0447\u0435\u0442\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 threading \u043d\u0435 \u0434\u0430\u0435\u0442 \u043f\u043e\u0447\u0442\u0438 \u043d\u0438\u043a\u0430\u043a\u043e\u0433\u043e \u043f\u0440\u0438\u0440\u043e\u0441\u0442\u0430 \u043f\u043e \u0441\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u044e \u0441 \u043e\u0434\u043d\u043e\u043f\u043e\u0442\u043e\u043a\u043e\u043c, \u043a\u0430\u043a \u0438 Async Multiprocessing \u0441 \u0431\u043e\u043b\u044c\u0448\u0438\u043c \u043f\u0440\u0435\u0438\u043c\u0443\u0449\u0435\u0441\u0442\u0432\u043e\u043c \u0432\u044b\u0438\u0433\u0440\u044b\u0432\u0430\u0435\u0442 \u0432 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u044f\u0445 \u043f\u043e\u0434\u0441\u0447\u0435\u0442\u0430","title":"\u0412\u044b\u0432\u043e\u0434\u044b"},{"location":"labs/lab_6/#2","text":"\u041f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u044b\u0439 \u043f\u0430\u0440\u0441\u0438\u043d\u0433 \u0432\u0435\u0431-\u0441\u0442\u0440\u0430\u043d\u0438\u0446 \u0441 \u0441\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435\u043c \u0432 \u0431\u0430\u0437\u0443 \u0434\u0430\u043d\u043d\u044b\u0445 \u0417\u0430\u0434\u0430\u0447\u0430: \u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0443 \u043d\u0430 Python \u0434\u043b\u044f \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u043e\u0433\u043e \u043f\u0430\u0440\u0441\u0438\u043d\u0433\u0430 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u0445 \u0432\u0435\u0431-\u0441\u0442\u0440\u0430\u043d\u0438\u0446 \u0441 \u0441\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435\u043c \u0434\u0430\u043d\u043d\u044b\u0445 \u0432 \u0431\u0430\u0437\u0443 \u0434\u0430\u043d\u043d\u044b\u0445 \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u043f\u043e\u0434\u0445\u043e\u0434\u043e\u0432 threading, multiprocessing \u0438 async. \u041a\u0430\u0436\u0434\u0430\u044f \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u043f\u0430\u0440\u0441\u0438\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u0441 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u0445 \u0432\u0435\u0431-\u0441\u0430\u0439\u0442\u043e\u0432, \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0442\u044c \u0438\u0445 \u0432 \u0431\u0430\u0437\u0443 \u0434\u0430\u043d\u043d\u044b\u0445. \u041f\u043e\u0434\u0440\u043e\u0431\u043d\u043e\u0441\u0442\u0438 \u0437\u0430\u0434\u0430\u043d\u0438\u044f: \u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u0442\u0440\u0438 \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0445 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b \u043d\u0430 Python, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0449\u0438\u0435 \u043a\u0430\u0436\u0434\u044b\u0439 \u0438\u0437 \u043f\u043e\u0434\u0445\u043e\u0434\u043e\u0432: threading, multiprocessing \u0438 async. \u041a\u0430\u0436\u0434\u0430\u044f \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0442\u044c \u0444\u0443\u043d\u043a\u0446\u0438\u044e parse_and_save(url), \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0431\u0443\u0434\u0435\u0442 \u0437\u0430\u0433\u0440\u0443\u0436\u0430\u0442\u044c HTML-\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0443 \u043f\u043e \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u043e\u043c\u0443 URL, \u043f\u0430\u0440\u0441\u0438\u0442\u044c \u0435\u0435, \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0442\u044c \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043e\u043a \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b \u0432 \u0431\u0430\u0437\u0443 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438 \u0432\u044b\u0432\u043e\u0434\u0438\u0442\u044c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043d\u0430 \u044d\u043a\u0440\u0430\u043d. \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 \u0431\u0430\u0437\u0443 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438\u0437 \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u044b \u043d\u043e\u043c\u0435\u0440 1 \u0434\u043b\u044f \u0437\u0430\u043f\u043e\u043b\u0435\u043d\u043d\u0438\u044f \u0435\u0435 \u0434\u0430\u043d\u043d\u044b\u043c\u0438. \u0415\u0441\u043b\u0438 \u0412\u044b \u043d\u0435 \u043f\u043e\u043d\u0438\u043c\u0430\u0435\u0442\u0435, \u043a\u0430\u043a\u0438\u0435 \u0442\u0430\u0431\u043b\u0438\u0446\u044b \u0438 \u043e\u0442\u043a\u0443\u0434\u0430 \u0412\u044b \u043c\u043e\u0433\u043b\u0438 \u0431\u044b \u0437\u0430\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043f\u0430\u0440\u0441\u0438\u043d\u0433\u0430, \u043d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u043f\u0440\u0435\u043f\u043e\u0434\u0430\u0432\u0430\u0442\u0435\u043b\u044e \u0432 \u043e\u0431\u0449\u0435\u043c \u0447\u0430\u0442\u0435 \u043f\u043e\u0442\u043e\u043a\u0430. \u0414\u043b\u044f threading \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 \u043c\u043e\u0434\u0443\u043b\u044c threading, \u0434\u043b\u044f multiprocessing - \u043c\u043e\u0434\u0443\u043b\u044c multiprocessing, \u0430 \u0434\u043b\u044f async - \u043a\u043b\u044e\u0447\u0435\u0432\u044b\u0435 \u0441\u043b\u043e\u0432\u0430 async/await \u0438 \u043c\u043e\u0434\u0443\u043b\u044c aiohttp \u0434\u043b\u044f \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0445 \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432. \u0421\u043e\u0437\u0434\u0430\u0439\u0442\u0435 \u0441\u043f\u0438\u0441\u043e\u043a \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u0445 URL-\u0430\u0434\u0440\u0435\u0441\u043e\u0432 \u0432\u0435\u0431-\u0441\u0442\u0440\u0430\u043d\u0438\u0446 \u0434\u043b\u044f \u043f\u0430\u0440\u0441\u0438\u043d\u0433\u0430 \u0438 \u0440\u0430\u0437\u0434\u0435\u043b\u0438\u0442\u0435 \u0435\u0433\u043e \u043d\u0430 \u0440\u0430\u0432\u043d\u044b\u0435 \u0447\u0430\u0441\u0442\u0438 \u0434\u043b\u044f \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u043e\u0433\u043e \u043f\u0430\u0440\u0441\u0438\u043d\u0433\u0430. \u0417\u0430\u043f\u0443\u0441\u0442\u0438\u0442\u0435 \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u044b\u0439 \u043f\u0430\u0440\u0441\u0438\u043d\u0433 \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0439 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b \u0438 \u0441\u043e\u0445\u0440\u0430\u043d\u0438\u0442\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0432 \u0431\u0430\u0437\u0443 \u0434\u0430\u043d\u043d\u044b\u0445. \u0417\u0430\u043c\u0435\u0440\u044c\u0442\u0435 \u0432\u0440\u0435\u043c\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u043a\u0430\u0436\u0434\u043e\u0439 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b \u0438 \u0441\u0440\u0430\u0432\u043d\u0438\u0442\u0435 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b. \u0414\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u0442\u0440\u0435\u0431\u043e\u0432\u0430\u043d\u0438\u044f: \u0421\u0434\u0435\u043b\u0430\u0439\u0442\u0435 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044e, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0443\u044e \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u043a\u0430\u0436\u0434\u043e\u0439 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u044b\u0435 \u043f\u043e\u0434\u0445\u043e\u0434\u044b \u0438 \u0438\u0445 \u043e\u0441\u043e\u0431\u0435\u043d\u043d\u043e\u0441\u0442\u0438. \u0412\u043a\u043b\u044e\u0447\u0438\u0442\u0435 \u0432 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044e \u0442\u0430\u0431\u043b\u0438\u0446\u044b, \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0430\u044e\u0449\u0438\u0435 \u0432\u0440\u0435\u043c\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u043a\u0430\u0436\u0434\u043e\u0439 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b. \u041f\u0440\u043e\u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0438\u0440\u0443\u0439\u0442\u0435 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b \u0441\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u044f \u0432\u0440\u0435\u043c\u0435\u043d\u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 \u0440\u0430\u0437\u043d\u044b\u0445 \u043f\u043e\u0434\u0445\u043e\u0434\u043e\u0432. \u0421\u043f\u0438\u0441\u043e\u043a \u0441\u0430\u0439\u0442\u043e\u0432: https://www.leadertask.ru/blog/celi-na-etot-god https://singularity-app.ru/blog/tseli-na-god/?ysclid=maut5kcczr776505947 https://instalook.ru/blog/spisok-celey-na--god?ysclid=mauug5wya098753197 https://www.coaching-online.org/monthly-goals/ https://facedragons.com/personal-development/list-of-goal-ideas/ \u0413\u043b\u0430\u0432\u043d\u044b\u0439 \u0444\u0430\u0439\u043b: def get_sqlalchemy_engine(): return create_engine(sqlalchemy_url) def test_connection(): engine = get_sqlalchemy_engine() with engine.connect() as connection: print(\"\u041f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u043a \u0431\u0430\u0437\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 \u0443\u0441\u043f\u0435\u0448\u043d\u043e \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043b\u0435\u043d\u043e!\") return True if __name__ == \"__main__\": test_connection() run_parser(sqlalchemy_url, links) run_threading_parser(sqlalchemy_url, links) run_multiprocessing_parser(sqlalchemy_url, links) run_async_parser(sqlalchemy_url, links) \u041e\u0431\u044b\u0447\u043d\u044b\u0439 \u043f\u0430\u0440\u0441\u0438\u043d\u0433: def save(engine, task_table, task_name): with engine.connect() as connection: try: stmt = insert(task_table).values( name=task_name, deadline='2026-01-01 00:00:00.000', status='in_progress', priority='medium', created_by=0 ) result = connection.execute(stmt) connection.commit() return result except Exception as e: connection.rollback() raise engine.dispose() def parse_and_save(sqlalchemy_url, url): engine = create_engine(sqlalchemy_url) metadata = MetaData() task_table = Table( 'task', metadata, autoload_with=engine ) resp = req.get(url) soup = BeautifulSoup(resp.text, 'html.parser') if url in [ 'https://www.leadertask.ru/blog/celi-na-etot-god', 'https://www.makingsenseofcents.com/2022/12/goal-ideas.html', 'https://facedragons.com/personal-development/list-of-goal-ideas/' ]: soup = soup.find_all('ul', {'class': 'wp-block-list'}) else: soup = soup.find_all('ol') tasks = [] for tag in soup: for task_index in tag.text.splitlines(): if task_index != '': tasks.append(task_index) save(engine, task_table, tasks) def process_urls(urls, sqlalchemy_url): for url in urls: parse_and_save(sqlalchemy_url, url) def parser(sqlalchemy_url, urls): start_time = time.time() process_urls(urls, sqlalchemy_url) elapsed_time = time.time() - start_time print(f\"Parser: {elapsed_time:.2f} \u0441\u0435\u043a.\") def run_parser(sqlalchemy_url, urls): parser(sqlalchemy_url, urls) Threading: def save(engine, task_table, task_name): with engine.connect() as connection: try: stmt = insert(task_table).values( name=task_name, deadline='2026-01-01 00:00:00.000', status='in_progress', priority='medium', created_by=0 ) result = connection.execute(stmt) connection.commit() return result except Exception as e: connection.rollback() raise engine.dispose() def parse_and_save(sqlalchemy_url, url): engine = create_engine(sqlalchemy_url) metadata = MetaData() task_table = Table( 'task', metadata, autoload_with=engine ) resp = req.get(url) soup = BeautifulSoup(resp.text, 'html.parser') if url in [ 'https://www.leadertask.ru/blog/celi-na-etot-god', 'https://www.makingsenseofcents.com/2022/12/goal-ideas.html', 'https://facedragons.com/personal-development/list-of-goal-ideas/' ]: soup = soup.find_all('ul', {'class': 'wp-block-list'}) else: soup = soup.find_all('ol') tasks = [] for tag in soup: for task_index in tag.text.splitlines(): if task_index != '': tasks.append(task_index) save(engine, task_table, tasks) def threading_parser(sqlalchemy_url, urls): start_time = time.time() num_threads = 6 chunk_size = len(urls) // num_threads threads = [] for i in range(num_threads): start = i * chunk_size end = start + chunk_size if i < num_threads - 1 else len(urls) thread_urls = urls[start:end] thread = threading.Thread( target=lambda urls: [parse_and_save(sqlalchemy_url, url) for url in urls], args=(thread_urls,), name=f\"Thread-{i+1}\" ) threads.append(thread) thread.start() for thread in threads: thread.join() elapsed_time = time.time() - start_time print(f\"Threading: {elapsed_time:.2f} \u0441\u0435\u043a.\") def run_threading_parser(sqlalchemy_url, urls): threading_parser(sqlalchemy_url, urls) Multiprocessing: def save(engine, task_table, task_name): with engine.connect() as connection: try: stmt = insert(task_table).values( name=task_name, deadline='2026-01-01 00:00:00.000', status='in_progress', priority='medium', created_by=0 ) result = connection.execute(stmt) connection.commit() return result except Exception as e: connection.rollback() raise engine.dispose() def parse_and_save(sqlalchemy_url, url): engine = create_engine(sqlalchemy_url) metadata = MetaData() task_table = Table( 'task', metadata, autoload_with=engine ) resp = req.get(url) soup = BeautifulSoup(resp.text, 'html.parser') if url in [ 'https://www.leadertask.ru/blog/celi-na-etot-god', 'https://www.makingsenseofcents.com/2022/12/goal-ideas.html', 'https://facedragons.com/personal-development/list-of-goal-ideas/' ]: soup = soup.find_all('ul', {'class': 'wp-block-list'}) else: soup = soup.find_all('ol') tasks = [] for tag in soup: for task_index in tag.text.splitlines(): if task_index != '': tasks.append(task_index) save(engine, task_table, tasks) def process_urls(urls, sqlalchemy_url): for url in urls: parse_and_save(sqlalchemy_url, url) def multiprocessing_parser(sqlalchemy_url, urls): start_time = time.time() num_processes = 5 chunk_size = len(urls) // num_processes chunks = [urls[i:i + chunk_size] for i in range(0, len(urls), chunk_size)] processes = [] for chunk in chunks: process = multiprocessing.Process( target=process_urls, args=(chunk, sqlalchemy_url) ) processes.append(process) process.start() for process in processes: process.join() elapsed_time = time.time() - start_time print(f\"Multiprocessing: {elapsed_time:.2f} \u0441\u0435\u043a.\") def run_multiprocessing_parser(sqlalchemy_url, urls): multiprocessing_parser(sqlalchemy_url, urls) Async: async def save(engine, task_table, tasks): with engine.connect() as connection: try: for task_i in tasks: stmt = insert(task_table).values( name=task_i, deadline='2026-01-01 00:00:00.000', status='in_progress', priority='medium', created_by=0 ) result = connection.execute(stmt) connection.commit() return result except Exception as e: connection.rollback() raise engine.dispose() async def parse_and_save(sqlalchemy_url, session, url): engine = create_engine(sqlalchemy_url) metadata = MetaData() task_table = Table( 'task', metadata, autoload_with=engine ) try: async with session.get(url, timeout=10) as response: html = await response.text() soup = BeautifulSoup(html, 'html.parser') if url in [ 'https://www.leadertask.ru/blog/celi-na-etot-god', 'https://www.makingsenseofcents.com/2022/12/goal-ideas.html', 'https://facedragons.com/personal-development/list-of-goal-ideas/' ]: soup = soup.find_all('ul', {'class': 'wp-block-list'}) else: soup = soup.find_all('ol') tasks = [] for tag in soup: for task_index in tag.text.splitlines(): if task_index != '': tasks.append(task_index) await save(engine, task_table, tasks) except Exception as e: print(f\"Error parsing {url}: {e}\") async def async_parser(sqlalchemy_url, urls): start_time = time.time() connector = aiohttp.TCPConnector() async with aiohttp.ClientSession(connector=connector) as session: tasks = [parse_and_save(sqlalchemy_url, session, url) for url in urls] await asyncio.gather(*tasks) elapsed_time = time.time() - start_time print(f\"Async: {elapsed_time:.2f} \u0441\u0435\u043a.\") def run_async_parser(sqlalchemy_url, sample_urls): asyncio.run(async_parser(sqlalchemy_url, sample_urls))","title":"\u0417\u0430\u0434\u0430\u0447\u0430 2"},{"location":"labs/lab_6/#_3","text":"\u041c\u0435\u0442\u043e\u0434 \u0412\u0440\u0435\u043c\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f (\u0441\u0435\u043a.) Parser 13.99 Threading 12.99 Multiprocessing 6.38 Async 3.73","title":"\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b"},{"location":"labs/lab_6/#_4","text":"\u0412 \u043f\u0430\u0440\u0441\u0438\u043d\u0433\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 threading \u043d\u0435 \u0434\u0430\u0435\u0442 \u043f\u043e\u0447\u0442\u0438 \u043d\u0438\u043a\u0430\u043a\u043e\u0433\u043e \u043f\u0440\u0438\u0440\u043e\u0441\u0442\u0430 \u043f\u043e \u0441\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u044e \u0441 \u043e\u0434\u043d\u043e\u043f\u043e\u0442\u043e\u043a\u043e\u043c Async \u0441 \u0431\u043e\u043b\u044c\u0448\u0438\u043c \u043f\u0440\u0435\u0438\u043c\u0443\u0449\u0435\u0441\u0442\u0432\u043e\u043c \u0432\u044b\u0438\u0433\u0440\u044b\u0432\u0430\u0435\u0442 \u0432 \u043f\u043e\u0434\u043e\u0431\u043d\u044b\u0445 \u043f\u0430\u0440\u0441\u0438\u043d\u0433\u0443 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u044f\u0445 Multiprocessing - \u043d\u0435\u043f\u043b\u043e\u0445\u043e\u0439 \u0432\u044b\u0431\u043e\u0440","title":"\u0412\u044b\u0432\u043e\u0434\u044b"},{"location":"labs/lab_7/","text":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u21167 1) \u0423\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u044c Celery \u0438 Redis: celery_app = Celery( \"parser\", broker=\"redis://lr5-redis-1:6379/0\", backend=\"redis://lr5-redis-1:6379/0\" ) @celery_app.task def parse_url_task(url: str): return parse_link(url) 2) \u041e\u0431\u043d\u043e\u0432\u0438\u0442\u044c Docker Compose \u0444\u0430\u0439\u043b: services: timemanager: build: context: ./TimeManager container_name: timemanager ports: - \"8000:8000\" depends_on: - db env_file: - ./TimeManager/.env parser: build: context: ./parser container_name: parser ports: - \"9000:9000\" depends_on: - db - redis env_file: - ./parser/.env worker: build: context: ./parser container_name: parser-worker command: celery -A worker.celery_app worker --loglevel=info depends_on: - parser - redis - db env_file: - .env db: image: \"postgres:17.2\" container_name: postgres restart: always env_file: - .env redis: image: \"redis:latest\" ports: - \"6379:6379\" 3) \u042d\u043d\u0434\u043f\u043e\u0438\u043d\u0442 \u0434\u043b\u044f \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0433\u043e \u0432\u044b\u0437\u043e\u0432\u0430 \u043f\u0430\u0440\u0441\u0435\u0440\u0430 @app.post(\"/parse-async\") async def parse_direct(url: str): try: count = await parse_link(url) return {\"message\": \"\u041f\u0430\u0440\u0441\u0438\u043d\u0433 \u0437\u0430\u0432\u0435\u0440\u0448\u0451\u043d\", \"added\": count} except Exception as e: raise HTTPException(status_code=500, detail=f\"\u041e\u0448\u0438\u0431\u043a\u0430 \u043f\u0430\u0440\u0441\u0438\u043d\u0433\u0430: {e}\")","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 7"},{"location":"labs/lab_7/#no7","text":"","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u21167"},{"location":"labs/lab_7/#1-celery-redis","text":"celery_app = Celery( \"parser\", broker=\"redis://lr5-redis-1:6379/0\", backend=\"redis://lr5-redis-1:6379/0\" ) @celery_app.task def parse_url_task(url: str): return parse_link(url)","title":"1) \u0423\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u044c Celery \u0438 Redis:"},{"location":"labs/lab_7/#2-docker-compose","text":"services: timemanager: build: context: ./TimeManager container_name: timemanager ports: - \"8000:8000\" depends_on: - db env_file: - ./TimeManager/.env parser: build: context: ./parser container_name: parser ports: - \"9000:9000\" depends_on: - db - redis env_file: - ./parser/.env worker: build: context: ./parser container_name: parser-worker command: celery -A worker.celery_app worker --loglevel=info depends_on: - parser - redis - db env_file: - .env db: image: \"postgres:17.2\" container_name: postgres restart: always env_file: - .env redis: image: \"redis:latest\" ports: - \"6379:6379\"","title":"2) \u041e\u0431\u043d\u043e\u0432\u0438\u0442\u044c Docker Compose \u0444\u0430\u0439\u043b:"},{"location":"labs/lab_7/#3","text":"@app.post(\"/parse-async\") async def parse_direct(url: str): try: count = await parse_link(url) return {\"message\": \"\u041f\u0430\u0440\u0441\u0438\u043d\u0433 \u0437\u0430\u0432\u0435\u0440\u0448\u0451\u043d\", \"added\": count} except Exception as e: raise HTTPException(status_code=500, detail=f\"\u041e\u0448\u0438\u0431\u043a\u0430 \u043f\u0430\u0440\u0441\u0438\u043d\u0433\u0430: {e}\")","title":"3) \u042d\u043d\u0434\u043f\u043e\u0438\u043d\u0442 \u0434\u043b\u044f \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0433\u043e \u0432\u044b\u0437\u043e\u0432\u0430 \u043f\u0430\u0440\u0441\u0435\u0440\u0430"}]}